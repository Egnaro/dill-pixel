{"version":3,"file":"dill-pixel-plugin-matter-physics.mjs","sources":["../src/System.ts","../src/MatterPhysicsPlugin.ts","../src/Entity.ts","../src/PhysicsContainer.ts"],"sourcesContent":["import { Application, IApplication } from \"dill-pixel\";\nimport { Bodies, Body, Engine, Runner, World } from \"matter-js\";\nimport { Container, Graphics, Rectangle, Ticker } from \"pixi.js\";\n\nimport { IMatterPhysicsObject } from \"./interfaces\";\nimport { MatterBodyLike } from \"./types\";\nimport { MatterPhysicsPluginOptions } from \"./MatterPhysicsPlugin\";\n\nexport class System {\n    public static pluginOptions: Partial<MatterPhysicsPluginOptions>;\n    public static container: Container;\n\n    private static _options: Partial<MatterPhysicsPluginOptions>;\n    private static _debug: boolean = false;\n    private static _enabled: boolean = false;\n    private static _runner: Runner;\n    private static _engine: Engine;\n    private static _bounds: Rectangle;\n    private static _objects: Set<IMatterPhysicsObject> = new Set();\n\n    private static _debugGraphics: Graphics | null = null;\n\n    private static get app(): IApplication {\n        return Application.getInstance();\n    }\n\n    static set enabled(value: boolean) {\n        System._enabled = value;\n        if (System._enabled) {\n            if (System._engine) {\n                Runner.run(System._engine);\n                System.app.ticker.add(System.update);\n            }\n        } else {\n            if (System._runner) {\n                Runner.stop(System._runner);\n                System.app.ticker.remove(System.update);\n            }\n        }\n    }\n\n    static get enabled() {\n        return System._enabled;\n    }\n\n    static set debug(value: boolean) {\n        System._debug = value;\n        if (!System._debug && System._debugGraphics) {\n            System._debugGraphics.destroy();\n            System._debugGraphics.parent?.removeChild(System._debugGraphics);\n            System._debugGraphics = null;\n        }\n    }\n\n    static get debug() {\n        return System._debug;\n    }\n\n    static get engine() {\n        return System._engine;\n    }\n\n    static get runner() {\n        return System._runner;\n    }\n\n    static get bounds() {\n        return System._bounds;\n    }\n\n    static set bounds(bounds: Rectangle) {\n        System._bounds = bounds;\n    }\n\n    static initialize(options: Partial<MatterPhysicsPluginOptions>) {\n        System._options = { ...System.pluginOptions, ...options }\n        System._engine = Engine.create(System._options.engine);\n        System._runner = Runner.create(System._options.runner);\n        Runner.run(System._engine);\n\n        if (System._options.container) {\n            System.container = System._options.container;\n        }\n\n        if (System._options.worldBounds) {\n            System.bounds = System._options.worldBounds;\n        }\n        if (System._options.createWalls) {\n            const thickness = System._options.createWalls.thickness ?? 10\n            const { width, height } = System.bounds;\n            const walls = []\n            if (System._options.createWalls.top) {\n                walls.push(\n                    Bodies.rectangle(width / 2, - thickness / 2, width, thickness, {\n                        isStatic: true,\n                    })\n                )\n            }\n            if (System._options.createWalls.bottom) {\n                walls.push(Bodies.rectangle(width / 2, height + thickness / 2, width, thickness, {\n                    isStatic: true,\n                }))\n            }\n            if (System._options.createWalls.left) {\n                walls.push(\n                    Bodies.rectangle(-width / 2 - thickness / 2, -thickness / 2, thickness, height + thickness, {\n                        isStatic: true,\n                    })\n                )\n            }\n            if (System._options.createWalls.right) {\n                walls.push(Bodies.rectangle(width / 2 + thickness / 2, -thickness / 2, thickness, height + thickness, {\n                    isStatic: true,\n                }))\n            }\n\n            System.addToWorld(...walls);\n        }\n\n    }\n\n    static addToWorld(...objects: (IMatterPhysicsObject | MatterBodyLike)[]) {\n        objects.forEach((obj) => {\n            let body: MatterBodyLike;\n            // eslint-disable-next-line no-prototype-builtins\n            if (obj.hasOwnProperty('body')) {\n                body = (obj as IMatterPhysicsObject).body;\n                this._objects.add(obj as IMatterPhysicsObject)\n            } else {\n                body = obj as MatterBodyLike;\n            }\n            World.add(System._engine.world, body);\n        });\n    }\n\n    static removeFromWorld(...objects: (IMatterPhysicsObject | MatterBodyLike)[]) {\n        objects.forEach((obj) => {\n            let body: MatterBodyLike;\n            // eslint-disable-next-line no-prototype-builtins\n            if (obj.hasOwnProperty('body')) {\n                body = (obj as IMatterPhysicsObject).body;\n                this._objects.add(obj as IMatterPhysicsObject)\n            } else {\n                body = obj as MatterBodyLike;\n            }\n            World.remove(this._engine.world, body);\n            System._objects.delete(obj as IMatterPhysicsObject);\n        });\n    }\n\n    private static update(ticker: Ticker) {\n        if (!System._enabled) {\n            return;\n        }\n        if (System._engine) {\n            System._objects.forEach((obj) => {\n                obj.update();\n            });\n            if (System.debug) {\n                System.drawDebug();\n            }\n            Engine.update(System._engine, 16.666666666666668, ticker.deltaTime);\n        }\n    }\n\n    static drawDebug() {\n        if (!System._debugGraphics) {\n            System._debugGraphics = new Graphics();\n            System._debugGraphics.zIndex = 1000;\n            System._debugGraphics.sortableChildren = true;\n        }\n        if (System.container && !System._debugGraphics.parent) {\n            System.container.addChild(System._debugGraphics)\n        }\n        System._debugGraphics.clear();\n        System._objects.forEach((obj) => {\n            const body = obj.body as Body;\n            const color = obj?.debugColor || 0x29c5f6;\n            const vertices = body.vertices;\n            if (System._debugGraphics && vertices.length > 0) {\n                System._debugGraphics.moveTo(vertices[0].x, vertices[0].y);\n\n                for (let j = 1; j < vertices.length; j++) {\n                    System._debugGraphics.lineTo(vertices[j].x, vertices[j].y);\n                }\n\n                System._debugGraphics.lineTo(vertices[0].x, vertices[0].y);\n                System._debugGraphics.fill({ color, alpha: 0.25 })\n                System._debugGraphics.stroke({ color: 0xff0000, alignment: 0.5 })\n            }\n        })\n    }\n}","import { Container, Rectangle } from 'pixi.js';\nimport { IApplication, IPlugin, Plugin } from 'dill-pixel';\nimport { IEngineDefinition, IRunnerOptions } from 'matter-js';\n\nimport { System } from './System';\n\nexport interface IMatterPhysicPlugin extends IPlugin {\n\n}\n\nexport type MatterPhysicsPluginOptions = {\n    debug: boolean;\n    autoInit: boolean;\n    container?: Container;\n    worldBounds?: Rectangle;\n    createWalls?: { thickness: number, top?: boolean, bottom?: boolean, left?: boolean, right?: boolean }\n    engine: Partial<IEngineDefinition>,\n    runner: Partial<IRunnerOptions>,\n}\n\nconst defaultOptions = {\n    debug: false,\n    autoInit: false,\n    engine: {\n    },\n    runner: {\n        delta: 1000 / 60,\n        isFixed: false,\n        enabled: true,\n    }\n}\n\nexport class MatterPhysicsPlugin extends Plugin implements IMatterPhysicPlugin { \n    private _options: MatterPhysicsPluginOptions;\n    initialize(_app: IApplication, options?: Partial<MatterPhysicsPluginOptions>): void | Promise<void> {\n        this._options = {\n            ...defaultOptions, ...options, runner: { ...defaultOptions.runner, ...options?.runner }, engine: { ...defaultOptions.engine, ...options?.engine }\n        }\n        if (this._options.autoInit) {\n            System.initialize(this._options);\n        }\n    }\n\n    get system(): typeof System {\n        return System;\n    }\n}\n\n\n","import { Bodies, IBodyDefinition } from 'matter-js';\nimport { Container, Size } from 'dill-pixel';\n\nimport { IMatterPhysicsObject } from './interfaces';\nimport { MatterBodyType } from './types';\nimport { Container as PIXIContainer } from 'pixi.js';\nimport { System } from './System';\n\nexport type EntityConfig = {\n    bodyType?: MatterBodyType;\n    size?: Size,\n    view?: PIXIContainer;\n    bodyDefinition?: Partial<IBodyDefinition>\n}\n\nexport class Entity extends Container implements IMatterPhysicsObject {\n    public static readonly DEFAULT_DEBUG_COLOR: number = 0x29c5f6;\n    body: Matter.Body;\n    public view: PIXIContainer;\n    public bodyType: MatterBodyType;\n    public bodyDefinition: Partial<IBodyDefinition> = {};\n\n    constructor(\n        public config: Partial<EntityConfig> = {}\n    ) {\n        super();\n        if (config.view) {\n            this.view = this.add.existing(config.view);\n        }\n        if (config.bodyType) {\n            this.bodyType = config.bodyType\n        }\n        if (config.bodyDefinition) {\n            this.bodyDefinition = config.bodyDefinition;\n        }\n    }\n\n    public get debugColor(): number {\n        return Entity.DEFAULT_DEBUG_COLOR;\n    }\n\n    public get system(): typeof System {\n        return System;\n    }\n\n\n    added() {\n        this.createBody();\n        this.system.addToWorld(this);\n    }\n\n    onRemoved(): void {\n        this.system.removeFromWorld(this.body);\n    }\n\n    createBody() {\n        const w = this.config.size?.width || this.view.width;\n        const h = this.config.size?.height || this.view.height;\n\n        switch (this.bodyType) {\n            case \"rectangle\":\n                this.body = Bodies.rectangle(this.x, this.y, w, h, this.bodyDefinition);\n                break;\n            case \"circle\":\n                this.body = Bodies.circle(this.x, this.y, w * 0.5, this.bodyDefinition);\n                break;\n            case \"convex\":\n                // this.body = Bodies.fromVertices(this.sprite.x, this.sprite.y, this.sprite.width, this.sprite.height);\n                break;\n            case \"trapezoid\":\n                this.body = Bodies.trapezoid(this.x, this.y, w, h, 0.5, this.bodyDefinition);\n                break;\n        }\n    }\n\n    update() {\n        if (this.view && this.body) {\n            this.x = this.body.position.x;\n            this.y = this.body.position.y;\n            this.rotation = this.body.angle;\n        }\n    }\n}\n","import { Application, bindAllMethods, defaultFactoryMethods, FactoryContainer, Size, WithSignals } from 'dill-pixel';\nimport { DestroyOptions, Ticker } from 'pixi.js';\nimport { Entity, EntityConfig } from './Entity';\n\nconst factoryMethods = {\n  ...defaultFactoryMethods,\n  entity: (config: Partial<EntityConfig>) => {\n    return new Entity(config);\n  },\n};\n\n// create a factory container that adds matter physics entities to the scene\nconst _PhysicsContainer = WithSignals(FactoryContainer<typeof factoryMethods>(factoryMethods));\n\n/**\n * Configuration for the Container class.\n */\nexport type PhysicsContainerConfig = {\n  autoResize: boolean;\n  autoUpdate: boolean;\n  priority: number;\n};\n\nexport const ContainerConfigKeys: (keyof PhysicsContainerConfig)[] = ['autoResize', 'autoUpdate', 'priority'];\n\nconst defaultConfig: PhysicsContainerConfig = { autoResize: true, autoUpdate: false, priority: 0 };\n\nexport class PhysicsContainer<T extends Application = Application> extends _PhysicsContainer {\n  private __config: PhysicsContainerConfig;\n\n  /**\n   * The constructor for the Container class.\n   * @param config - The configuration for the container.\n   */\n  constructor(config: Partial<PhysicsContainerConfig>) {\n    super();\n    this.__config = { ...defaultConfig, ...config };\n    // Bind all methods of this class to the current instance.\n    bindAllMethods(this);\n    // Add an event listener for the 'added' event.\n    this.on('added', this._added);\n    this.on('removed', this._removed);\n  }\n\n  get app(): T {\n    return Application.getInstance<T>();\n  }\n\n  /**\n   * Update the container. This method is meant to be overridden by subclasses.\n   * @param ticker\n   */\n  public update(ticker?: Ticker | number) {\n    void ticker;\n  }\n\n  /**\n   * Resize the container. This method is meant to be overridden by subclasses.\n   * @param size\n   */\n  public resize(size?: Size) {\n    void size;\n  }\n\n  /**\n   * This method is called when the container is added to the stage. It is meant to be overridden by subclasses.\n   */\n  public added() {}\n\n  destroy(options?: DestroyOptions): void {\n    if (this.__config.autoUpdate) {\n      this.app.ticker.remove(this.update, this);\n    }\n    super.destroy(options);\n  }\n\n  public removed() {}\n\n  /**\n   * This method is called when the container is added to the stage. It sets up auto-resizing and auto-updating if enabled.\n   */\n  private _added() {\n    if (this.__config.autoResize) {\n      this.addSignalConnection(this.app.onResize.connect(this.resize, this.__config.priority));\n    }\n\n    if (this.__config.autoUpdate) {\n      this.app.ticker.add(this.update, this, this.__config.priority);\n    }\n    this.added();\n  }\n\n  private _removed() {\n    if (this.__config.autoResize) {\n      this.app.onResize.disconnect(this.resize);\n    }\n\n    if (this.__config.autoUpdate) {\n      this.app.ticker.remove(this.update, this);\n    }\n\n    this.removed();\n  }\n}\n"],"names":["_System","Application","value","Runner","_a","bounds","options","Engine","thickness","width","height","walls","Bodies","objects","obj","body","World","ticker","Graphics","color","vertices","j","System","defaultOptions","MatterPhysicsPlugin","Plugin","_app","_Entity","Container","config","w","h","_b","Entity","factoryMethods","defaultFactoryMethods","_PhysicsContainer","WithSignals","FactoryContainer","ContainerConfigKeys","defaultConfig","PhysicsContainer","bindAllMethods","size"],"mappings":"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"}