{"version":3,"file":"dill-pixel-storage-adapter-firebase.mjs","sources":["../src/index.ts"],"sourcesContent":["import { StorageAdapter, Logger, IApplication } from 'dill-pixel';\nimport { initializeApp } from 'firebase/app';\nimport type { FirebaseApp, FirebaseOptions } from 'firebase/app';\nimport {\n  getFirestore,\n  doc,\n  setDoc,\n  getDoc,\n  getDocs,\n  deleteDoc,\n  collection,\n  addDoc,\n  query,\n  where,\n} from 'firebase/firestore';\nimport type { Firestore, DocumentData, WhereFilterOp } from 'firebase/firestore';\n\n// TODO: better way to do this?\nexport * from 'firebase/firestore';\n\n/**\n * A class representing a storage adapter that uses Firebase.\n * @extends StorageAdapter\n */\nexport class FirebaseAdapter extends StorageAdapter {\n  private _firebaseApp: FirebaseApp;\n  private _options: FirebaseOptions;\n  private _db: Firestore;\n\n  /**\n   * Initializes the adapter.\n   * @param {IApplication} _app The application that the adapter belongs to.\n   * @param {FirebaseOptions} options The options to initialize the adapter with.\n   * @returns {void}\n   */\n  public initialize(_app: IApplication, options: FirebaseOptions): void {\n    Logger.log('FirebaseAdapter initialized');\n\n    this._options = options;\n    this._firebaseApp = initializeApp(this._options);\n    this._db = getFirestore(this._firebaseApp); // initialize Firestore and get a reference to the database\n  }\n\n  /**\n   * Returns the Firestore database.\n   * @returns {Firestore} The Firestore database.\n   */\n  get db() {\n    return this._db;\n  }\n\n  /**\n   * Save or update a document in a collection.\n   * @param collectionName The name of the collection.\n   * @param data The data to save.\n   * @param id The ID of the document to save or update, if applicable.\n   * @returns The saved or updated document.\n   *\n   * @example\n   * await this.app.firebase.save('users', { username: 'relish', score: 50 }, 'custom-id');\n   */\n  async save(collectionName: string, data: DocumentData, id?: string): Promise<DocumentData> {\n    if (!this.db) {\n      throw new Error('Firestore has not been initialized. Call initialize() first.');\n    }\n\n    let docRef;\n    try {\n      if (id) {\n        docRef = doc(this.db, collectionName, id);\n      } else {\n        docRef = await addDoc(collection(this.db, collectionName), data);\n      }\n\n      // If the document does not exist, it will be created.\n      // If the document does exist, the data will be merged into the existing document.\n      await setDoc(docRef, data, { merge: true });\n\n      // TODO: what to return?\n      const docSnap = await getDoc(docRef);\n      return {\n        id: docSnap.id,\n        ...docSnap.data(),\n      };\n    } catch (error) {\n      throw new Error(`Error saving document: ${error}`);\n    }\n  }\n\n  /**\n   * Get a single document by its ID.\n   * @param collectionName The name of the collection.\n   * @param id The ID of the document to get.\n   * @returns The document, or null if not found.\n   *\n   * @example\n   * await this.app.firebase.getDocumentById('users', 'custom-id');\n   */\n  async getDocumentById(collectionName: string, id: string): Promise<DocumentData | null> {\n    if (!this.db) {\n      throw new Error('Firestore has not been initialized. Call initialize() first.');\n    }\n    const docRef = doc(this.db, collectionName, id);\n\n    try {\n      const docSnap = await getDoc(docRef);\n\n      if (docSnap.exists()) {\n        return {\n          id: docSnap.id,\n          ...docSnap.data(),\n        };\n      } else {\n        return null;\n      }\n    } catch (error) {\n      throw new Error(`Error getting document: ${error}`);\n    }\n  }\n\n  /**\n   * Get a single document by a field value.\n   * @param collectionName The name of the collection.\n   * @param field The field to query.\n   * @param value The value to query.\n   * @returns The document, or null if not found.\n   *\n   * @example\n   * await this.app.firebase.getDocumentByField('users', 'username', 'relish');\n   */\n  async getDocumentByField(collectionName: string, field: string, value: any): Promise<DocumentData | null> {\n    if (!this.db) {\n      throw new Error('Firestore has not been initialized. Call initialize() first.');\n    }\n\n    try {\n      const collectionRef = collection(this.db, collectionName);\n      const q = query(collectionRef, where(field, '==', value));\n      const querySnapshot = await getDocs(q);\n\n      if (!querySnapshot.empty) {\n        const doc = querySnapshot.docs[0];\n        return { id: doc.id, ...doc.data() };\n      } else {\n        return null;\n      }\n    } catch (error) {\n      throw new Error(`Error getting document: ${error}`);\n    }\n  }\n\n  /**\n   * Get all documents in a collection.\n   * @param collectionName The name of the collection.\n   * @returns An array of documents.\n   *\n   * @example\n   * await this.app.firebase.getCollection('users');\n   */\n  async getCollection(collectionName: string): Promise<DocumentData[]> {\n    if (!this.db) {\n      throw new Error('Firestore has not been initialized. Call initialize() first.');\n    }\n\n    try {\n      const collectionRef = collection(this.db, collectionName);\n      const querySnapshot = await getDocs(collectionRef);\n\n      const documents: DocumentData[] = [];\n      querySnapshot.forEach((doc) => {\n        documents.push({ id: doc.id, ...doc.data() });\n      });\n\n      return documents;\n    } catch (error) {\n      throw new Error(`Error getting collection: ${error}`);\n    }\n  }\n\n  /**\n   * Delete a document by its ID.\n   * @param collectionName The name of the collection.\n   * @param id The ID of the document to delete.\n   * @returns The deleted document, or null if not found.\n   *\n   * @example\n   * await this.app.firebase.deleteDocumentById('users', 'custom-id');\n   */\n  async deleteDocumentById(collectionName: string, id: string): Promise<DocumentData | null> {\n    if (!this.db) {\n      throw new Error('Firestore has not been initialized. Call initialize() first.');\n    }\n\n    try {\n      const docRef = doc(this.db, collectionName, id);\n      const docToDelete = await getDoc(docRef);\n\n      if (!docToDelete.exists()) {\n        return null;\n      }\n\n      await deleteDoc(docRef);\n      return {\n        id: docToDelete.id,\n        ...docToDelete.data(),\n      };\n    } catch (error) {\n      throw new Error(`Error deleting document: ${error}`);\n    }\n  }\n\n  /**\n   * Delete a document by a field value.\n   * @param collectionName The name of the collection.\n   * @param field The field to query.\n   * @param value The value to query.\n   * @returns The deleted document, or null if not found.\n   *\n   * @example\n   * await this.app.firebase.deleteDocumentByField('users', 'username', 'relish');\n   */\n  async deleteDocumentByField(collectionName: string, field: string, value: any): Promise<DocumentData | null> {\n    if (!this.db) {\n      throw new Error('Firestore has not been initialized. Call initialize() first.');\n    }\n\n    try {\n      const docToDelete = await this.getDocumentByField(collectionName, field, value);\n\n      if (!docToDelete) return null;\n\n      const docRef = doc(this.db, collectionName, docToDelete.id);\n      await deleteDoc(docRef);\n\n      return docToDelete;\n    } catch (error) {\n      throw new Error(`Error deleting document: ${error}`);\n    }\n  }\n\n  /**\n   * Delete all documents in a collection.\n   * @param collectionName The name of the collection.\n   * @returns void\n   *\n   * @example\n   * await this.app.firebase.deleteCollection('users');\n   */\n  async deleteCollection(collectionName: string): Promise<void> {\n    if (!this.db) {\n      throw new Error('Firestore has not been initialized. Call initialize() first.');\n    }\n\n    try {\n      const collectionRef = collection(this.db, collectionName);\n      const querySnapshot = await getDocs(collectionRef);\n\n      const docsToDelete: Promise<void>[] = [];\n      querySnapshot.forEach((doc) => {\n        docsToDelete.push(deleteDoc(doc.ref));\n      });\n\n      await Promise.all(docsToDelete);\n    } catch (error) {\n      throw new Error(`Error deleting collection: ${error}`);\n    }\n  }\n\n  /**\n   * Query a collection by a field value.\n   * @param collectionName The name of the collection.\n   * @param field The field to query.\n   * @param operator The operator to use for the query.\n   * @param value The value to query.\n   * @returns An array of documents.\n   *\n   * @example\n   * await this.app.firebase.queryCollection('users', 'username', '==', 'relish');\n   */\n  async queryCollection(\n    collectionName: string,\n    field: string,\n    operator: WhereFilterOp,\n    value: any,\n  ): Promise<DocumentData[]> {\n    if (!this.db) {\n      throw new Error('Firestore has not been initialized. Call initialize() first.');\n    }\n\n    try {\n      const collectionRef = collection(this.db, collectionName);\n      const q = query(collectionRef, where(field, operator, value));\n      const querySnapshot = await getDocs(q);\n\n      const documents: DocumentData[] = [];\n      querySnapshot.forEach((doc) => {\n        documents.push({ id: doc.id, ...doc.data() });\n      });\n\n      return documents;\n    } catch (error) {\n      throw new Error(`Error querying collection: ${error}`);\n    }\n  }\n}\n"],"names":["FirebaseAdapter","StorageAdapter","_app","options","Logger","initializeApp","getFirestore","collectionName","data","id","docRef","doc","addDoc","collection","setDoc","docSnap","getDoc","error","field","value","collectionRef","q","query","where","querySnapshot","getDocs","documents","docToDelete","deleteDoc","docsToDelete","operator"],"mappings":";;;;AAwBO,MAAMA,UAAwBC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAW3C,WAAWC,GAAoBC,GAAgC;AACpE,IAAAC,EAAO,IAAI,6BAA6B,GAExC,KAAK,WAAWD,GACX,KAAA,eAAeE,EAAc,KAAK,QAAQ,GAC1C,KAAA,MAAMC,EAAa,KAAK,YAAY;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,KAAK;AACP,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,KAAKC,GAAwBC,GAAoBC,GAAoC;AACrF,QAAA,CAAC,KAAK;AACF,YAAA,IAAI,MAAM,8DAA8D;AAG5E,QAAAC;AACA,QAAA;AACF,MAAID,IACFC,IAASC,EAAI,KAAK,IAAIJ,GAAgBE,CAAE,IAExCC,IAAS,MAAME,EAAOC,EAAW,KAAK,IAAIN,CAAc,GAAGC,CAAI,GAKjE,MAAMM,EAAOJ,GAAQF,GAAM,EAAE,OAAO,IAAM;AAGpC,YAAAO,IAAU,MAAMC,EAAON,CAAM;AAC5B,aAAA;AAAA,QACL,IAAIK,EAAQ;AAAA,QACZ,GAAGA,EAAQ,KAAK;AAAA,MAAA;AAAA,aAEXE,GAAO;AACd,YAAM,IAAI,MAAM,0BAA0BA,CAAK,EAAE;AAAA,IACnD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,gBAAgBV,GAAwBE,GAA0C;AAClF,QAAA,CAAC,KAAK;AACF,YAAA,IAAI,MAAM,8DAA8D;AAEhF,UAAMC,IAASC,EAAI,KAAK,IAAIJ,GAAgBE,CAAE;AAE1C,QAAA;AACI,YAAAM,IAAU,MAAMC,EAAON,CAAM;AAE/B,aAAAK,EAAQ,WACH;AAAA,QACL,IAAIA,EAAQ;AAAA,QACZ,GAAGA,EAAQ,KAAK;AAAA,MAAA,IAGX;AAAA,aAEFE,GAAO;AACd,YAAM,IAAI,MAAM,2BAA2BA,CAAK,EAAE;AAAA,IACpD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,mBAAmBV,GAAwBW,GAAeC,GAA0C;AACpG,QAAA,CAAC,KAAK;AACF,YAAA,IAAI,MAAM,8DAA8D;AAG5E,QAAA;AACF,YAAMC,IAAgBP,EAAW,KAAK,IAAIN,CAAc,GAClDc,IAAIC,EAAMF,GAAeG,EAAML,GAAO,MAAMC,CAAK,CAAC,GAClDK,IAAgB,MAAMC,EAAQJ,CAAC;AAEjC,UAACG,EAAc;AAIV,eAAA;AAJiB;AAClBb,cAAAA,IAAMa,EAAc,KAAK,CAAC;AAChC,eAAO,EAAE,IAAIb,EAAI,IAAI,GAAGA,EAAI;MAAO;AAAA,aAI9BM,GAAO;AACd,YAAM,IAAI,MAAM,2BAA2BA,CAAK,EAAE;AAAA,IACpD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,cAAcV,GAAiD;AAC/D,QAAA,CAAC,KAAK;AACF,YAAA,IAAI,MAAM,8DAA8D;AAG5E,QAAA;AACF,YAAMa,IAAgBP,EAAW,KAAK,IAAIN,CAAc,GAClDiB,IAAgB,MAAMC,EAAQL,CAAa,GAE3CM,IAA4B,CAAA;AACpB,aAAAF,EAAA,QAAQ,CAACb,MAAQ;AACnB,QAAAe,EAAA,KAAK,EAAE,IAAIf,EAAI,IAAI,GAAGA,EAAI,KAAK,EAAA,CAAG;AAAA,MAAA,CAC7C,GAEMe;AAAA,aACAT,GAAO;AACd,YAAM,IAAI,MAAM,6BAA6BA,CAAK,EAAE;AAAA,IACtD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,mBAAmBV,GAAwBE,GAA0C;AACrF,QAAA,CAAC,KAAK;AACF,YAAA,IAAI,MAAM,8DAA8D;AAG5E,QAAA;AACF,YAAMC,IAASC,EAAI,KAAK,IAAIJ,GAAgBE,CAAE,GACxCkB,IAAc,MAAMX,EAAON,CAAM;AAEnC,aAACiB,EAAY,YAIjB,MAAMC,EAAUlB,CAAM,GACf;AAAA,QACL,IAAIiB,EAAY;AAAA,QAChB,GAAGA,EAAY,KAAK;AAAA,MAAA,KANb;AAAA,aAQFV,GAAO;AACd,YAAM,IAAI,MAAM,4BAA4BA,CAAK,EAAE;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,sBAAsBV,GAAwBW,GAAeC,GAA0C;AACvG,QAAA,CAAC,KAAK;AACF,YAAA,IAAI,MAAM,8DAA8D;AAG5E,QAAA;AACF,YAAMQ,IAAc,MAAM,KAAK,mBAAmBpB,GAAgBW,GAAOC,CAAK;AAE9E,UAAI,CAACQ;AAAoB,eAAA;AAEzB,YAAMjB,IAASC,EAAI,KAAK,IAAIJ,GAAgBoB,EAAY,EAAE;AAC1D,mBAAMC,EAAUlB,CAAM,GAEfiB;AAAA,aACAV,GAAO;AACd,YAAM,IAAI,MAAM,4BAA4BA,CAAK,EAAE;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,iBAAiBV,GAAuC;AACxD,QAAA,CAAC,KAAK;AACF,YAAA,IAAI,MAAM,8DAA8D;AAG5E,QAAA;AACF,YAAMa,IAAgBP,EAAW,KAAK,IAAIN,CAAc,GAClDiB,IAAgB,MAAMC,EAAQL,CAAa,GAE3CS,IAAgC,CAAA;AACxB,MAAAL,EAAA,QAAQ,CAACb,MAAQ;AAC7B,QAAAkB,EAAa,KAAKD,EAAUjB,EAAI,GAAG,CAAC;AAAA,MAAA,CACrC,GAEK,MAAA,QAAQ,IAAIkB,CAAY;AAAA,aACvBZ,GAAO;AACd,YAAM,IAAI,MAAM,8BAA8BA,CAAK,EAAE;AAAA,IACvD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,gBACJV,GACAW,GACAY,GACAX,GACyB;AACrB,QAAA,CAAC,KAAK;AACF,YAAA,IAAI,MAAM,8DAA8D;AAG5E,QAAA;AACF,YAAMC,IAAgBP,EAAW,KAAK,IAAIN,CAAc,GAClDc,IAAIC,EAAMF,GAAeG,EAAML,GAAOY,GAAUX,CAAK,CAAC,GACtDK,IAAgB,MAAMC,EAAQJ,CAAC,GAE/BK,IAA4B,CAAA;AACpB,aAAAF,EAAA,QAAQ,CAACb,MAAQ;AACnB,QAAAe,EAAA,KAAK,EAAE,IAAIf,EAAI,IAAI,GAAGA,EAAI,KAAK,EAAA,CAAG;AAAA,MAAA,CAC7C,GAEMe;AAAA,aACAT,GAAO;AACd,YAAM,IAAI,MAAM,8BAA8BA,CAAK,EAAE;AAAA,IACvD;AAAA,EACF;AACF;"}