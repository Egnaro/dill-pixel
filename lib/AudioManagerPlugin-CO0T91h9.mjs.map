{"version":3,"file":"AudioManagerPlugin-CO0T91h9.mjs","sources":["../node_modules/@pixi/sound/lib/instance.mjs","../node_modules/@pixi/sound/lib/webaudio/WebAudioUtils.mjs","../node_modules/@pixi/sound/lib/htmlaudio/HTMLAudioContext.mjs","../node_modules/@pixi/sound/lib/htmlaudio/HTMLAudioInstance.mjs","../node_modules/@pixi/sound/lib/htmlaudio/HTMLAudioMedia.mjs","../node_modules/@pixi/sound/lib/SoundSprite.mjs","../node_modules/@pixi/sound/lib/utils/supported.mjs","../node_modules/@pixi/sound/lib/webaudio/WebAudioInstance.mjs","../node_modules/@pixi/sound/lib/Filterable.mjs","../node_modules/@pixi/sound/lib/webaudio/WebAudioNodes.mjs","../node_modules/@pixi/sound/lib/webaudio/WebAudioMedia.mjs","../node_modules/@pixi/sound/lib/Sound.mjs","../node_modules/@pixi/sound/lib/webaudio/WebAudioContext.mjs","../node_modules/@pixi/sound/lib/SoundLibrary.mjs","../node_modules/@pixi/sound/lib/soundAsset.mjs","../node_modules/@pixi/sound/lib/index.mjs","../src/plugins/audio/AudioChannel.ts","../src/plugins/audio/AudioInstance.ts","../src/plugins/audio/AudioManagerPlugin.ts"],"sourcesContent":["let instance;\nfunction setInstance(sound) {\n  instance = sound;\n  return sound;\n}\nfunction getInstance() {\n  return instance;\n}\n\nexport { getInstance, instance, setInstance };\n//# sourceMappingURL=instance.mjs.map\n","import { getInstance } from '../instance.mjs';\n\nclass WebAudioUtils {\n  /**\n   * Dezippering is removed in the future Web Audio API, instead\n   * we use the `setValueAtTime` method, however, this is not available\n   * in all environments (e.g., Android webview), so we fallback to the `value` setter.\n   * @param param - AudioNode parameter object\n   * @param value - Value to set\n   * @return The value set\n   */\n  static setParamValue(param, value) {\n    if (param.setValueAtTime) {\n      const context = getInstance().context;\n      param.setValueAtTime(value, context.audioContext.currentTime);\n    } else {\n      param.value = value;\n    }\n    return value;\n  }\n}\n\nexport { WebAudioUtils };\n//# sourceMappingURL=WebAudioUtils.mjs.map\n","import { EventEmitter } from 'pixi.js';\n\nclass HTMLAudioContext extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    /** Current global speed from 0 to 1 */\n    this.speed = 1;\n    /** Current muted status of the context */\n    this.muted = false;\n    /** Current volume from 0 to 1  */\n    this.volume = 1;\n    /** Current paused status */\n    this.paused = false;\n  }\n  /** Internal trigger when volume, mute or speed changes */\n  refresh() {\n    this.emit(\"refresh\");\n  }\n  /** Internal trigger paused changes */\n  refreshPaused() {\n    this.emit(\"refreshPaused\");\n  }\n  /**\n   * HTML Audio does not support filters, this is non-functional API.\n   */\n  get filters() {\n    console.warn(\"HTML Audio does not support filters\");\n    return null;\n  }\n  set filters(_filters) {\n    console.warn(\"HTML Audio does not support filters\");\n  }\n  /**\n   * HTML Audio does not support `audioContext`\n   * @readonly\n   * @type {AudioContext}\n   */\n  get audioContext() {\n    console.warn(\"HTML Audio does not support audioContext\");\n    return null;\n  }\n  /**\n   * Toggles the muted state.\n   * @return The current muted state.\n   */\n  toggleMute() {\n    this.muted = !this.muted;\n    this.refresh();\n    return this.muted;\n  }\n  /**\n   * Toggles the paused state.\n   * @return The current paused state.\n   */\n  togglePause() {\n    this.paused = !this.paused;\n    this.refreshPaused();\n    return this.paused;\n  }\n  /** Destroy and don't use after this */\n  destroy() {\n    this.removeAllListeners();\n  }\n}\n\nexport { HTMLAudioContext };\n//# sourceMappingURL=HTMLAudioContext.mjs.map\n","import { EventEmitter, Ticker } from 'pixi.js';\n\nlet id = 0;\nconst _HTMLAudioInstance = class extends EventEmitter {\n  /** @param parent - Parent element */\n  constructor(parent) {\n    super();\n    this.id = id++;\n    this.init(parent);\n  }\n  /**\n   * Set a property by name, this makes it easy to chain values\n   * @param name - Name of the property to set\n   * @param value - Value to set property to\n   */\n  set(name, value) {\n    if (this[name] === void 0) {\n      throw new Error(`Property with name ${name} does not exist.`);\n    } else {\n      switch (name) {\n        case \"speed\":\n          this.speed = value;\n          break;\n        case \"volume\":\n          this.volume = value;\n          break;\n        case \"paused\":\n          this.paused = value;\n          break;\n        case \"loop\":\n          this.loop = value;\n          break;\n        case \"muted\":\n          this.muted = value;\n          break;\n      }\n    }\n    return this;\n  }\n  /** The current playback progress from 0 to 1. */\n  get progress() {\n    const { currentTime } = this._source;\n    return currentTime / this._duration;\n  }\n  /** Pauses the sound. */\n  get paused() {\n    return this._paused;\n  }\n  set paused(paused) {\n    this._paused = paused;\n    this.refreshPaused();\n  }\n  /**\n   * Reference: http://stackoverflow.com/a/40370077\n   * @private\n   */\n  _onPlay() {\n    this._playing = true;\n  }\n  /**\n   * Reference: http://stackoverflow.com/a/40370077\n   * @private\n   */\n  _onPause() {\n    this._playing = false;\n  }\n  /**\n   * Initialize the instance.\n   * @param {htmlaudio.HTMLAudioMedia} media - Same as constructor\n   */\n  init(media) {\n    this._playing = false;\n    this._duration = media.source.duration;\n    const source = this._source = media.source.cloneNode(false);\n    source.src = media.parent.url;\n    source.onplay = this._onPlay.bind(this);\n    source.onpause = this._onPause.bind(this);\n    media.context.on(\"refresh\", this.refresh, this);\n    media.context.on(\"refreshPaused\", this.refreshPaused, this);\n    this._media = media;\n  }\n  /**\n   * Stop the sound playing\n   * @private\n   */\n  _internalStop() {\n    if (this._source && this._playing) {\n      this._source.onended = null;\n      this._source.pause();\n    }\n  }\n  /** Stop the sound playing */\n  stop() {\n    this._internalStop();\n    if (this._source) {\n      this.emit(\"stop\");\n    }\n  }\n  /** Set the instance speed from 0 to 1 */\n  get speed() {\n    return this._speed;\n  }\n  set speed(speed) {\n    this._speed = speed;\n    this.refresh();\n  }\n  /** Get the set the volume for this instance from 0 to 1 */\n  get volume() {\n    return this._volume;\n  }\n  set volume(volume) {\n    this._volume = volume;\n    this.refresh();\n  }\n  /** If the sound instance should loop playback */\n  get loop() {\n    return this._loop;\n  }\n  set loop(loop) {\n    this._loop = loop;\n    this.refresh();\n  }\n  /** `true` if the sound is muted */\n  get muted() {\n    return this._muted;\n  }\n  set muted(muted) {\n    this._muted = muted;\n    this.refresh();\n  }\n  /**\n   * HTML Audio does not support filters, this is non-functional API.\n   */\n  get filters() {\n    console.warn(\"HTML Audio does not support filters\");\n    return null;\n  }\n  set filters(_filters) {\n    console.warn(\"HTML Audio does not support filters\");\n  }\n  /** Call whenever the loop, speed or volume changes */\n  refresh() {\n    const global = this._media.context;\n    const sound = this._media.parent;\n    this._source.loop = this._loop || sound.loop;\n    const globalVolume = global.volume * (global.muted ? 0 : 1);\n    const soundVolume = sound.volume * (sound.muted ? 0 : 1);\n    const instanceVolume = this._volume * (this._muted ? 0 : 1);\n    this._source.volume = instanceVolume * globalVolume * soundVolume;\n    this._source.playbackRate = this._speed * global.speed * sound.speed;\n  }\n  /** Handle changes in paused state, either globally or sound or instance */\n  refreshPaused() {\n    const global = this._media.context;\n    const sound = this._media.parent;\n    const pausedReal = this._paused || sound.paused || global.paused;\n    if (pausedReal !== this._pausedReal) {\n      this._pausedReal = pausedReal;\n      if (pausedReal) {\n        this._internalStop();\n        this.emit(\"paused\");\n      } else {\n        this.emit(\"resumed\");\n        this.play({\n          start: this._source.currentTime,\n          end: this._end,\n          volume: this._volume,\n          speed: this._speed,\n          loop: this._loop\n        });\n      }\n      this.emit(\"pause\", pausedReal);\n    }\n  }\n  /** Start playing the sound/ */\n  play(options) {\n    const { start, end, speed, loop, volume, muted } = options;\n    if (end) {\n      console.assert(end > start, \"End time is before start time\");\n    }\n    this._speed = speed;\n    this._volume = volume;\n    this._loop = !!loop;\n    this._muted = muted;\n    this.refresh();\n    if (this.loop && end !== null) {\n      console.warn('Looping not support when specifying an \"end\" time');\n      this.loop = false;\n    }\n    this._start = start;\n    this._end = end || this._duration;\n    this._start = Math.max(0, this._start - _HTMLAudioInstance.PADDING);\n    this._end = Math.min(this._end + _HTMLAudioInstance.PADDING, this._duration);\n    this._source.onloadedmetadata = () => {\n      if (this._source) {\n        this._source.currentTime = start;\n        this._source.onloadedmetadata = null;\n        this.emit(\"progress\", start, this._duration);\n        Ticker.shared.add(this._onUpdate, this);\n      }\n    };\n    this._source.onended = this._onComplete.bind(this);\n    this._source.play();\n    this.emit(\"start\");\n  }\n  /**\n   * Handle time update on sound.\n   * @private\n   */\n  _onUpdate() {\n    this.emit(\"progress\", this.progress, this._duration);\n    if (this._source.currentTime >= this._end && !this._source.loop) {\n      this._onComplete();\n    }\n  }\n  /**\n   * Callback when completed.\n   * @private\n   */\n  _onComplete() {\n    Ticker.shared.remove(this._onUpdate, this);\n    this._internalStop();\n    this.emit(\"progress\", 1, this._duration);\n    this.emit(\"end\", this);\n  }\n  /** Don't use after this. */\n  destroy() {\n    Ticker.shared.remove(this._onUpdate, this);\n    this.removeAllListeners();\n    const source = this._source;\n    if (source) {\n      source.onended = null;\n      source.onplay = null;\n      source.onpause = null;\n      this._internalStop();\n    }\n    this._source = null;\n    this._speed = 1;\n    this._volume = 1;\n    this._loop = false;\n    this._end = null;\n    this._start = 0;\n    this._duration = 0;\n    this._playing = false;\n    this._pausedReal = false;\n    this._paused = false;\n    this._muted = false;\n    if (this._media) {\n      this._media.context.off(\"refresh\", this.refresh, this);\n      this._media.context.off(\"refreshPaused\", this.refreshPaused, this);\n      this._media = null;\n    }\n  }\n  /**\n   * To string method for instance.\n   * @return The string representation of instance.\n   */\n  toString() {\n    return `[HTMLAudioInstance id=${this.id}]`;\n  }\n};\nlet HTMLAudioInstance = _HTMLAudioInstance;\n/** Extra padding, in seconds, to deal with low-latecy of HTMLAudio. */\nHTMLAudioInstance.PADDING = 0.1;\n\nexport { HTMLAudioInstance };\n//# sourceMappingURL=HTMLAudioInstance.mjs.map\n","import { EventEmitter } from 'pixi.js';\nimport { HTMLAudioInstance } from './HTMLAudioInstance.mjs';\n\nclass HTMLAudioMedia extends EventEmitter {\n  init(parent) {\n    this.parent = parent;\n    this._source = parent.options.source || new Audio();\n    if (parent.url) {\n      this._source.src = parent.url;\n    }\n  }\n  // Implement create\n  create() {\n    return new HTMLAudioInstance(this);\n  }\n  /**\n   * If the audio media is playable (ready).\n   * @readonly\n   */\n  get isPlayable() {\n    return !!this._source && this._source.readyState === 4;\n  }\n  /**\n   * THe duration of the media in seconds.\n   * @readonly\n   */\n  get duration() {\n    return this._source.duration;\n  }\n  /**\n   * Reference to the context.\n   * @readonly\n   */\n  get context() {\n    return this.parent.context;\n  }\n  /** The collection of filters, does not apply to HTML Audio. */\n  get filters() {\n    return null;\n  }\n  set filters(_filters) {\n    console.warn(\"HTML Audio does not support filters\");\n  }\n  // Override the destroy\n  destroy() {\n    this.removeAllListeners();\n    this.parent = null;\n    if (this._source) {\n      this._source.src = \"\";\n      this._source.load();\n      this._source = null;\n    }\n  }\n  /**\n   * Get the audio source element.\n   * @type {HTMLAudioElement}\n   * @readonly\n   */\n  get source() {\n    return this._source;\n  }\n  // Implement the method to being preloading\n  load(callback) {\n    const source = this._source;\n    const sound = this.parent;\n    if (source.readyState === 4) {\n      sound.isLoaded = true;\n      const instance = sound.autoPlayStart();\n      if (callback) {\n        setTimeout(() => {\n          callback(null, sound, instance);\n        }, 0);\n      }\n      return;\n    }\n    if (!sound.url) {\n      callback(new Error(\"sound.url or sound.source must be set\"));\n      return;\n    }\n    source.src = sound.url;\n    const onLoad = () => {\n      removeListeners();\n      sound.isLoaded = true;\n      const instance = sound.autoPlayStart();\n      if (callback) {\n        callback(null, sound, instance);\n      }\n    };\n    const onAbort = () => {\n      removeListeners();\n      if (callback) {\n        callback(new Error(\"Sound loading has been aborted\"));\n      }\n    };\n    const onError = () => {\n      removeListeners();\n      const message = `Failed to load audio element (code: ${source.error.code})`;\n      if (callback) {\n        callback(new Error(message));\n      } else {\n        console.error(message);\n      }\n    };\n    const removeListeners = () => {\n      source.removeEventListener(\"canplaythrough\", onLoad);\n      source.removeEventListener(\"load\", onLoad);\n      source.removeEventListener(\"abort\", onAbort);\n      source.removeEventListener(\"error\", onError);\n    };\n    source.addEventListener(\"canplaythrough\", onLoad, false);\n    source.addEventListener(\"load\", onLoad, false);\n    source.addEventListener(\"abort\", onAbort, false);\n    source.addEventListener(\"error\", onError, false);\n    source.load();\n  }\n}\n\nexport { HTMLAudioMedia };\n//# sourceMappingURL=HTMLAudioMedia.mjs.map\n","class SoundSprite {\n  /**\n   * @param parent - The parent sound\n   * @param options - Data associated with object.\n   */\n  constructor(parent, options) {\n    this.parent = parent;\n    Object.assign(this, options);\n    this.duration = this.end - this.start;\n    console.assert(this.duration > 0, \"End time must be after start time\");\n  }\n  /**\n   * Play the sound sprite.\n   * @param {Function} [complete] - Function call when complete\n   * @return Sound instance being played.\n   */\n  play(complete) {\n    return this.parent.play({\n      complete,\n      speed: this.speed || this.parent.speed,\n      end: this.end,\n      start: this.start,\n      loop: this.loop\n    });\n  }\n  /** Destroy and don't use after this */\n  destroy() {\n    this.parent = null;\n  }\n}\n\nexport { SoundSprite };\n//# sourceMappingURL=SoundSprite.mjs.map\n","const extensions = [\n  \"ogg\",\n  \"oga\",\n  \"opus\",\n  \"m4a\",\n  \"mp3\",\n  \"mpeg\",\n  \"wav\",\n  \"aiff\",\n  \"wma\",\n  \"mid\",\n  \"caf\"\n];\nconst mimes = [\n  \"audio/mpeg\",\n  \"audio/ogg\"\n];\nconst supported = {};\nfunction validateFormats(typeOverrides) {\n  const overrides = {\n    m4a: \"audio/mp4\",\n    oga: \"audio/ogg\",\n    opus: 'audio/ogg; codecs=\"opus\"',\n    caf: 'audio/x-caf; codecs=\"opus\"',\n    ...typeOverrides || {}\n  };\n  const audio = document.createElement(\"audio\");\n  const formats = {};\n  const no = /^no$/;\n  extensions.forEach((ext) => {\n    const canByExt = audio.canPlayType(`audio/${ext}`).replace(no, \"\");\n    const canByType = overrides[ext] ? audio.canPlayType(overrides[ext]).replace(no, \"\") : \"\";\n    formats[ext] = !!canByExt || !!canByType;\n  });\n  Object.assign(supported, formats);\n}\nvalidateFormats();\n\nexport { extensions, mimes, supported, validateFormats };\n//# sourceMappingURL=supported.mjs.map\n","import { EventEmitter, Ticker } from 'pixi.js';\nimport { WebAudioUtils } from './WebAudioUtils.mjs';\n\nlet id = 0;\nclass WebAudioInstance extends EventEmitter {\n  constructor(media) {\n    super();\n    this.id = id++;\n    this._media = null;\n    this._paused = false;\n    this._muted = false;\n    this._elapsed = 0;\n    this.init(media);\n  }\n  /**\n   * Set a property by name, this makes it easy to chain values\n   * @param name - Name of the property to set.\n   * @param value - Value to set property to.\n   */\n  set(name, value) {\n    if (this[name] === void 0) {\n      throw new Error(`Property with name ${name} does not exist.`);\n    } else {\n      switch (name) {\n        case \"speed\":\n          this.speed = value;\n          break;\n        case \"volume\":\n          this.volume = value;\n          break;\n        case \"muted\":\n          this.muted = value;\n          break;\n        case \"loop\":\n          this.loop = value;\n          break;\n        case \"paused\":\n          this.paused = value;\n          break;\n      }\n    }\n    return this;\n  }\n  /** Stops the instance, don't use after this. */\n  stop() {\n    if (this._source) {\n      this._internalStop();\n      this.emit(\"stop\");\n    }\n  }\n  /** Set the instance speed from 0 to 1 */\n  get speed() {\n    return this._speed;\n  }\n  set speed(speed) {\n    this._speed = speed;\n    this.refresh();\n    this._update(true);\n  }\n  /** Get the set the volume for this instance from 0 to 1 */\n  get volume() {\n    return this._volume;\n  }\n  set volume(volume) {\n    this._volume = volume;\n    this.refresh();\n  }\n  /** `true` if the sound is muted */\n  get muted() {\n    return this._muted;\n  }\n  set muted(muted) {\n    this._muted = muted;\n    this.refresh();\n  }\n  /** If the sound instance should loop playback */\n  get loop() {\n    return this._loop;\n  }\n  set loop(loop) {\n    this._loop = loop;\n    this.refresh();\n  }\n  /** The collection of filters. */\n  get filters() {\n    return this._filters;\n  }\n  set filters(filters) {\n    if (this._filters) {\n      this._filters?.filter((filter) => filter).forEach((filter) => filter.disconnect());\n      this._filters = null;\n      this._source.connect(this._gain);\n    }\n    this._filters = filters?.length ? filters.slice(0) : null;\n    this.refresh();\n  }\n  /** Refresh loop, volume and speed based on changes to parent */\n  refresh() {\n    if (!this._source) {\n      return;\n    }\n    const global = this._media.context;\n    const sound = this._media.parent;\n    this._source.loop = this._loop || sound.loop;\n    const globalVolume = global.volume * (global.muted ? 0 : 1);\n    const soundVolume = sound.volume * (sound.muted ? 0 : 1);\n    const instanceVolume = this._volume * (this._muted ? 0 : 1);\n    WebAudioUtils.setParamValue(this._gain.gain, instanceVolume * soundVolume * globalVolume);\n    WebAudioUtils.setParamValue(this._source.playbackRate, this._speed * sound.speed * global.speed);\n    this.applyFilters();\n  }\n  /** Connect filters nodes to audio context */\n  applyFilters() {\n    if (this._filters?.length) {\n      this._source.disconnect();\n      let source = this._source;\n      this._filters.forEach((filter) => {\n        source.connect(filter.destination);\n        source = filter;\n      });\n      source.connect(this._gain);\n    }\n  }\n  /** Handle changes in paused state, either globally or sound or instance */\n  refreshPaused() {\n    const global = this._media.context;\n    const sound = this._media.parent;\n    const pausedReal = this._paused || sound.paused || global.paused;\n    if (pausedReal !== this._pausedReal) {\n      this._pausedReal = pausedReal;\n      if (pausedReal) {\n        this._internalStop();\n        this.emit(\"paused\");\n      } else {\n        this.emit(\"resumed\");\n        this.play({\n          start: this._elapsed % this._duration,\n          end: this._end,\n          speed: this._speed,\n          loop: this._loop,\n          volume: this._volume\n        });\n      }\n      this.emit(\"pause\", pausedReal);\n    }\n  }\n  /**\n   * Plays the sound.\n   * @param options - Play options.\n   */\n  play(options) {\n    const { start, end, speed, loop, volume, muted, filters } = options;\n    if (end) {\n      console.assert(end > start, \"End time is before start time\");\n    }\n    this._paused = false;\n    const { source, gain } = this._media.nodes.cloneBufferSource();\n    this._source = source;\n    this._gain = gain;\n    this._speed = speed;\n    this._volume = volume;\n    this._loop = !!loop;\n    this._muted = muted;\n    this._filters = filters;\n    this.refresh();\n    const duration = this._source.buffer.duration;\n    this._duration = duration;\n    this._end = end;\n    this._lastUpdate = this._now();\n    this._elapsed = start;\n    this._source.onended = this._onComplete.bind(this);\n    if (this._loop) {\n      this._source.loopEnd = end;\n      this._source.loopStart = start;\n      this._source.start(0, start);\n    } else if (end) {\n      this._source.start(0, start, end - start);\n    } else {\n      this._source.start(0, start);\n    }\n    this.emit(\"start\");\n    this._update(true);\n    this.enableTicker(true);\n  }\n  /** Start the update progress. */\n  enableTicker(enabled) {\n    Ticker.shared.remove(this._updateListener, this);\n    if (enabled) {\n      Ticker.shared.add(this._updateListener, this);\n    }\n  }\n  /** The current playback progress from 0 to 1. */\n  get progress() {\n    return this._progress;\n  }\n  /** Pauses the sound. */\n  get paused() {\n    return this._paused;\n  }\n  set paused(paused) {\n    this._paused = paused;\n    this.refreshPaused();\n  }\n  /** Don't use after this. */\n  destroy() {\n    this.removeAllListeners();\n    this._internalStop();\n    if (this._gain) {\n      this._gain.disconnect();\n      this._gain = null;\n    }\n    if (this._media) {\n      this._media.context.events.off(\"refresh\", this.refresh, this);\n      this._media.context.events.off(\"refreshPaused\", this.refreshPaused, this);\n      this._media = null;\n    }\n    this._filters?.forEach((filter) => filter.disconnect());\n    this._filters = null;\n    this._end = null;\n    this._speed = 1;\n    this._volume = 1;\n    this._loop = false;\n    this._elapsed = 0;\n    this._duration = 0;\n    this._paused = false;\n    this._muted = false;\n    this._pausedReal = false;\n  }\n  /**\n   * To string method for instance.\n   * @return The string representation of instance.\n   */\n  toString() {\n    return `[WebAudioInstance id=${this.id}]`;\n  }\n  /**\n   * Get the current time in seconds.\n   * @return Seconds since start of context\n   */\n  _now() {\n    return this._media.context.audioContext.currentTime;\n  }\n  /** Callback for update listener */\n  _updateListener() {\n    this._update();\n  }\n  /** Internal update the progress. */\n  _update(force = false) {\n    if (this._source) {\n      const now = this._now();\n      const delta = now - this._lastUpdate;\n      if (delta > 0 || force) {\n        const speed = this._source.playbackRate.value;\n        this._elapsed += delta * speed;\n        this._lastUpdate = now;\n        const duration = this._duration;\n        let progress;\n        if (this._source.loopStart) {\n          const soundLength = this._source.loopEnd - this._source.loopStart;\n          progress = (this._source.loopStart + this._elapsed % soundLength) / duration;\n        } else {\n          progress = this._elapsed % duration / duration;\n        }\n        this._progress = progress;\n        this.emit(\"progress\", this._progress, duration);\n      }\n    }\n  }\n  /** Initializes the instance. */\n  init(media) {\n    this._media = media;\n    media.context.events.on(\"refresh\", this.refresh, this);\n    media.context.events.on(\"refreshPaused\", this.refreshPaused, this);\n  }\n  /** Stops the instance. */\n  _internalStop() {\n    if (this._source) {\n      this.enableTicker(false);\n      this._source.onended = null;\n      this._source.stop(0);\n      this._source.disconnect();\n      try {\n        this._source.buffer = null;\n      } catch (err) {\n        console.warn(\"Failed to set AudioBufferSourceNode.buffer to null:\", err);\n      }\n      this._source = null;\n    }\n  }\n  /** Callback when completed. */\n  _onComplete() {\n    if (this._source) {\n      this.enableTicker(false);\n      this._source.onended = null;\n      this._source.disconnect();\n      try {\n        this._source.buffer = null;\n      } catch (err) {\n        console.warn(\"Failed to set AudioBufferSourceNode.buffer to null:\", err);\n      }\n    }\n    this._source = null;\n    this._progress = 1;\n    this.emit(\"progress\", 1, this._duration);\n    this.emit(\"end\", this);\n  }\n}\n\nexport { WebAudioInstance };\n//# sourceMappingURL=WebAudioInstance.mjs.map\n","class Filterable {\n  /**\n   * @param input - The source audio node\n   * @param output - The output audio node\n   */\n  constructor(input, output) {\n    this._output = output;\n    this._input = input;\n  }\n  /** The destination output audio node */\n  get destination() {\n    return this._input;\n  }\n  /** The collection of filters. */\n  get filters() {\n    return this._filters;\n  }\n  set filters(filters) {\n    if (this._filters) {\n      this._filters.forEach((filter) => {\n        if (filter) {\n          filter.disconnect();\n        }\n      });\n      this._filters = null;\n      this._input.connect(this._output);\n    }\n    if (filters && filters.length) {\n      this._filters = filters.slice(0);\n      this._input.disconnect();\n      let prevFilter = null;\n      filters.forEach((filter) => {\n        if (prevFilter === null) {\n          this._input.connect(filter.destination);\n        } else {\n          prevFilter.connect(filter.destination);\n        }\n        prevFilter = filter;\n      });\n      prevFilter.connect(this._output);\n    }\n  }\n  /** Cleans up. */\n  destroy() {\n    this.filters = null;\n    this._input = null;\n    this._output = null;\n  }\n}\n\nexport { Filterable };\n//# sourceMappingURL=Filterable.mjs.map\n","import { Filterable } from '../Filterable.mjs';\nimport { WebAudioUtils } from './WebAudioUtils.mjs';\n\nconst _WebAudioNodes = class extends Filterable {\n  /**\n   * @param context - The audio context.\n   */\n  constructor(context) {\n    const audioContext = context.audioContext;\n    const bufferSource = audioContext.createBufferSource();\n    const gain = audioContext.createGain();\n    const analyser = audioContext.createAnalyser();\n    bufferSource.connect(analyser);\n    analyser.connect(gain);\n    gain.connect(context.destination);\n    super(analyser, gain);\n    this.context = context;\n    this.bufferSource = bufferSource;\n    this.gain = gain;\n    this.analyser = analyser;\n  }\n  /**\n   * Get the script processor node.\n   * @readonly\n   */\n  get script() {\n    if (!this._script) {\n      this._script = this.context.audioContext.createScriptProcessor(_WebAudioNodes.BUFFER_SIZE);\n      this._script.connect(this.context.destination);\n    }\n    return this._script;\n  }\n  /** Cleans up. */\n  destroy() {\n    super.destroy();\n    this.bufferSource.disconnect();\n    if (this._script) {\n      this._script.disconnect();\n    }\n    this.gain.disconnect();\n    this.analyser.disconnect();\n    this.bufferSource = null;\n    this._script = null;\n    this.gain = null;\n    this.analyser = null;\n    this.context = null;\n  }\n  /**\n   * Clones the bufferSource. Used just before playing a sound.\n   * @returns {SourceClone} The clone AudioBufferSourceNode.\n   */\n  cloneBufferSource() {\n    const orig = this.bufferSource;\n    const source = this.context.audioContext.createBufferSource();\n    source.buffer = orig.buffer;\n    WebAudioUtils.setParamValue(source.playbackRate, orig.playbackRate.value);\n    source.loop = orig.loop;\n    const gain = this.context.audioContext.createGain();\n    source.connect(gain);\n    gain.connect(this.destination);\n    return { source, gain };\n  }\n  /**\n   * Get buffer size of `ScriptProcessorNode`.\n   * @readonly\n   */\n  get bufferSize() {\n    return this.script.bufferSize;\n  }\n};\nlet WebAudioNodes = _WebAudioNodes;\n/**\n * The buffer size for script processor, default is `0` which auto-detects. If you plan to use\n * script node on iOS, you'll need to provide a non-zero amount.\n * @default 0\n */\nWebAudioNodes.BUFFER_SIZE = 0;\n\nexport { WebAudioNodes };\n//# sourceMappingURL=WebAudioNodes.mjs.map\n","import { DOMAdapter } from 'pixi.js';\nimport { WebAudioInstance } from './WebAudioInstance.mjs';\nimport { WebAudioNodes } from './WebAudioNodes.mjs';\n\nclass WebAudioMedia {\n  /**\n   * Re-initialize without constructing.\n   * @param parent - - Instance of parent Sound container\n   */\n  init(parent) {\n    this.parent = parent;\n    this._nodes = new WebAudioNodes(this.context);\n    this._source = this._nodes.bufferSource;\n    this.source = parent.options.source;\n  }\n  /** Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound. */\n  destroy() {\n    this.parent = null;\n    this._nodes.destroy();\n    this._nodes = null;\n    try {\n      this._source.buffer = null;\n    } catch (err) {\n      console.warn(\"Failed to set AudioBufferSourceNode.buffer to null:\", err);\n    }\n    this._source = null;\n    this.source = null;\n  }\n  // Implement create\n  create() {\n    return new WebAudioInstance(this);\n  }\n  // Implement context\n  get context() {\n    return this.parent.context;\n  }\n  // Implement isPlayable\n  get isPlayable() {\n    return !!this._source && !!this._source.buffer;\n  }\n  // Implement filters\n  get filters() {\n    return this._nodes.filters;\n  }\n  set filters(filters) {\n    this._nodes.filters = filters;\n  }\n  // Implements duration\n  get duration() {\n    console.assert(this.isPlayable, \"Sound not yet playable, no duration\");\n    return this._source.buffer.duration;\n  }\n  /** Gets and sets the buffer. */\n  get buffer() {\n    return this._source.buffer;\n  }\n  set buffer(buffer) {\n    this._source.buffer = buffer;\n  }\n  /** Get the current chained nodes object */\n  get nodes() {\n    return this._nodes;\n  }\n  // Implements load\n  load(callback) {\n    if (this.source) {\n      this._decode(this.source, callback);\n    } else if (this.parent.url) {\n      this._loadUrl(callback);\n    } else if (callback) {\n      callback(new Error(\"sound.url or sound.source must be set\"));\n    } else {\n      console.error(\"sound.url or sound.source must be set\");\n    }\n  }\n  /** Loads a sound using XHMLHttpRequest object. */\n  async _loadUrl(callback) {\n    const url = this.parent.url;\n    const response = await DOMAdapter.get().fetch(url);\n    this._decode(await response.arrayBuffer(), callback);\n  }\n  /**\n   * Decodes the array buffer.\n   * @param arrayBuffer - From load.\n   * @param {Function} callback - Callback optional\n   */\n  _decode(arrayBuffer, callback) {\n    const audioBufferReadyFn = (err, buffer) => {\n      if (err) {\n        if (callback) {\n          callback(err);\n        }\n      } else {\n        this.parent.isLoaded = true;\n        this.buffer = buffer;\n        const instance = this.parent.autoPlayStart();\n        if (callback) {\n          callback(null, this.parent, instance);\n        }\n      }\n    };\n    if (arrayBuffer instanceof AudioBuffer) {\n      audioBufferReadyFn(null, arrayBuffer);\n    } else {\n      const context = this.parent.context;\n      context.decode(arrayBuffer, audioBufferReadyFn);\n    }\n  }\n}\n\nexport { WebAudioMedia };\n//# sourceMappingURL=WebAudioMedia.mjs.map\n","import { path } from 'pixi.js';\nimport { HTMLAudioMedia } from './htmlaudio/HTMLAudioMedia.mjs';\nimport { getInstance } from './instance.mjs';\nimport { SoundSprite } from './SoundSprite.mjs';\nimport { supported, extensions } from './utils/supported.mjs';\nimport { WebAudioMedia } from './webaudio/WebAudioMedia.mjs';\n\nconst _Sound = class {\n  /**\n   * Create a new sound instance from source.\n   * @param source - Either the path or url to the source file.\n   *        or the object of options to use.\n   * @return Created sound instance.\n   */\n  static from(source) {\n    let options = {};\n    if (typeof source === \"string\") {\n      options.url = source;\n    } else if (source instanceof ArrayBuffer || source instanceof AudioBuffer || source instanceof HTMLAudioElement) {\n      options.source = source;\n    } else if (Array.isArray(source)) {\n      options.url = source;\n    } else {\n      options = source;\n    }\n    options = {\n      autoPlay: false,\n      singleInstance: false,\n      url: null,\n      source: null,\n      preload: false,\n      volume: 1,\n      speed: 1,\n      complete: null,\n      loaded: null,\n      loop: false,\n      ...options\n    };\n    Object.freeze(options);\n    const media = getInstance().useLegacy ? new HTMLAudioMedia() : new WebAudioMedia();\n    return new _Sound(media, options);\n  }\n  /**\n   * Use `Sound.from`\n   * @ignore\n   */\n  constructor(media, options) {\n    this.media = media;\n    this.options = options;\n    this._instances = [];\n    this._sprites = {};\n    this.media.init(this);\n    const complete = options.complete;\n    this._autoPlayOptions = complete ? { complete } : null;\n    this.isLoaded = false;\n    this._preloadQueue = null;\n    this.isPlaying = false;\n    this.autoPlay = options.autoPlay;\n    this.singleInstance = options.singleInstance;\n    this.preload = options.preload || this.autoPlay;\n    this.url = Array.isArray(options.url) ? this.preferUrl(options.url) : options.url;\n    this.speed = options.speed;\n    this.volume = options.volume;\n    this.loop = options.loop;\n    if (options.sprites) {\n      this.addSprites(options.sprites);\n    }\n    if (this.preload) {\n      this._preload(options.loaded);\n    }\n  }\n  /**\n   * Internal help for resolving which file to use if there are multiple provide\n   * this is especially helpful for working with bundlers (non Assets loading).\n   */\n  preferUrl(urls) {\n    const [file] = urls.map((url) => ({ url, ext: path.extname(url).slice(1) })).filter(({ ext }) => supported[ext]).sort((a, b) => extensions.indexOf(a.ext) - extensions.indexOf(b.ext));\n    if (!file) {\n      throw new Error(\"No supported file type found\");\n    }\n    return file.url;\n  }\n  /** Instance of the media context. */\n  get context() {\n    return getInstance().context;\n  }\n  /** Stops all the instances of this sound from playing. */\n  pause() {\n    this.isPlaying = false;\n    this.paused = true;\n    return this;\n  }\n  /** Resuming all the instances of this sound from playing */\n  resume() {\n    this.isPlaying = this._instances.length > 0;\n    this.paused = false;\n    return this;\n  }\n  /** Stops all the instances of this sound from playing. */\n  get paused() {\n    return this._paused;\n  }\n  set paused(paused) {\n    this._paused = paused;\n    this.refreshPaused();\n  }\n  /** The playback rate. */\n  get speed() {\n    return this._speed;\n  }\n  set speed(speed) {\n    this._speed = speed;\n    this.refresh();\n  }\n  /** Set the filters. Only supported with WebAudio. */\n  get filters() {\n    return this.media.filters;\n  }\n  set filters(filters) {\n    this.media.filters = filters;\n  }\n  /**\n   * @ignore\n   */\n  addSprites(source, data) {\n    if (typeof source === \"object\") {\n      const results = {};\n      for (const alias in source) {\n        results[alias] = this.addSprites(alias, source[alias]);\n      }\n      return results;\n    }\n    console.assert(!this._sprites[source], `Alias ${source} is already taken`);\n    const sprite = new SoundSprite(this, data);\n    this._sprites[source] = sprite;\n    return sprite;\n  }\n  /** Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound. */\n  destroy() {\n    this._removeInstances();\n    this.removeSprites();\n    this.media.destroy();\n    this.media = null;\n    this._sprites = null;\n    this._instances = null;\n  }\n  /**\n   * Remove a sound sprite.\n   * @param alias - The unique name of the sound sprite, if alias is omitted, removes all sprites.\n   */\n  removeSprites(alias) {\n    if (!alias) {\n      for (const name in this._sprites) {\n        this.removeSprites(name);\n      }\n    } else {\n      const sprite = this._sprites[alias];\n      if (sprite !== void 0) {\n        sprite.destroy();\n        delete this._sprites[alias];\n      }\n    }\n    return this;\n  }\n  /** If the current sound is playable (loaded). */\n  get isPlayable() {\n    return this.isLoaded && this.media && this.media.isPlayable;\n  }\n  /** Stops all the instances of this sound from playing. */\n  stop() {\n    if (!this.isPlayable) {\n      this.autoPlay = false;\n      this._autoPlayOptions = null;\n      return this;\n    }\n    this.isPlaying = false;\n    for (let i = this._instances.length - 1; i >= 0; i--) {\n      this._instances[i].stop();\n    }\n    return this;\n  }\n  // Overloaded function\n  play(source, complete) {\n    let options;\n    if (typeof source === \"string\") {\n      const sprite = source;\n      options = { sprite, loop: this.loop, complete };\n    } else if (typeof source === \"function\") {\n      options = {};\n      options.complete = source;\n    } else {\n      options = source;\n    }\n    options = {\n      complete: null,\n      loaded: null,\n      sprite: null,\n      end: null,\n      start: 0,\n      volume: 1,\n      speed: 1,\n      muted: false,\n      loop: false,\n      ...options || {}\n    };\n    if (options.sprite) {\n      const alias = options.sprite;\n      console.assert(!!this._sprites[alias], `Alias ${alias} is not available`);\n      const sprite = this._sprites[alias];\n      options.start = sprite.start + (options.start || 0);\n      options.end = sprite.end;\n      options.speed = sprite.speed || 1;\n      options.loop = sprite.loop || options.loop;\n      delete options.sprite;\n    }\n    if (options.offset) {\n      options.start = options.offset;\n    }\n    if (!this.isLoaded) {\n      if (this._preloadQueue) {\n        return new Promise((resolve) => {\n          this._preloadQueue.push(() => {\n            resolve(this.play(options));\n          });\n        });\n      }\n      this._preloadQueue = [];\n      this.autoPlay = true;\n      this._autoPlayOptions = options;\n      return new Promise((resolve, reject) => {\n        this._preload((err, sound, media) => {\n          this._preloadQueue.forEach((resolve2) => resolve2());\n          this._preloadQueue = null;\n          if (err) {\n            reject(err);\n          } else {\n            if (options.loaded) {\n              options.loaded(err, sound, media);\n            }\n            resolve(media);\n          }\n        });\n      });\n    }\n    if (this.singleInstance || options.singleInstance) {\n      this._removeInstances();\n    }\n    const instance = this._createInstance();\n    this._instances.push(instance);\n    this.isPlaying = true;\n    instance.once(\"end\", () => {\n      if (options.complete) {\n        options.complete(this);\n      }\n      this._onComplete(instance);\n    });\n    instance.once(\"stop\", () => {\n      this._onComplete(instance);\n    });\n    instance.play(options);\n    return instance;\n  }\n  /** Internal only, speed, loop, volume change occured. */\n  refresh() {\n    const len = this._instances.length;\n    for (let i = 0; i < len; i++) {\n      this._instances[i].refresh();\n    }\n  }\n  /** Handle changes in paused state. Internal only. */\n  refreshPaused() {\n    const len = this._instances.length;\n    for (let i = 0; i < len; i++) {\n      this._instances[i].refreshPaused();\n    }\n  }\n  /** Gets and sets the volume. */\n  get volume() {\n    return this._volume;\n  }\n  set volume(volume) {\n    this._volume = volume;\n    this.refresh();\n  }\n  /** Gets and sets the muted flag. */\n  get muted() {\n    return this._muted;\n  }\n  set muted(muted) {\n    this._muted = muted;\n    this.refresh();\n  }\n  /** Gets and sets the looping. */\n  get loop() {\n    return this._loop;\n  }\n  set loop(loop) {\n    this._loop = loop;\n    this.refresh();\n  }\n  /** Starts the preloading of sound. */\n  _preload(callback) {\n    this.media.load(callback);\n  }\n  /** Gets the list of instances that are currently being played of this sound. */\n  get instances() {\n    return this._instances;\n  }\n  /** Get the map of sprites. */\n  get sprites() {\n    return this._sprites;\n  }\n  /** Get the duration of the audio in seconds. */\n  get duration() {\n    return this.media.duration;\n  }\n  /** Auto play the first instance. */\n  autoPlayStart() {\n    let instance;\n    if (this.autoPlay) {\n      instance = this.play(this._autoPlayOptions);\n    }\n    return instance;\n  }\n  /** Removes all instances. */\n  _removeInstances() {\n    for (let i = this._instances.length - 1; i >= 0; i--) {\n      this._poolInstance(this._instances[i]);\n    }\n    this._instances.length = 0;\n  }\n  /**\n   * Sound instance completed.\n   * @param instance\n   */\n  _onComplete(instance) {\n    if (this._instances) {\n      const index = this._instances.indexOf(instance);\n      if (index > -1) {\n        this._instances.splice(index, 1);\n      }\n      this.isPlaying = this._instances.length > 0;\n    }\n    this._poolInstance(instance);\n  }\n  /** Create a new instance. */\n  _createInstance() {\n    if (_Sound._pool.length > 0) {\n      const instance = _Sound._pool.pop();\n      instance.init(this.media);\n      return instance;\n    }\n    return this.media.create();\n  }\n  /**\n   * Destroy/recycling the instance object.\n   * @param instance - Instance to recycle\n   */\n  _poolInstance(instance) {\n    instance.destroy();\n    if (_Sound._pool.indexOf(instance) < 0) {\n      _Sound._pool.push(instance);\n    }\n  }\n};\nlet Sound = _Sound;\n/** Pool of instances */\nSound._pool = [];\n\nexport { Sound };\n//# sourceMappingURL=Sound.mjs.map\n","import { EventEmitter } from 'pixi.js';\nimport { Filterable } from '../Filterable.mjs';\n\nclass WebAudioContext extends Filterable {\n  constructor() {\n    const win = window;\n    const ctx = new WebAudioContext.AudioContext();\n    const compressor = ctx.createDynamicsCompressor();\n    const analyser = ctx.createAnalyser();\n    analyser.connect(compressor);\n    compressor.connect(ctx.destination);\n    super(analyser, compressor);\n    /** Set to false ignore suspending when window is blurred */\n    this.autoPause = true;\n    this._ctx = ctx;\n    this._offlineCtx = new WebAudioContext.OfflineAudioContext(\n      1,\n      2,\n      win.OfflineAudioContext ? Math.max(8e3, Math.min(96e3, ctx.sampleRate)) : 44100\n    );\n    this.compressor = compressor;\n    this.analyser = analyser;\n    this.events = new EventEmitter();\n    this.volume = 1;\n    this.speed = 1;\n    this.muted = false;\n    this.paused = false;\n    this._locked = ctx.state === \"suspended\" && (\"ontouchstart\" in globalThis || \"onclick\" in globalThis);\n    if (this._locked) {\n      this._unlock();\n      this._unlock = this._unlock.bind(this);\n      document.addEventListener(\"mousedown\", this._unlock, true);\n      document.addEventListener(\"touchstart\", this._unlock, true);\n      document.addEventListener(\"touchend\", this._unlock, true);\n    }\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    globalThis.addEventListener(\"focus\", this.onFocus);\n    globalThis.addEventListener(\"blur\", this.onBlur);\n  }\n  /** Handle mobile WebAudio context resume */\n  onFocus() {\n    if (!this.autoPause) {\n      return;\n    }\n    const state = this._ctx.state;\n    if (state === \"suspended\" || state === \"interrupted\" || !this._locked) {\n      this.paused = this._pausedOnBlur;\n      this.refreshPaused();\n    }\n  }\n  /** Handle mobile WebAudio context suspend */\n  onBlur() {\n    if (!this.autoPause) {\n      return;\n    }\n    if (!this._locked) {\n      this._pausedOnBlur = this._paused;\n      this.paused = true;\n      this.refreshPaused();\n    }\n  }\n  /**\n   * Try to unlock audio on iOS. This is triggered from either WebAudio plugin setup (which will work if inside of\n   * a `mousedown` or `touchend` event stack), or the first document touchend/mousedown event. If it fails (touchend\n   * will fail if the user presses for too long, indicating a scroll event instead of a click event.\n   *\n   * Note that earlier versions of iOS supported `touchstart` for this, but iOS9 removed this functionality. Adding\n   * a `touchstart` event to support older platforms may preclude a `mousedown` even from getting fired on iOS9, so we\n   * stick with `mousedown` and `touchend`.\n   */\n  _unlock() {\n    if (!this._locked) {\n      return;\n    }\n    this.playEmptySound();\n    if (this._ctx.state === \"running\") {\n      document.removeEventListener(\"mousedown\", this._unlock, true);\n      document.removeEventListener(\"touchend\", this._unlock, true);\n      document.removeEventListener(\"touchstart\", this._unlock, true);\n      this._locked = false;\n    }\n  }\n  /**\n   * Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\n   * require the first sound to be played inside of a user initiated event (touch/click).\n   */\n  playEmptySound() {\n    const source = this._ctx.createBufferSource();\n    source.buffer = this._ctx.createBuffer(1, 1, 22050);\n    source.connect(this._ctx.destination);\n    source.start(0, 0, 0);\n    if (source.context.state === \"suspended\") {\n      source.context.resume();\n    }\n  }\n  /**\n   * Get AudioContext class, if not supported returns `null`\n   * @type {AudioContext}\n   * @readonly\n   */\n  static get AudioContext() {\n    const win = window;\n    return win.AudioContext || win.webkitAudioContext || null;\n  }\n  /**\n   * Get OfflineAudioContext class, if not supported returns `null`\n   * @type {OfflineAudioContext}\n   * @readonly\n   */\n  static get OfflineAudioContext() {\n    const win = window;\n    return win.OfflineAudioContext || win.webkitOfflineAudioContext || null;\n  }\n  /** Destroy this context. */\n  destroy() {\n    super.destroy();\n    const ctx = this._ctx;\n    if (typeof ctx.close !== \"undefined\") {\n      ctx.close();\n    }\n    globalThis.removeEventListener(\"focus\", this.onFocus);\n    globalThis.removeEventListener(\"blur\", this.onBlur);\n    this.events.removeAllListeners();\n    this.analyser.disconnect();\n    this.compressor.disconnect();\n    this.analyser = null;\n    this.compressor = null;\n    this.events = null;\n    this._offlineCtx = null;\n    this._ctx = null;\n  }\n  /**\n   * The WebAudio API AudioContext object.\n   * @readonly\n   * @type {AudioContext}\n   */\n  get audioContext() {\n    return this._ctx;\n  }\n  /**\n   * The WebAudio API OfflineAudioContext object.\n   * @readonly\n   * @type {OfflineAudioContext}\n   */\n  get offlineContext() {\n    return this._offlineCtx;\n  }\n  /**\n   * Pauses all sounds, even though we handle this at the instance\n   * level, we'll also pause the audioContext so that the\n   * time used to compute progress isn't messed up.\n   * @default false\n   */\n  set paused(paused) {\n    if (paused && this._ctx.state === \"running\") {\n      this._ctx.suspend();\n    } else if (!paused && this._ctx.state === \"suspended\") {\n      this._ctx.resume();\n    }\n    this._paused = paused;\n  }\n  get paused() {\n    return this._paused;\n  }\n  /** Emit event when muted, volume or speed changes */\n  refresh() {\n    this.events.emit(\"refresh\");\n  }\n  /** Emit event when muted, volume or speed changes */\n  refreshPaused() {\n    this.events.emit(\"refreshPaused\");\n  }\n  /**\n   * Toggles the muted state.\n   * @return The current muted state.\n   */\n  toggleMute() {\n    this.muted = !this.muted;\n    this.refresh();\n    return this.muted;\n  }\n  /**\n   * Toggles the paused state.\n   * @return The current muted state.\n   */\n  togglePause() {\n    this.paused = !this.paused;\n    this.refreshPaused();\n    return this._paused;\n  }\n  /**\n   * Decode the audio data\n   * @param arrayBuffer - Buffer from loader\n   * @param callback - When completed, error and audioBuffer are parameters.\n   */\n  decode(arrayBuffer, callback) {\n    const handleError = (err) => {\n      callback(new Error(err?.message || \"Unable to decode file\"));\n    };\n    const result = this._offlineCtx.decodeAudioData(\n      arrayBuffer,\n      (buffer) => {\n        callback(null, buffer);\n      },\n      handleError\n    );\n    if (result) {\n      result.catch(handleError);\n    }\n  }\n}\n\nexport { WebAudioContext };\n//# sourceMappingURL=WebAudioContext.mjs.map\n","import { HTMLAudioContext } from './htmlaudio/HTMLAudioContext.mjs';\nimport { Sound } from './Sound.mjs';\nimport { WebAudioContext } from './webaudio/WebAudioContext.mjs';\n\nclass SoundLibrary {\n  constructor() {\n    this.init();\n  }\n  /**\n   * Re-initialize the sound library, this will\n   * recreate the AudioContext. If there's a hardware-failure\n   * call `close` and then `init`.\n   * @return Sound instance\n   */\n  init() {\n    if (this.supported) {\n      this._webAudioContext = new WebAudioContext();\n    }\n    this._htmlAudioContext = new HTMLAudioContext();\n    this._sounds = {};\n    this.useLegacy = !this.supported;\n    return this;\n  }\n  /**\n   * The global context to use.\n   * @readonly\n   */\n  get context() {\n    return this._context;\n  }\n  /**\n   * Apply filters to all sounds. Can be useful\n   * for setting global planning or global effects.\n   * **Only supported with WebAudio.**\n   * @example\n   * import { sound, filters } from '@pixi/sound';\n   * // Adds a filter to pan all output left\n   * sound.filtersAll = [\n   *     new filters.StereoFilter(-1)\n   * ];\n   */\n  get filtersAll() {\n    if (!this.useLegacy) {\n      return this._context.filters;\n    }\n    return [];\n  }\n  set filtersAll(filtersAll) {\n    if (!this.useLegacy) {\n      this._context.filters = filtersAll;\n    }\n  }\n  /**\n   * `true` if WebAudio is supported on the current browser.\n   */\n  get supported() {\n    return WebAudioContext.AudioContext !== null;\n  }\n  /**\n   * @ignore\n   */\n  add(source, sourceOptions) {\n    if (typeof source === \"object\") {\n      const results = {};\n      for (const alias in source) {\n        const options2 = this._getOptions(\n          source[alias],\n          sourceOptions\n        );\n        results[alias] = this.add(alias, options2);\n      }\n      return results;\n    }\n    console.assert(!this._sounds[source], `Sound with alias ${source} already exists.`);\n    if (sourceOptions instanceof Sound) {\n      this._sounds[source] = sourceOptions;\n      return sourceOptions;\n    }\n    const options = this._getOptions(sourceOptions);\n    const sound = Sound.from(options);\n    this._sounds[source] = sound;\n    return sound;\n  }\n  /**\n   * Internal methods for getting the options object\n   * @private\n   * @param source - The source options\n   * @param overrides - Override default options\n   * @return The construction options\n   */\n  _getOptions(source, overrides) {\n    let options;\n    if (typeof source === \"string\") {\n      options = { url: source };\n    } else if (Array.isArray(source)) {\n      options = { url: source };\n    } else if (source instanceof ArrayBuffer || source instanceof AudioBuffer || source instanceof HTMLAudioElement) {\n      options = { source };\n    } else {\n      options = source;\n    }\n    options = { ...options, ...overrides || {} };\n    return options;\n  }\n  /**\n   * Do not use WebAudio, force the use of legacy. This **must** be called before loading any files.\n   */\n  get useLegacy() {\n    return this._useLegacy;\n  }\n  set useLegacy(legacy) {\n    this._useLegacy = legacy;\n    this._context = !legacy && this.supported ? this._webAudioContext : this._htmlAudioContext;\n  }\n  /**\n   * This disables auto-pause all playback when the window blurs (WebAudio only).\n   * This is helpful to keep from playing sounds when the user switches tabs.\n   * However, if you're running content within an iframe, this may be undesirable\n   * and you should disable (set to `true`) this behavior.\n   * @default false\n   */\n  get disableAutoPause() {\n    return !this._webAudioContext.autoPause;\n  }\n  set disableAutoPause(autoPause) {\n    this._webAudioContext.autoPause = !autoPause;\n  }\n  /**\n   * Removes a sound by alias.\n   * @param alias - The sound alias reference.\n   * @return Instance for chaining.\n   */\n  remove(alias) {\n    this.exists(alias, true);\n    this._sounds[alias].destroy();\n    delete this._sounds[alias];\n    return this;\n  }\n  /**\n   * Set the global volume for all sounds. To set per-sound volume see {@link SoundLibrary#volume}.\n   */\n  get volumeAll() {\n    return this._context.volume;\n  }\n  set volumeAll(volume) {\n    this._context.volume = volume;\n    this._context.refresh();\n  }\n  /**\n   * Set the global speed for all sounds. To set per-sound speed see {@link SoundLibrary#speed}.\n   */\n  get speedAll() {\n    return this._context.speed;\n  }\n  set speedAll(speed) {\n    this._context.speed = speed;\n    this._context.refresh();\n  }\n  /**\n   * Toggle paused property for all sounds.\n   * @return `true` if all sounds are paused.\n   */\n  togglePauseAll() {\n    return this._context.togglePause();\n  }\n  /**\n   * Pauses any playing sounds.\n   * @return Instance for chaining.\n   */\n  pauseAll() {\n    this._context.paused = true;\n    this._context.refreshPaused();\n    return this;\n  }\n  /**\n   * Resumes any sounds.\n   * @return Instance for chaining.\n   */\n  resumeAll() {\n    this._context.paused = false;\n    this._context.refreshPaused();\n    return this;\n  }\n  /**\n   * Toggle muted property for all sounds.\n   * @return `true` if all sounds are muted.\n   */\n  toggleMuteAll() {\n    return this._context.toggleMute();\n  }\n  /**\n   * Mutes all playing sounds.\n   * @return Instance for chaining.\n   */\n  muteAll() {\n    this._context.muted = true;\n    this._context.refresh();\n    return this;\n  }\n  /**\n   * Unmutes all playing sounds.\n   * @return Instance for chaining.\n   */\n  unmuteAll() {\n    this._context.muted = false;\n    this._context.refresh();\n    return this;\n  }\n  /**\n   * Stops and removes all sounds. They cannot be used after this.\n   * @return Instance for chaining.\n   */\n  removeAll() {\n    for (const alias in this._sounds) {\n      this._sounds[alias].destroy();\n      delete this._sounds[alias];\n    }\n    return this;\n  }\n  /**\n   * Stops all sounds.\n   * @return Instance for chaining.\n   */\n  stopAll() {\n    for (const alias in this._sounds) {\n      this._sounds[alias].stop();\n    }\n    return this;\n  }\n  /**\n   * Checks if a sound by alias exists.\n   * @param alias - Check for alias.\n   * @param assert - Whether enable console.assert.\n   * @return true if the sound exists.\n   */\n  exists(alias, assert = false) {\n    const exists = !!this._sounds[alias];\n    if (assert) {\n      console.assert(exists, `No sound matching alias '${alias}'.`);\n    }\n    return exists;\n  }\n  /**\n   * Convenience function to check to see if any sound is playing.\n   * @returns `true` if any sound is currently playing.\n   */\n  isPlaying() {\n    for (const alias in this._sounds) {\n      if (this._sounds[alias].isPlaying) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Find a sound by alias.\n   * @param alias - The sound alias reference.\n   * @return Sound object.\n   */\n  find(alias) {\n    this.exists(alias, true);\n    return this._sounds[alias];\n  }\n  /**\n   * Plays a sound.\n   * @method play\n   * @instance\n   * @param {string} alias - The sound alias reference.\n   * @param {string} sprite - The alias of the sprite to play.\n   * @return {IMediaInstance|null} The sound instance, this cannot be reused\n   *         after it is done playing. Returns `null` if the sound has not yet loaded.\n   */\n  /**\n   * Plays a sound.\n   * @param alias - The sound alias reference.\n   * @param {PlayOptions|Function} options - The options or callback when done.\n   * @return The sound instance,\n   *        this cannot be reused after it is done playing. Returns a Promise if the sound\n   *        has not yet loaded.\n   */\n  play(alias, options) {\n    return this.find(alias).play(options);\n  }\n  /**\n   * Stops a sound.\n   * @param alias - The sound alias reference.\n   * @return Sound object.\n   */\n  stop(alias) {\n    return this.find(alias).stop();\n  }\n  /**\n   * Pauses a sound.\n   * @param alias - The sound alias reference.\n   * @return Sound object.\n   */\n  pause(alias) {\n    return this.find(alias).pause();\n  }\n  /**\n   * Resumes a sound.\n   * @param alias - The sound alias reference.\n   * @return Instance for chaining.\n   */\n  resume(alias) {\n    return this.find(alias).resume();\n  }\n  /**\n   * Get or set the volume for a sound.\n   * @param alias - The sound alias reference.\n   * @param volume - Optional current volume to set.\n   * @return The current volume.\n   */\n  volume(alias, volume) {\n    const sound = this.find(alias);\n    if (volume !== void 0) {\n      sound.volume = volume;\n    }\n    return sound.volume;\n  }\n  /**\n   * Get or set the speed for a sound.\n   * @param alias - The sound alias reference.\n   * @param speed - Optional current speed to set.\n   * @return The current speed.\n   */\n  speed(alias, speed) {\n    const sound = this.find(alias);\n    if (speed !== void 0) {\n      sound.speed = speed;\n    }\n    return sound.speed;\n  }\n  /**\n   * Get the length of a sound in seconds.\n   * @param alias - The sound alias reference.\n   * @return The current duration in seconds.\n   */\n  duration(alias) {\n    return this.find(alias).duration;\n  }\n  /**\n   * Closes the sound library. This will release/destroy\n   * the AudioContext(s). Can be used safely if you want to\n   * initialize the sound library later. Use `init` method.\n   */\n  close() {\n    this.removeAll();\n    this._sounds = null;\n    if (this._webAudioContext) {\n      this._webAudioContext.destroy();\n      this._webAudioContext = null;\n    }\n    if (this._htmlAudioContext) {\n      this._htmlAudioContext.destroy();\n      this._htmlAudioContext = null;\n    }\n    this._context = null;\n    return this;\n  }\n}\n\nexport { SoundLibrary };\n//# sourceMappingURL=SoundLibrary.mjs.map\n","import { ExtensionType, LoaderParserPriority, path, extensions as extensions$1 } from 'pixi.js';\nimport { getInstance } from './instance.mjs';\nimport { Sound } from './Sound.mjs';\nimport { extensions, supported, mimes } from './utils/supported.mjs';\n\nconst getAlias = (asset) => {\n  const src = asset.src;\n  let alias = asset?.alias?.[0];\n  if (!alias || asset.src === alias) {\n    alias = path.basename(src, path.extname(src));\n  }\n  return alias;\n};\nconst soundAsset = {\n  extension: ExtensionType.Asset,\n  detection: {\n    test: async () => true,\n    add: async (formats) => [...formats, ...extensions.filter((ext) => supported[ext])],\n    remove: async (formats) => formats.filter((ext) => formats.includes(ext))\n  },\n  loader: {\n    name: \"sound\",\n    extension: {\n      type: [ExtensionType.LoadParser],\n      priority: LoaderParserPriority.High\n    },\n    /** Should we attempt to load this file? */\n    test(url) {\n      const ext = path.extname(url).slice(1);\n      return !!supported[ext] || mimes.some((mime) => url.startsWith(`data:${mime}`));\n    },\n    /** Load the sound file, this is mostly handled by Sound.from() */\n    async load(url, asset) {\n      const sound = await new Promise((resolve, reject) => Sound.from({\n        ...asset.data,\n        url,\n        preload: true,\n        loaded(err, sound2) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(sound2);\n          }\n          asset.data?.loaded?.(err, sound2);\n        }\n      }));\n      getInstance().add(getAlias(asset), sound);\n      return sound;\n    },\n    /** Remove the sound from the library */\n    async unload(_sound, asset) {\n      getInstance().remove(getAlias(asset));\n    }\n  }\n};\nextensions$1.add(soundAsset);\n\nexport { soundAsset };\n//# sourceMappingURL=soundAsset.mjs.map\n","import * as index from './filters/index.mjs';\nexport { index as filters };\nimport * as index$1 from './htmlaudio/index.mjs';\nexport { index$1 as htmlaudio };\nimport { setInstance } from './instance.mjs';\nimport { SoundLibrary } from './SoundLibrary.mjs';\nimport * as index$2 from './utils/index.mjs';\nexport { index$2 as utils };\nimport * as index$3 from './webaudio/index.mjs';\nexport { index$3 as webaudio };\nexport { Filterable } from './Filterable.mjs';\nexport { Filter } from './filters/Filter.mjs';\nexport { Sound } from './Sound.mjs';\nexport { soundAsset } from './soundAsset.mjs';\nexport { SoundSprite } from './SoundSprite.mjs';\n\nconst sound = setInstance(new SoundLibrary());\n\nexport { SoundLibrary, sound };\n//# sourceMappingURL=index.mjs.map\n","import { IAudioInstance } from './AudioInstance';\nimport { IAudioManagerPlugin } from './AudioManagerPlugin';\n\nexport interface IAudioChannel {\n  name: string;\n  muted: boolean;\n  volume: number;\n\n  add(id: string, instance: IAudioInstance): IAudioInstance;\n\n  get(id: string): IAudioInstance | undefined;\n\n  remove(id: string): IAudioInstance | undefined;\n\n  updateVolume(): void;\n\n  destroy(): void;\n}\n\nexport class AudioChannel {\n  private _sounds: Map<string, IAudioInstance> = new Map<string, IAudioInstance>();\n\n  constructor(\n    public name: string,\n    public manager: IAudioManagerPlugin,\n  ) {\n    this.muted = this.manager.muted;\n  }\n\n  private _muted: boolean = false;\n\n  get muted(): boolean {\n    return this._muted;\n  }\n\n  set muted(value: boolean) {\n    this._muted = value;\n    this._setMuted();\n  }\n\n  private _volume: number = 1.0;\n\n  get volume(): number {\n    return this._volume;\n  }\n\n  set volume(value: number) {\n    this._volume = value;\n    this.updateVolume();\n  }\n\n  add(id: string, instance: IAudioInstance): IAudioInstance {\n    this._sounds.set(id, instance);\n    return instance;\n  }\n\n  get(id: string): IAudioInstance | undefined {\n    return this._sounds.get(id);\n  }\n\n  remove(id: string): IAudioInstance | undefined {\n    const instance = this._sounds.get(id);\n    if (instance) {\n      instance.destroy();\n      this._sounds.delete(id);\n    }\n    return instance;\n  }\n\n  _setMuted(): void {\n    this._sounds.forEach((sound) => {\n      sound.muted = this._muted;\n    });\n  }\n\n  updateVolume() {\n    this._sounds.forEach((sound) => {\n      sound.updateVolume();\n    });\n    this.manager.onChannelVolumeChanged.emit({ channel: this, volume: this._volume });\n  }\n\n  destroy() {}\n}\n","import { IMediaInstance } from '@pixi/sound';\nimport { gsap } from 'gsap';\nimport { Signal } from '../../signals';\nimport { bindAllMethods } from '../../utils/methodBinding';\nimport { IAudioChannel } from './AudioChannel';\nimport { IAudioManagerPlugin } from './AudioManagerPlugin';\n\nexport interface IAudioInstance {\n  volume: number;\n  media: IMediaInstance;\n  channel: IAudioChannel;\n  muted: boolean;\n  id: string;\n  manager: IAudioManagerPlugin;\n  onStart: Signal<(instance: IAudioInstance) => void>;\n  onStop: Signal<(instance: IAudioInstance) => void>;\n  onEnd: Signal<(instance: IAudioInstance) => void>;\n  onPaused: Signal<(instance: IAudioInstance) => void>;\n  onResumed: Signal<(instance: IAudioInstance) => void>;\n  isPlaying: boolean;\n\n  fadeTo(volume: number, duration: number): gsap.core.Tween;\n\n  stop(): void;\n\n  destroy(): void;\n\n  remove(): void;\n\n  updateVolume(): void;\n\n  addListeners(): void;\n\n  removeListeners(): void;\n\n  pause(): void;\n\n  play(): void;\n\n  resume(): void;\n}\n\nexport class AudioInstance implements IAudioInstance {\n  public onStart: Signal<(instance: IAudioInstance) => void> = new Signal<(instance: IAudioInstance) => void>();\n  public onStop: Signal<(instance: IAudioInstance) => void> = new Signal<(instance: IAudioInstance) => void>();\n  public onEnd: Signal<(instance: IAudioInstance) => void> = new Signal<(instance: IAudioInstance) => void>();\n  public onPaused: Signal<(instance: IAudioInstance) => void> = new Signal<(instance: IAudioInstance) => void>();\n  public onResumed: Signal<(instance: IAudioInstance) => void> = new Signal<(instance: IAudioInstance) => void>();\n  public onProgress: Signal<(instance: IAudioInstance) => void> = new Signal<(instance: IAudioInstance) => void>();\n\n  constructor(\n    public id: string,\n    public channel: IAudioChannel,\n    public manager: IAudioManagerPlugin,\n  ) {\n    bindAllMethods(this);\n    this.muted = this.channel.muted;\n  }\n\n  private _media: IMediaInstance;\n\n  get media(): IMediaInstance {\n    return this._media;\n  }\n\n  set media(value: IMediaInstance) {\n    this._media = value;\n    if (value) {\n      this._media.volume = this._volume * this.channel.volume * this.manager.masterVolume;\n      if (this.muted) {\n        this._media.muted = this.muted;\n      }\n      this.addListeners();\n    }\n  }\n\n  private _volume: number = 1;\n\n  public get volume(): number {\n    return this._volume;\n  }\n\n  public set volume(value: number) {\n    this._volume = value;\n    if (this._media) {\n      this._media.volume = this._volume * this.channel.volume * this.manager.masterVolume;\n    }\n  }\n\n  private _muted: boolean = false;\n\n  get muted(): boolean {\n    return this._muted;\n  }\n\n  set muted(value: boolean) {\n    this._muted = value;\n    if (this._media) {\n      this._media.muted = this._muted;\n    }\n  }\n\n  private _isPlaying: boolean = false;\n\n  get isPlaying() {\n    return this._isPlaying;\n  }\n\n  pause(): void {\n    this._isPlaying = false;\n    if (this._media) {\n      this._media.paused = true;\n    }\n  }\n\n  resume(): void {\n    this._isPlaying = true;\n    if (this._media) {\n      this._media.paused = false;\n    }\n  }\n\n  remove(): void {\n    this.channel.remove(this.id);\n  }\n\n  stop() {\n    if (this._media) {\n      this._media.stop();\n    }\n    this.onEnd.emit(this);\n  }\n\n  updateVolume(): void {\n    this.volume = this._volume;\n  }\n\n  addListeners() {\n    this.removeListeners();\n    this._media.on('end', this._handleMediaEnded);\n    this._media.on('start', this._handleMediaStarted);\n    this._media.on('stop', this._handleMediaStopped);\n    this._media.on('pause', this._handleMediaPaused);\n    this._media.on('progress', this._handleMediaProgress);\n    this._media.on('resumed', this._handleMediaResumed);\n  }\n\n  removeListeners() {\n    if (!this.media) {\n      return;\n    }\n\n    this._media.off('end', this._handleMediaEnded);\n    this._media.off('start', this._handleMediaStarted);\n    this._media.off('stop', this._handleMediaStopped);\n    this._media.off('pause', this._handleMediaPaused);\n    this._media.off('progress', this._handleMediaProgress);\n    this._media.off('resumed', this._handleMediaResumed);\n  }\n\n  destroy() {\n    this.stop();\n    this.removeListeners();\n  }\n\n  public fadeTo(volume: number, duration: number): gsap.core.Tween {\n    return gsap.to(this.media, { volume, duration });\n  }\n\n  public play(time?: number): void {\n    this._isPlaying = true;\n    if (time) {\n      this.media.play({ start: time });\n    } else {\n      this.media.play({});\n    }\n  }\n\n  private _handleMediaEnded() {\n    this.onEnd.emit(this);\n  }\n\n  private _handleMediaStarted() {\n    this.onStart.emit(this);\n  }\n\n  private _handleMediaStopped() {\n    this.onStop.emit(this);\n  }\n\n  private _handleMediaPaused() {\n    this.onPaused.emit(this);\n  }\n\n  private _handleMediaProgress() {\n    this.onProgress.emit(this);\n  }\n\n  private _handleMediaResumed() {\n    this.onResumed.emit(this);\n  }\n}\n","import { PlayOptions, sound, SoundSourceMap } from '@pixi/sound';\nimport { gsap } from 'gsap';\nimport { AssetsManifest, UnresolvedAsset } from 'pixi.js';\nimport { IApplication } from '../../core/Application';\nimport { Signal } from '../../signals';\nimport { Logger } from '../../utils/console/Logger';\nimport type { IPlugin } from '../Plugin';\nimport { Plugin } from '../Plugin';\n\nimport { AudioChannel, IAudioChannel } from './AudioChannel';\nimport { AudioInstance, IAudioInstance } from './AudioInstance';\n\nexport type SoundDetail = { id: string; instance: IAudioInstance; channelName: string };\nexport type ChannelVolumeDetail = { channel: IAudioChannel; volume: number };\nexport type ChannelName = 'music' | 'sfx' | 'voiceover' | string;\n\nexport interface IAudioManagerPlugin extends IPlugin {\n  onSoundStarted: Signal<(detail: SoundDetail) => void>;\n  onSoundEnded: Signal<(detail: SoundDetail) => void>;\n  onMasterVolumeChanged: Signal<(volume: number) => void>;\n  onChannelVolumeChanged: Signal<(detail: ChannelVolumeDetail) => void>;\n  onMuted: Signal<(muted: boolean) => void>;\n\n  masterVolume: number;\n  muted: boolean;\n  channels: Map<string, IAudioChannel>;\n  music: IAudioChannel;\n  sfx: IAudioChannel;\n  voiceover: IAudioChannel;\n  vo: IAudioChannel;\n\n  createChannel(name: string): void;\n\n  play(soundId: string, channelName: ChannelName, options?: PlayOptions): Promise<IAudioInstance>;\n\n  load(soundId: string | string[], channelName: ChannelName, options?: PlayOptions): void;\n\n  stop(soundId: string, channelName: ChannelName): IAudioInstance | undefined;\n\n  setChannelVolume(channelName: ChannelName | ChannelName[], volume: number): void;\n\n  getChannel(name: ChannelName): IAudioChannel | undefined;\n\n  addAllFromManifest(manifest: AssetsManifest): void;\n\n  addAllFromBundle(bundleName: string, manifest?: AssetsManifest | string | undefined): void;\n\n  add(soundAsset: UnresolvedAsset): void;\n\n  fade(soundId: string, channelName: ChannelName, props?: gsap.TweenVars): Promise<gsap.core.Tween | null>;\n\n  fadeIn(soundId: string, channelName: ChannelName, props?: gsap.TweenVars): Promise<gsap.core.Tween | null>;\n\n  fadeOut(soundId: string, channelName: ChannelName, props?: gsap.TweenVars): Promise<gsap.core.Tween | null>;\n\n  crossFade(\n    outSoundId: string,\n    inSoundId: string,\n    channelName: ChannelName,\n    duration?: number,\n  ): Promise<gsap.core.Tween | null>;\n\n  mute(): void;\n\n  unmute(): void;\n\n  pause(): void;\n\n  resume(): void;\n\n  suspend(): void;\n\n  restore(): void;\n\n  getAudioInstance(soundId: string, channelName: string): IAudioInstance | undefined;\n}\n\n/**\n * AudioManager is a class that manages audio playback in the application.\n * It provides methods to play, stop, fade in/out, and crossfade sounds.\n * It also allows you to create and manage audio channels.\n *\n * @example\n * const audioManager = new AudioManager();\n * audioManager.play('soundId', 'music');\n */\nexport class AudioManagerPlugin extends Plugin implements IAudioManagerPlugin {\n  // signals\n  /**\n   * Signal that is emitted when a sound starts playing.\n   * The callback function receives a SoundDetail object.\n   */\n  public onSoundStarted: Signal<(detail: SoundDetail) => void> = new Signal<(detail: SoundDetail) => void>();\n  /**\n   * Signal that is emitted when a sound ends.\n   * The callback function receives a SoundDetail object.\n   */\n  public onSoundEnded: Signal<(detail: SoundDetail) => void> = new Signal<(detail: SoundDetail) => void>();\n  /**\n   * Signal that is emitted when the system is muted or unmuted.\n   */\n  public onMuted: Signal<(muted: boolean) => void> = new Signal<(muted: boolean) => void>();\n  /**\n   * Signal that is emitted when the master volume changes.\n   * The callback function receives the new volume as a number.\n   */\n  public onMasterVolumeChanged: Signal<(volume: number) => void> = new Signal<(volume: number) => void>();\n  /**\n   * Signal that is emitted when a channel's volume changes.\n   * The callback function receives a ChannelVolumeDetail object.\n   */\n  public onChannelVolumeChanged: Signal<(detail: ChannelVolumeDetail) => void> = new Signal<\n    (detail: ChannelVolumeDetail) => void\n  >();\n  private _storedVolume: number | undefined = undefined;\n  private _paused: boolean = false;\n  private _idMap: Map<string, string> = new Map();\n\n  /**\n   * Creates a new AudioManager instance.\n   * @param {string} id - The ID of the AudioManager. Default is 'AudioManager'.\n   */\n  public constructor(id: string = 'audio') {\n    super(id);\n\n    this.createChannel('music');\n    this.createChannel('sfx');\n    this.createChannel('voiceover');\n  }\n\n  private _masterVolume: number = 1;\n\n  /**\n   * Gets the master volume.\n   * @returns {number} The master volume.\n   */\n  get masterVolume(): number {\n    return this._masterVolume;\n  }\n\n  /**\n   * Sets the master volume.\n   * @param {number} value - The new master volume.\n   */\n  set masterVolume(value: number) {\n    this._masterVolume = value;\n    this._channels.forEach((channel) => channel.updateVolume());\n  }\n\n  private _muted: boolean = false;\n\n  /**\n   * Gets whether the audio is muted.\n   * @returns {boolean} True if the audio is muted, false otherwise.\n   */\n  get muted(): boolean {\n    return this._muted;\n  }\n\n  /**\n   * Sets whether the audio is muted.\n   * @param {boolean} value - True to mute the audio, false to unmute.\n   */\n  set muted(value: boolean) {\n    this._muted = value;\n    this._setMuted();\n  }\n\n  private _channels: Map<string, IAudioChannel> = new Map();\n\n  /**\n   * Gets the map of audio channels.\n   * @returns {Map<string, IAudioChannel>} The map of audio channels.\n   */\n  get channels(): Map<string, IAudioChannel> {\n    return this._channels;\n  }\n\n  get music(): IAudioChannel {\n    return this._channels.get('music')!;\n  }\n\n  get sfx(): IAudioChannel {\n    return this._channels.get('sfx')!;\n  }\n\n  get voiceover(): IAudioChannel {\n    return this._channels.get('voiceover')!;\n  }\n\n  get vo(): IAudioChannel {\n    return this._channels.get('voiceover')!;\n  }\n\n  public destroy(): void {\n    this._channels.forEach((channel) => {\n      channel.destroy();\n    });\n    this._channels.clear();\n    this.onSoundStarted.disconnectAll();\n    this.onSoundEnded.disconnectAll();\n    this.onMuted.disconnectAll();\n    this.onMasterVolumeChanged.disconnectAll();\n    this.onChannelVolumeChanged.disconnectAll();\n\n    super.destroy();\n  }\n\n  /**\n   * Initializes the AudioManager.\n   * @param {IApplication} app\n   * @returns {Promise<void>}\n   */\n  public initialize(app: IApplication): Promise<void> {\n    if (typeof app?.manifest === 'object') {\n      this.addAllFromManifest(app.manifest);\n    }\n    return Promise.resolve(undefined);\n  }\n\n  /**\n   * Creates a new audio channel.\n   * @param {string} name\n   */\n  public createChannel(name: string): void {\n    if (this._channels.has(name)) {\n      throw new Error(`Channel with name ${name} already exists.`);\n    }\n    const channel = new AudioChannel(name, this);\n    this._channels.set(name, channel);\n  }\n\n  /**\n   * Sets the volume of the specified channel.\n   * @param {ChannelName | ChannelName[]} channelName\n   * @param {number} volume\n   */\n  public setChannelVolume(channelName: ChannelName | ChannelName[], volume: number): void {\n    if (!Array.isArray(channelName)) {\n      channelName = [channelName];\n    }\n    channelName.forEach((name) => this._setChannelVolume(name, volume));\n  }\n\n  /**\n   * Gets the audio channel with the specified name.\n   * @param {ChannelName} name\n   * @returns {IAudioChannel | undefined}\n   */\n  public getChannel(name: ChannelName): IAudioChannel | undefined {\n    return this._channels.get(name);\n  }\n\n  /**\n   * Mutes the audio.\n   */\n  public mute() {\n    this._muted = true;\n    this._setMuted();\n  }\n\n  /**\n   * Unmutes the audio.\n   */\n  public unmute() {\n    this._muted = false;\n    this._setMuted();\n  }\n\n  /**\n   * Pauses the audio.\n   */\n  public pause(): void {\n    this._paused = true;\n    this._setPaused();\n  }\n\n  /**\n   * Resumes the audio.\n   */\n  public resume(): void {\n    this._paused = false;\n    this._setPaused();\n  }\n\n  /**\n   * Adds all sound assets from the specified manifest.\n   * @param {AssetsManifest} manifest\n   */\n  public addAllFromManifest(manifest: AssetsManifest) {\n    manifest.bundles.forEach((bundle) => {\n      this.addAllFromBundle(bundle.name, manifest);\n    });\n  }\n\n  /**\n   * Adds all sound assets from the specified bundle.\n   * @param {string} bundleName\n   * @param {AssetsManifest | string | undefined} manifest\n   */\n  public addAllFromBundle(bundleName: string, manifest?: AssetsManifest | string | undefined) {\n    if (!manifest) {\n      manifest = this.app.manifest;\n    }\n    if (manifest === undefined || typeof manifest === 'string') {\n      throw new Error('Manifest is not available');\n    }\n    const bundle = manifest.bundles.find((b) => b.name === bundleName);\n    if (bundle === undefined) {\n      throw new Error(`Bundle with name ${bundleName} does not exist.`);\n    }\n    if (!Array.isArray(bundle?.assets)) {\n      bundle.assets = [bundle.assets];\n    }\n    bundle.assets.forEach((asset) => {\n      // detect sound assets by asset.src extension\n      let src = asset.src;\n      if (Array.isArray(src)) {\n        src = src[0];\n      }\n      const ext = (src as string).split('.').pop();\n      if (ext === 'mp3' || ext === 'ogg' || ext === 'wav' || ext === 'webm') {\n        this.add(asset);\n      }\n    });\n  }\n\n  /**\n   * Adds a sound asset to the AudioManager.\n   * @param {UnresolvedAsset} soundAsset\n   */\n  public add(soundAsset: UnresolvedAsset): void {\n    let alias = soundAsset.alias;\n    if (!Array.isArray(soundAsset.alias)) {\n      alias = [soundAsset.alias as string];\n    }\n    if (alias) {\n      const obj: SoundSourceMap = {};\n      (alias as string[]).forEach((a: string) => {\n        if (a === undefined) {\n          return;\n        }\n        // @ts-expect-error soundAsset is not a string error\n        obj[a] = soundAsset.src;\n      });\n      sound.add(obj);\n    }\n  }\n\n  /**\n   * Plays a sound with the specified ID in the specified channel.\n   * @param {string} soundId\n   * @param {ChannelName} channelName\n   * @param {PlayOptions} options\n   * @returns {Promise<IAudioInstance>}\n   */\n  public async play(soundId: string, channelName: ChannelName = 'sfx', options?: PlayOptions): Promise<IAudioInstance> {\n    if (this._idMap.has(soundId)) {\n      soundId = this._idMap.get(soundId) as string;\n    }\n    const channel = this._channels.get(channelName);\n    if (channel) {\n      soundId = this._verifySoundId(soundId);\n      const audioInstance = channel.add(soundId, new AudioInstance(soundId, channel, this));\n      const mediaInstance = await sound.play(soundId, options);\n      audioInstance.media = mediaInstance;\n      if (options?.volume !== undefined) {\n        mediaInstance.volume = options.volume;\n        audioInstance.onStart.connect(() => {\n          () => this._soundStarted(soundId, audioInstance, channelName);\n        });\n        audioInstance.onEnd.connect(() => {\n          () => this._soundEnded(soundId, audioInstance, channelName);\n        });\n      }\n      return audioInstance;\n    } else {\n      throw new Error(`Channel ${channelName} does not exist.`);\n    }\n  }\n\n  /**\n   * Stops a sound with the specified ID in the specified channel.\n   * @param {string} soundId\n   * @param {ChannelName} channelName\n   * @returns {IAudioInstance | undefined}\n   */\n  public stop(soundId: string, channelName: ChannelName = 'sfx'): IAudioInstance | undefined {\n    const channel = this._channels.get(channelName);\n    if (channel) {\n      return channel.remove(soundId);\n    } else {\n      throw new Error(`Channel ${channelName} does not exist.`);\n    }\n  }\n\n  /**\n   * Fades in a sound with the specified ID in the specified channel.\n   * @param {string} soundId\n   * @param {ChannelName} channelName\n   * @param {gsap.TweenVars} props\n   * @returns {Promise<gsap.core.Tween | null>}\n   */\n  public async fadeIn(\n    soundId: string,\n    channelName: ChannelName = 'music',\n    props: gsap.TweenVars,\n  ): Promise<gsap.core.Tween | null> {\n    const channel = this._channels.get(channelName);\n    if (channel) {\n      soundId = this._verifySoundId(soundId);\n    }\n    if (!channel?.get(soundId)) {\n      await this.play(soundId, channelName, { volume: 0 });\n    }\n    if (props?.volume === 0) {\n      Logger.warn('fadeIn volume is 0', soundId, channelName, props);\n    }\n    const fadeProps = Object.assign({ volume: props?.volume ?? 1, duration: 1, ease: 'linear.easeNone' }, props);\n    return this.fade(soundId, channelName, fadeProps);\n  }\n\n  /**\n   * Fades out a sound with the specified ID in the specified channel.\n   * @param {string} soundId\n   * @param {ChannelName} channelName\n   * @param {Partial<gsap.TweenVars>} props\n   * @returns {Promise<gsap.core.Tween | null>}\n   */\n  public async fadeOut(\n    soundId: string,\n    channelName: ChannelName = 'music',\n    props: Partial<gsap.TweenVars> = { volume: 0 },\n  ): Promise<gsap.core.Tween | null> {\n    if (!props) {\n      props = {};\n    }\n    if (props?.volume === undefined) {\n      props.volume = 0;\n    }\n    if (props?.volume > 0) {\n      Logger.warn('fadeOut volume should probably be 0', soundId, channelName, props);\n    }\n    const fadeProps = Object.assign({ volume: 0, duration: 1, ease: 'linear.easeNone' }, props);\n    return this.fade(soundId, channelName, fadeProps, true);\n  }\n\n  /**\n   * Crossfades between two sounds in the specified channel.\n   * @param {string} outSoundId\n   * @param {string} inSoundId\n   * @param {ChannelName} channelName\n   * @param {number} duration\n   * @returns {Promise<gsap.core.Tween | null>}\n   */\n  public async crossFade(\n    outSoundId: string,\n    inSoundId: string,\n    channelName: ChannelName = 'music',\n    duration: number = 2,\n  ): Promise<gsap.core.Tween | null> {\n    const crossFadeProps = { duration, ease: 'linear.easeNone' };\n    void this.fadeOut(outSoundId, channelName, crossFadeProps);\n    return this.fadeIn(inSoundId, channelName, crossFadeProps);\n  }\n\n  /**\n   * Fades a sound with the specified ID in the specified channel.\n   * @param {string} soundId\n   * @param {ChannelName} channelName\n   * @param {gsap.TweenVars} props\n   * @param {boolean} stopOnComplete\n   * @returns {Promise<gsap.core.Tween | null>}\n   */\n  public async fade(\n    soundId: string,\n    channelName: ChannelName = 'music',\n    props: gsap.TweenVars,\n    stopOnComplete: boolean = false,\n  ): Promise<gsap.core.Tween | null> {\n    const channel = this._channels.get(channelName);\n    if (channel) {\n      soundId = this._verifySoundId(soundId);\n    }\n    const soundInstance = channel?.get(soundId);\n    if (soundInstance) {\n      const tween = gsap.to(soundInstance, props);\n      tween.eventCallback('onComplete', () => {\n        if (stopOnComplete) {\n          this.stop(soundId, channelName);\n        }\n      });\n      return tween;\n    }\n    return null;\n  }\n\n  /**\n   * Restores the audio state after it has been suspended.\n   */\n  public restore() {\n    if (this._storedVolume !== undefined) {\n      this.masterVolume = this._storedVolume;\n    }\n    this.muted = this._muted;\n    this.resume();\n  }\n\n  /**\n   * Suspends the audio by setting the master volume to 0 and pausing all sounds.\n   */\n  public suspend() {\n    this._storedVolume = this._masterVolume;\n    this.masterVolume = 0;\n    this.pause();\n  }\n\n  public getAudioInstance(soundId: string, channelName: string = 'sfx'): IAudioInstance | undefined {\n    const channel = this._channels.get(channelName);\n    soundId = this._verifySoundId(soundId);\n    if (channel) {\n      return channel.get(soundId);\n    } else {\n      throw new Error(`Channel ${channelName} does not exist.`);\n    }\n  }\n\n  public load(soundId: string | string[], channelName: ChannelName = 'sfx', options?: PlayOptions): void {\n    if (!Array.isArray(soundId)) {\n      soundId = [soundId];\n    }\n    for (let id of soundId) {\n      if (this._idMap.has(id)) {\n        soundId = this._idMap.get(id) as string;\n      }\n      const channel = this._channels.get(channelName);\n      if (channel) {\n        id = this._verifySoundId(id);\n        // const audioInstance = new AudioInstance(id, channel, this);\n        const soundInstance = sound.find(id);\n        soundInstance.options = { ...options, autoPlay: false };\n        const audioInstance = channel.add(id, new AudioInstance(id, channel, this));\n        audioInstance.media = soundInstance.instances[0];\n        audioInstance.pause();\n      } else {\n        throw new Error(`Channel ${channelName} does not exist.`);\n      }\n    }\n  }\n\n  protected getCoreSignals(): string[] {\n    return ['onSoundStarted', 'onSoundEnded', 'onMuted', 'onMasterVolumeChanged', 'onChannelVolumeChanged'];\n  }\n\n  private _verifySoundId(soundId: string): string {\n    if (this._idMap.has(soundId)) {\n      return this._idMap.get(soundId) as string;\n    }\n    // try appending .mp3 or .ogg\n    if (!sound.exists(soundId)) {\n      // Logger.log(`Sound with ID ${soundId} does not exist. Trying different extensions.`);\n      if (sound.exists(soundId + '.mp3')) {\n        soundId += '.mp3';\n      } else if (sound.exists(soundId + '.ogg')) {\n        soundId += '.ogg';\n      } else if (sound.exists(soundId + '.wav')) {\n        soundId += '.wav';\n      } else {\n        throw new Error(`Sound with ID ${soundId} does not exist.`);\n      }\n    }\n    // Logger.log(`Sound with id:${originalId} is now mapped to id:${soundId}`);\n    this._idMap.set(soundId, soundId);\n    return soundId;\n  }\n\n  /**\n   * @private\n   */\n  private _setMuted(): void {\n    this._channels.forEach((channel) => {\n      channel.muted = this._muted;\n    });\n    if (this._muted) {\n      sound.muteAll();\n    } else {\n      sound.unmuteAll();\n    }\n    this.onMuted.emit(this._muted);\n  }\n\n  /**\n   * @private\n   */\n  private _setPaused(): void {\n    if (this._paused) {\n      sound.pauseAll();\n    } else {\n      sound.resumeAll();\n    }\n  }\n\n  /**\n   * Sets the volume of the specified channel.\n   * @param {ChannelName} channelName\n   * @param {number} volume\n   * @private\n   */\n  private _setChannelVolume(channelName: ChannelName, volume: number): void {\n    const channel = this._channels.get(channelName);\n    if (channel) {\n      channel.volume = volume;\n    } else {\n      throw new Error(`Channel ${channelName} does not exist.`);\n    }\n  }\n\n  /**\n   * Sound started event handler. Emit the onSoundStarted signal.\n   * @param {string} id\n   * @param {IAudioInstance} instance\n   * @param {ChannelName} channelName\n   * @private\n   */\n  private _soundStarted(id: string, instance: IAudioInstance, channelName: ChannelName): void {\n    // Logger.log(`${id} started in ${channelName} channel`);\n    this.onSoundStarted.emit({ id, instance, channelName });\n  }\n\n  /**\n   * Sound ended event handler. Emit the onSoundEnded signal.\n   * @param {string} id\n   * @param {IAudioInstance} instance\n   * @param {ChannelName} channelName\n   * @private\n   */\n  private _soundEnded(id: string, instance: IAudioInstance, channelName: ChannelName): void {\n    // Logger.log(`${id} ended in ${channelName} channel`);\n    this.onSoundEnded.emit({ id, instance, channelName });\n  }\n}\n"],"names":["instance","setInstance","sound","getInstance","WebAudioUtils","param","value","context","HTMLAudioContext","EventEmitter","_filters","id","_HTMLAudioInstance","parent","name","currentTime","paused","media","source","speed","volume","loop","muted","global","globalVolume","soundVolume","instanceVolume","pausedReal","options","start","end","Ticker","HTMLAudioInstance","HTMLAudioMedia","callback","onLoad","removeListeners","onAbort","onError","message","SoundSprite","complete","extensions","mimes","supported","validateFormats","typeOverrides","overrides","audio","formats","no","ext","canByExt","canByType","WebAudioInstance","filters","_a","filter","gain","duration","enabled","force","now","delta","progress","soundLength","err","Filterable","input","output","prevFilter","_WebAudioNodes","audioContext","bufferSource","analyser","orig","WebAudioNodes","WebAudioMedia","buffer","url","response","DOMAdapter","arrayBuffer","audioBufferReadyFn","_Sound","urls","file","path","a","b","data","results","alias","sprite","resolve","reject","resolve2","len","i","index","Sound","WebAudioContext","win","ctx","compressor","state","handleError","result","SoundLibrary","filtersAll","sourceOptions","options2","legacy","autoPause","assert","exists","getAlias","asset","src","soundAsset","ExtensionType","LoaderParserPriority","mime","sound2","_b","_sound","extensions$1","AudioChannel","manager","AudioInstance","channel","Signal","bindAllMethods","gsap","time","AudioManagerPlugin","Plugin","app","channelName","manifest","bundle","bundleName","obj","soundId","audioInstance","mediaInstance","props","Logger","fadeProps","outSoundId","inSoundId","crossFadeProps","stopOnComplete","soundInstance","tween"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]}