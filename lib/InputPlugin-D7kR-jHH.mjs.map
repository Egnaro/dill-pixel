{"version":3,"file":"InputPlugin-D7kR-jHH.mjs","sources":["../src/plugins/input/constants.ts","../src/plugins/input/InputPlugin.ts"],"sourcesContent":["export enum InputController {\n  Keyboard = 'keyboard',\n  Gamepad = 'gamepad',\n  Mouse = 'mouse',\n  Touch = 'touch',\n}\n","import { IApplication } from '../../core/Application';\nimport { Signal } from '../../signals';\nimport { IPlugin, Plugin } from '../Plugin';\nimport { Action, ActionContext } from './actions';\nimport { ActionDetail, ActionSignal, ActionsList } from './types';\nimport { InputController } from './constants';\n\nexport type InputManagerOptions = {\n  actions?: ActionsList;\n};\n\nexport interface IInputPlugin extends IPlugin {\n  activeGamepads: Map<string, Gamepad>;\n  activeControllers: Set<string>;\n  options: InputManagerOptions;\n  onGamepadConnected: Signal<(gamepad: Gamepad) => void>;\n  onGamepadDisconnected: Signal<(gamepad: Gamepad) => void>;\n  onControllerActivated: Signal<(controller: string) => void>;\n  onControllerDeactivated: Signal<(controller: string) => void>;\n  onContextChanged: Signal<(context: string | ActionContext) => void>;\n  context: string | ActionContext;\n\n  actions(action: string): ActionSignal;\n\n  sendAction(action: string, data?: any): void;\n\n  isControllerActive(controller: InputController): boolean;\n\n  isGamepadActive(gamepad: Gamepad): boolean;\n}\n\nconst defaultActions = [\n  Action.Up,\n  Action.Down,\n  Action.Left,\n  Action.Right,\n  Action.Action,\n  Action.Pause,\n  Action.Unpause,\n  Action.Start,\n  Action.Menu,\n  Action.Back,\n  Action.Next,\n];\n\nconst defaultOptions = {\n  actions: defaultActions,\n};\n\nexport class InputPlugin extends Plugin implements IInputPlugin {\n  public readonly id = 'input';\n  // properties\n  public activeGamepads = new Map<string, Gamepad>();\n  public activeControllers = new Set<string>([]);\n  public options: InputManagerOptions;\n  // signals\n  public onGamepadConnected: Signal<(gamepad: Gamepad) => void> = new Signal<(gamepad: Gamepad) => void>();\n  public onGamepadDisconnected: Signal<(gamepad: Gamepad) => void> = new Signal<(gamepad: Gamepad) => void>();\n  public onControllerActivated: Signal<(controller: string) => void> = new Signal<(controller: string) => void>();\n  public onControllerDeactivated: Signal<(controller: string) => void> = new Signal<(controller: string) => void>();\n  public onContextChanged: Signal<(context: string | ActionContext) => void> = new Signal<\n    (context: string | ActionContext) => void\n  >();\n  private _actionSignals: Map<string, ActionSignal> = new Map();\n\n  // private properties\n  private _context: string | ActionContext = ActionContext.General;\n\n  get context(): string | ActionContext {\n    return this._context;\n  }\n\n  set context(context: string | ActionContext) {\n    if (this._context === context) {\n      return;\n    }\n    this._context = context;\n    this.onContextChanged.emit(context);\n  }\n\n  async initialize(app: IApplication, options: InputManagerOptions = defaultOptions): Promise<void> {\n    this.options = { ...defaultOptions, ...options };\n    app.stage.eventMode = 'static';\n    app.stage.on('touchstart', this._onTouchStart);\n    app.stage.on('globalmousemove', this._onMouseMove);\n    window.addEventListener('keydown', this._onKeyDown);\n    window.addEventListener('gamepadconnected', this._onGamepadConnected);\n    window.addEventListener('gamepaddisconnected', this._onGamepadDisconnected);\n  }\n\n  destroy(): void {\n    // unregister all event listeners\n    this.app.stage.off('touchstart', this._onTouchStart);\n    this.app.stage.off('globalmousemove', this._onMouseMove);\n    window.removeEventListener('keydown', this._onKeyDown);\n    window.removeEventListener('gamepadconnected', this._onGamepadConnected);\n    window.removeEventListener('gamepaddisconnected', this._onGamepadDisconnected);\n\n    super.destroy();\n  }\n\n  isControllerActive(controller: InputController): boolean {\n    return this.activeControllers.has(controller);\n  }\n\n  isGamepadActive(gamepad: Gamepad): boolean {\n    return this.activeGamepads.has(gamepad.id);\n  }\n\n  actions<T = any>(action: string): ActionSignal<T> {\n    if (!this._actionSignals.has(action)) {\n      this._actionSignals.set(action, new Signal<(actionDetail: ActionDetail<T>) => void>());\n    }\n    return this._actionSignals.get(action)!;\n  }\n\n  sendAction<T = any>(actionId: string, data?: T): void {\n    return this.actions<T>(actionId).emit({ id: actionId, context: this.context, data });\n  }\n\n  setActionContext(context: string | ActionContext): string {\n    this.context = context;\n    return context;\n  }\n\n  protected getCoreFunctions(): string[] {\n    return ['setActionContext', 'sendAction', 'actions'];\n  }\n\n  protected getCoreSignals(): string[] {\n    return [\n      'onGamepadConnected',\n      'onGamepadDisconnected',\n      'onControllerActivated',\n      'onControllerDeactivated',\n      'onContextChanged',\n    ];\n  }\n\n  private _activateController(inputController: string): void {\n    if (this.activeControllers.has(inputController)) {\n      return;\n    }\n    this.activeControllers.add(inputController);\n    // emit the controller activated signal\n    this.onControllerActivated.emit(inputController);\n  }\n\n  private _deactivateController(inputController: InputController): void {\n    const wasControllerActive = this.activeControllers.has(inputController);\n    if (!wasControllerActive) {\n      return;\n    }\n    this.activeControllers.delete(inputController);\n    // emit the controller deactivated signal\n    this.onControllerDeactivated.emit(inputController);\n  }\n\n  private _activateGamepad(gamepad: Gamepad): void {\n    this.activeGamepads.set(gamepad.id, gamepad);\n  }\n\n  private _deactivateGamepad(gamepadId: string): void {\n    this.activeGamepads.delete(gamepadId);\n  }\n\n  private _onTouchStart(): void {\n    this._activateController(InputController.Touch);\n  }\n\n  private _onMouseMove(): void {\n    this._activateController(InputController.Mouse);\n  }\n\n  private _onKeyDown(): void {\n    this._activateController(InputController.Keyboard);\n  }\n\n  private _onGamepadConnected(event: GamepadEvent): void {\n    this._activateController(InputController.Gamepad);\n    // add the gamepad id just in case we need it (?)\n    this._activateController(event.gamepad.id);\n    this._activateGamepad(event.gamepad);\n    // emit the gamepad connected signal\n    this.onGamepadConnected.emit(event.gamepad);\n  }\n\n  private _onGamepadDisconnected(event: GamepadEvent): void {\n    // remove the gamepad\n    this._deactivateGamepad(event.gamepad.id);\n\n    // pause the game any time there is a controller disconnect\n    this.sendAction(Action.Pause);\n\n    // emit the gamepad disconnected signal\n    this.onGamepadDisconnected.emit(event.gamepad);\n\n    // check if all gamepads are disconnected\n    if (this.activeGamepads.size === 0) {\n      this._deactivateController(InputController.Gamepad);\n    }\n  }\n}\n"],"names":["InputController","defaultActions","Action","defaultOptions","InputPlugin","Plugin","Signal","ActionContext","context","app","options","controller","gamepad","action","actionId","data","inputController","gamepadId","event"],"mappings":"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"}