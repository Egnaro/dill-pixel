{"version":3,"file":"i18nPlugin-BPgURbw5.mjs","sources":["../src/plugins/i18nPlugin.ts"],"sourcesContent":["import {Assets} from 'pixi.js';\nimport {IApplication} from '../core/Application';\nimport {Signal} from '../signals';\nimport {Logger} from '../utils/console/Logger';\nimport {getDynamicModuleFromImportListItem} from '../utils/framework';\nimport {ImportListItem, ImportListItemModule} from '../utils/types';\nimport {IPlugin, Plugin} from './Plugin';\n\n/**\n * Type definition for i18n dictionary.\n */\nexport type i18nDict = Record<string, any>;\n\n/**\n * Type definition for i18n translation parameters.\n */\nexport type i18nTParams = { variant?: number | 'random' } & Record<string, any>;\n\n/**\n * Type definition for i18n import list item.\n */\ntype i18nImportListItem<T> = {\n  id: string;\n  namedExport?: string;\n  options?: any;\n  module?: ImportListItemModule<T>;\n} & {\n  json?: string;\n};\n\n/**\n * Type definition for i18n options.\n */\nexport type i18nOptions = {\n  defaultLocale: string;\n  locales: string[];\n  loadAll: boolean;\n  files: i18nImportListItem<i18nDict>[];\n};\n\n/**\n * Default options for i18n module.\n */\nconst defaultOptions: i18nOptions = {\n  defaultLocale: 'en',\n  locales: ['en'],\n  loadAll: false,\n  files: [],\n};\n\n/**\n * Interface for i18n module.\n */\nexport interface Ii18nPlugin extends IPlugin {\n  readonly locale: string;\n  readonly locales: string[];\n  onLocaleChanged: Signal<(locale: string) => void>;\n\n  setLocale(localeId: string): Promise<string>;\n\n  loadLocale(localeId: string): Promise<void>;\n\n  t(key: string, params?: i18nTParams, locale?: string): string;\n\n  parse(input: string, locale?: string): string;\n}\n\n/**\n * i18n module class.\n */\nexport class i18nPlugin extends Plugin implements Ii18nPlugin {\n  public readonly id = 'i18n';\n  public onLocaleChanged: Signal<(locale: string) => void> = new Signal<(locale: string) => void>();\n\n  private _dicts: Record<string, i18nDict> = {};\n  private _options: i18nOptions;\n\n  private _locale: string;\n\n  /**\n   * Getter for locale.\n   */\n  get locale(): string {\n    return this._locale;\n  }\n\n  get locales(): string[] {\n    return this._options.locales;\n  }\n\n  /**\n   * Initializes the i18n module.\n   * sets the default locale and loads the locale files.\n   * @param app The application instance.\n   * @param options The i18n options.\n   * @returns Promise<void>\n   */\n  public async initialize(app: IApplication, options: Partial<i18nOptions>): Promise<void> {\n    super.initialize(app);\n    this._options = { ...defaultOptions, ...options };\n    this._locale = this._options.defaultLocale;\n    if (this._options.loadAll && this._options.files.length > 0) {\n      const files = this._options.files.filter((file) => this._options.locales.includes(file.id));\n      for (const file of files) {\n        await this.loadLocale(file.id);\n      }\n    } else if (this._options.files.length > 0) {\n      await this.loadLocale(this._locale);\n    }\n  }\n\n  /**\n   * Sets the locale.\n   * If the locale is not loaded, it will load it first.\n   * @param localeId The locale id to set.\n   * @returns Promise<string>\n   */\n\n  async setLocale(localeId: string) {\n    this._locale = localeId;\n    await this._loadAndSetLocale(localeId);\n    return this._locale;\n  }\n\n  /**\n   * Translates a key into a string.\n   * If the key is not found, it will return an empty string.\n   * If the key is found, it will replace any placeholders in the string with the values from the params object.\n   * If the key contains a variant, it will select a random variant if the variant param is set to 'random'.\n   * If the key contains a number variant, it will select the variant based on the variant param.\n   * @param key The key to translate.\n   * @param params The parameters to replace in the string.\n   * @param locale The locale to use for translation.\n   * @returns The translated string.\n   */\n\n  t(key: string, params?: i18nTParams, locale: string = this._locale): string {\n    const dict = this._dicts[locale];\n    if (!dict) {\n      Logger.error(`i18n:: No dictionary loaded for current locale: ${locale}`);\n      return '';\n    }\n    let str = dict[key];\n\n    if (!str) {\n      Logger.error(`i18n:: No result found for the key ${key} in the locale: ${this._locale}`);\n      return '';\n    }\n\n    if (params) {\n      if (typeof params.variant === 'number' || params.variant === 'random') {\n        const match = /\\[(.*?)\\]/.exec(str);\n        if (match) {\n          // Split the string by the \"|\" character to get an array of variations.\n          const items = match[1].split('|');\n\n          // Get the selected variant based on the \"variation\" param.\n          const num = params.variant === 'random' ? Math.floor(Math.random() * items.length) : params.variant;\n\n          // Replace the original string with the selected variant\n          str = str.replace(match[0], items[num]);\n        }\n      }\n\n      // Iterate over all params to replace placeholders in the string.\n      for (const f in params) {\n        // Create a regular expression to match the placeholder for the current param.\n        const re = new RegExp(`{${f}}`, 'g');\n\n        //Replace all occurences of the placeholder with the value of the param.\n        str = str.replace(re, String(params[f]));\n      }\n    }\n\n    /**\n     * Return the final translated string.\n     */\n    return str;\n  }\n\n  /**\n   * Parses the input string and replaces anything in between {} braces, assuming it is a key in the dictionary.\n   * @param {string} input\n   * @param locale\n   * @returns {string}\n   */\n  parse(input: string, locale: string = this._locale): string {\n    const dict = this._dicts[locale];\n    if (!dict) {\n      Logger.error(`i18n:: No dictionary loaded for current locale: ${this._locale}`);\n      return '';\n    }\n    let str = input;\n    const matches = str.match(/{(.*?)}/g);\n    if (matches) {\n      matches.forEach((match) => {\n        const key = match.slice(1, -1);\n        if (dict[key]) {\n          str = str.replace(match, dict[key]);\n        }\n      });\n    }\n    return str;\n  }\n\n  /**\n   * Loads a locale.\n   * @param localeId The locale id to load.\n   * @returns Promise<void>\n   */\n  async loadLocale(localeId: string) {\n    const file = this._options.files.find((file) => localeId === file.id);\n    if (!file) {\n      Logger.error(`i18n:: Could not find locale file for ${localeId}`);\n      return;\n    }\n    this._dicts[localeId] = file.json\n      ? await Assets.load(file.json)\n      : await getDynamicModuleFromImportListItem(file as ImportListItem<i18nDict>);\n  }\n\n  protected getCoreFunctions(): string[] {\n    return ['t', 'setLocale'];\n  }\n\n  protected getCoreSignals(): string[] {\n    return ['onLocaleChanged'];\n  }\n\n  /**\n   * Loads and sets a locale.\n   * If the locale is not loaded, it will load it first.\n   * @param localeId The locale id to load and set.\n   */\n  private async _loadAndSetLocale(localeId: string) {\n    if (!this._dicts[localeId]) {\n      await this.loadLocale(localeId);\n    }\n    this.onLocaleChanged.emit(localeId);\n  }\n}\n"],"names":["defaultOptions","i18nPlugin","Plugin","Signal","app","options","files","file","localeId","key","params","locale","dict","Logger","str","match","items","num","f","re","input","matches","Assets","getDynamicModuleFromImportListItem"],"mappings":";;AA2CA,MAAMA,IAA8B;AAAA,EAClC,eAAe;AAAA,EACf,SAAS,CAAC,IAAI;AAAA,EACd,SAAS;AAAA,EACT,OAAO,CAAC;AACV;AAsBO,MAAMC,UAAmBC,EAA8B;AAAA,EAAvD,cAAA;AAAA,UAAA,GAAA,SAAA,GACL,KAAgB,KAAK,QACd,KAAA,kBAAoD,IAAIC,KAE/D,KAAQ,SAAmC;EAAC;AAAA;AAAA;AAAA;AAAA,EAQ5C,IAAI,SAAiB;AACnB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,UAAoB;AACtB,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,WAAWC,GAAmBC,GAA8C;AAIvF,QAHA,MAAM,WAAWD,CAAG,GACpB,KAAK,WAAW,EAAE,GAAGJ,GAAgB,GAAGK,EAAQ,GAC3C,KAAA,UAAU,KAAK,SAAS,eACzB,KAAK,SAAS,WAAW,KAAK,SAAS,MAAM,SAAS,GAAG;AAC3D,YAAMC,IAAQ,KAAK,SAAS,MAAM,OAAO,CAACC,MAAS,KAAK,SAAS,QAAQ,SAASA,EAAK,EAAE,CAAC;AAC1F,iBAAWA,KAAQD;AACX,cAAA,KAAK,WAAWC,EAAK,EAAE;AAAA,IAEtB;AAAA,MAAA,KAAK,SAAS,MAAM,SAAS,KAChC,MAAA,KAAK,WAAW,KAAK,OAAO;AAAA,EAEtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,UAAUC,GAAkB;AAChC,gBAAK,UAAUA,GACT,MAAA,KAAK,kBAAkBA,CAAQ,GAC9B,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,EAAEC,GAAaC,GAAsBC,IAAiB,KAAK,SAAiB;AACpE,UAAAC,IAAO,KAAK,OAAOD,CAAM;AAC/B,QAAI,CAACC;AACI,aAAAC,EAAA,MAAM,mDAAmDF,CAAM,EAAE,GACjE;AAEL,QAAAG,IAAMF,EAAKH,CAAG;AAElB,QAAI,CAACK;AACH,aAAAD,EAAO,MAAM,sCAAsCJ,CAAG,mBAAmB,KAAK,OAAO,EAAE,GAChF;AAGT,QAAIC,GAAQ;AACV,UAAI,OAAOA,EAAO,WAAY,YAAYA,EAAO,YAAY,UAAU;AAC/D,cAAAK,IAAQ,YAAY,KAAKD,CAAG;AAClC,YAAIC,GAAO;AAET,gBAAMC,IAAQD,EAAM,CAAC,EAAE,MAAM,GAAG,GAG1BE,IAAMP,EAAO,YAAY,WAAW,KAAK,MAAM,KAAK,OAAW,IAAAM,EAAM,MAAM,IAAIN,EAAO;AAG5F,UAAAI,IAAMA,EAAI,QAAQC,EAAM,CAAC,GAAGC,EAAMC,CAAG,CAAC;AAAA,QACxC;AAAA,MACF;AAGA,iBAAWC,KAAKR,GAAQ;AAEtB,cAAMS,IAAK,IAAI,OAAO,IAAID,CAAC,KAAK,GAAG;AAGnC,QAAAJ,IAAMA,EAAI,QAAQK,GAAI,OAAOT,EAAOQ,CAAC,CAAC,CAAC;AAAA,MACzC;AAAA,IACF;AAKO,WAAAJ;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAMM,GAAeT,IAAiB,KAAK,SAAiB;AACpD,UAAAC,IAAO,KAAK,OAAOD,CAAM;AAC/B,QAAI,CAACC;AACH,aAAAC,EAAO,MAAM,mDAAmD,KAAK,OAAO,EAAE,GACvE;AAET,QAAIC,IAAMM;AACJ,UAAAC,IAAUP,EAAI,MAAM,UAAU;AACpC,WAAIO,KACMA,EAAA,QAAQ,CAACN,MAAU;AACzB,YAAMN,IAAMM,EAAM,MAAM,GAAG,EAAE;AACzB,MAAAH,EAAKH,CAAG,MACVK,IAAMA,EAAI,QAAQC,GAAOH,EAAKH,CAAG,CAAC;AAAA,IACpC,CACD,GAEIK;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,WAAWN,GAAkB;AAC3B,UAAAD,IAAO,KAAK,SAAS,MAAM,KAAK,CAACA,MAASC,MAAaD,EAAK,EAAE;AACpE,QAAI,CAACA,GAAM;AACF,MAAAM,EAAA,MAAM,yCAAyCL,CAAQ,EAAE;AAChE;AAAA,IACF;AACA,SAAK,OAAOA,CAAQ,IAAID,EAAK,OACzB,MAAMe,EAAO,KAAKf,EAAK,IAAI,IAC3B,MAAMgB,EAAmChB,CAAgC;AAAA,EAC/E;AAAA,EAEU,mBAA6B;AAC9B,WAAA,CAAC,KAAK,WAAW;AAAA,EAC1B;AAAA,EAEU,iBAA2B;AACnC,WAAO,CAAC,iBAAiB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,kBAAkBC,GAAkB;AAChD,IAAK,KAAK,OAAOA,CAAQ,KACjB,MAAA,KAAK,WAAWA,CAAQ,GAE3B,KAAA,gBAAgB,KAAKA,CAAQ;AAAA,EACpC;AACF;"}