{"version":3,"file":"FocusManagerPlugin-CdbdAZa1.mjs","sources":["../src/plugins/focus/FocusManagerPlugin.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Bounds, Container, PointerEvents, PointLike } from 'pixi.js';\n\nimport { IApplication } from '../../core/Application';\nimport { PIXIContainer } from '../../pixi';\nimport { Signal } from '../../signals';\nimport { Logger } from '../../utils/console/Logger';\nimport { getLastMapEntry, getPreviousMapEntry } from '../../utils/map';\nimport { bindMethods } from '../../utils/methodBinding';\nimport { Constructor, PointLike as DillPixelPointLike } from '../../utils/types';\nimport type { IPlugin } from '../Plugin';\nimport { Plugin } from '../Plugin';\nimport { FocusOutliner, FocusOutlinerConfig, IFocusOutliner } from './FocusOutliner';\n\nexport type FocusManagerPluginOptions = {\n  outliner: IFocusOutliner | Partial<FocusOutlinerConfig> | typeof FocusOutliner;\n  usePixiAccessibility: boolean;\n};\n\nexport interface IFocusable extends EventEmitter {\n  isFocused: boolean;\n  isKeyDown: boolean;\n  focusEnabled: boolean;\n  tabIndex: number;\n  _accessibleDiv?: HTMLElement;\n\n  // pixi accessibility features\n  accessible: boolean;\n  accessibleType: string;\n  accessibleTitle: string;\n  accessibleHint: string;\n  accessiblePointerEvents?: PointerEvents;\n  accessibleChildren: boolean;\n\n  // signals\n  onFocusIn: Signal<(focusable: IFocusable) => void>;\n  onFocusOut: Signal<(focusable: IFocusable) => void>;\n  onFocus: Signal<(focusable: IFocusable) => void>;\n  onBlur: Signal<(focusable: IFocusable) => void>;\n  position: PointLike;\n\n  focusIn(): void;\n\n  focusOut(): void;\n\n  click(): void;\n\n  blur(): void;\n\n  getGlobalPosition(): PointLike;\n\n  getFocusArea(): Bounds;\n\n  getFocusPosition(): DillPixelPointLike | null;\n\n  getFocusSize(): DillPixelPointLike | null;\n}\n\nexport interface IFocusLayer {\n  currentFocusable: IFocusable | null;\n  defaultFocusable: IFocusable | null;\n  lastFocusable: IFocusable | null;\n  current: boolean;\n  availableFocusables: IFocusable[];\n\n  setCurrentFocusable(focusable: IFocusable | null): IFocusable | null;\n\n  hasFocusable(focusable: IFocusable | null): boolean;\n\n  setCurrent(): void;\n\n  addFocusable(focusable: IFocusable, isDefault?: boolean): void;\n\n  removeFocusable(focusable: IFocusable): void;\n\n  sortFocusables(): void;\n\n  next(): IFocusable | null;\n\n  prev(): IFocusable | null;\n}\n\nclass FocusLayer implements IFocusLayer {\n  public currentFocusable: IFocusable | null = null;\n  public lastFocusable: IFocusable | null = null;\n  public defaultFocusable: IFocusable | null = null;\n\n  private _focusables: IFocusable[] = [];\n  private _currentIndex: number = 0;\n\n  constructor(public id: string | number) {}\n\n  private _current: boolean = false;\n\n  set current(value: boolean) {\n    this._current = value;\n    this.setCurrent();\n  }\n\n  public get availableFocusables(): IFocusable[] {\n    return this._focusables.filter((f) => f.focusEnabled);\n  }\n\n  public setCurrent() {\n    if (this._current) {\n      if (!this.defaultFocusable) {\n        this.defaultFocusable = this._focusables[0];\n      }\n      this.sortFocusables();\n    } else {\n      for (let i = 0; i < this._focusables.length; i++) {\n        this._focusables[i].accessible = false;\n      }\n    }\n  }\n\n  public hasFocusable(focusable: IFocusable | null) {\n    if (!focusable) {\n      return false;\n    }\n    return this._focusables.indexOf(focusable) > -1;\n  }\n\n  public addFocusable(focusable: IFocusable, isDefault: boolean = false): void {\n    this._focusables.push(focusable);\n    if (isDefault) {\n      this.defaultFocusable = focusable;\n    }\n    if (this._current) {\n      this.sortFocusables();\n    }\n  }\n\n  public removeFocusable(focusable: IFocusable) {\n    const index = this._focusables.indexOf(focusable);\n    if (index !== -1) {\n      this._focusables.splice(index, 1);\n\n      if (this.currentFocusable === focusable) {\n        this.currentFocusable = null;\n      }\n\n      if (this.lastFocusable === focusable) {\n        this.lastFocusable = null;\n      }\n\n      if (this.defaultFocusable === focusable) {\n        this.defaultFocusable = null;\n      }\n    }\n    if (this._current) {\n      this.sortFocusables();\n    }\n  }\n\n  public sortFocusables() {\n    for (let i = 0; i < this._focusables.length; i++) {\n      this._focusables[i].accessible = this._current;\n      this._focusables[i].tabIndex = this._current ? Math.max(i, 1) + 1 : -1;\n      if (this._focusables[i] === this.defaultFocusable) {\n        this._focusables[i].tabIndex = this._current ? 1 : -1;\n      }\n    }\n    if (this._current) {\n      this._focusables.sort((a, b) => a.tabIndex - b.tabIndex);\n    }\n  }\n\n  setCurrentFocusable(focusable: IFocusable | null) {\n    if (focusable) {\n      this._currentIndex = this._focusables.indexOf(focusable);\n      this.currentFocusable = focusable;\n    } else {\n      this._currentIndex = -1;\n      this.currentFocusable = null;\n    }\n    return this.currentFocusable;\n  }\n\n  public next() {\n    this._currentIndex = this._currentIndex + 1;\n    if (this._currentIndex >= this._focusables.length) {\n      this._currentIndex = 0;\n    }\n    this.currentFocusable = this._focusables[this._currentIndex];\n    return this.currentFocusable;\n  }\n\n  public prev() {\n    this._currentIndex = this._currentIndex - 1;\n    if (this._currentIndex < 0) {\n      this._currentIndex = this._focusables.length - 1;\n    }\n    this.currentFocusable = this._focusables[this._currentIndex];\n    return this.currentFocusable;\n  }\n}\n\nexport type FocusChangeDetail = { layer: string | number | null; focusable: IFocusable | null };\n\nexport interface IFocusManagerPlugin extends IPlugin {\n  readonly view: Container;\n  readonly layerCount: number;\n  readonly currentLayerId: string | number | null;\n  readonly active: boolean;\n  readonly layers: Map<string | number, IFocusLayer>;\n\n  onFocusManagerActivated: Signal<() => void>;\n  onFocusManagerDeactivated: Signal<() => void>;\n  onFocusLayerChange: Signal<(currentLayerId: string | number) => void>;\n  onFocusChange: Signal<(detail: FocusChangeDetail) => void>;\n\n  enabled: boolean;\n\n  restart(): void;\n\n  focus(focusable: IFocusable): void;\n\n  forceFocus(focusable: IFocusable): void;\n\n  setFocus(focusable: IFocusable): void;\n\n  addFocusLayer(layerId?: string | number, setAsCurrent?: boolean, focusables?: IFocusable | IFocusable[]): IFocusLayer;\n\n  removeFocusLayer(layerId?: string | number): void;\n\n  setFocusLayer(layerId: string | number): void;\n\n  setLayerOrder(layerIds: (string | number)[]): void;\n\n  add(focusable: IFocusable | IFocusable[], layerId?: string | number, isDefault?: boolean): void;\n\n  addFocusable(focusable: IFocusable | IFocusable[], layerId?: string | number, isDefault?: boolean): void;\n\n  remove(focusable: IFocusable | IFocusable[]): void;\n\n  removeFocusable(focusable: IFocusable | IFocusable[]): void;\n\n  deactivate(): void;\n\n  clearFocus(): void;\n\n  removeAllFocusLayers(): void;\n}\n\nexport class FocusManagerPlugin extends Plugin implements IFocusManagerPlugin {\n  public override readonly id: string = 'focus';\n  public readonly view = new Container();\n  // signals\n  public onFocusManagerActivated: Signal<() => void> = new Signal<() => void>();\n  public onFocusManagerDeactivated: Signal<() => void> = new Signal<() => void>();\n  public onFocusLayerChange: Signal<(currentLayerId: string | number) => void> = new Signal<\n    (currentLayerId: string | number) => void\n  >();\n  public onFocusChange: Signal<(detail: FocusChangeDetail) => void> = new Signal<(detail: FocusChangeDetail) => void>();\n  //\n  private _focusOutliner: IFocusOutliner;\n  private _focusTarget: IFocusable | null = null;\n  private _keyboardActive: boolean = false;\n  private _options: FocusManagerPluginOptions;\n\n  private _layers: Map<string | number, IFocusLayer> = new Map();\n\n  public get layers(): Map<string | number, IFocusLayer> {\n    return this._layers;\n  }\n\n  private _currentLayerId: string | number | null = null;\n\n  get currentLayerId(): string | number | null {\n    return this._currentLayerId;\n  }\n\n  private _active: boolean = false;\n\n  get active(): boolean {\n    return this._active;\n  }\n\n  private _enabled: boolean = true;\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  set enabled(value: boolean) {\n    this._enabled = value;\n  }\n\n  public get layerCount(): number {\n    return this._layers.size;\n  }\n\n  public initialize(app: IApplication): void {\n    bindMethods(this, 'removeAllFocusLayers', '_handleGlobalMouseMove', '_handleGlobalPointerDown');\n    const options: Partial<FocusManagerPluginOptions> = app.config?.focusOptions || {};\n    options.usePixiAccessibility = options.usePixiAccessibility ?? false;\n    this._focusOutliner =\n      typeof options?.outliner === 'function'\n        ? new (options.outliner as Constructor<IFocusOutliner>)()\n        : new FocusOutliner(options.outliner as Partial<FocusOutlinerConfig>);\n\n    this._options = options as FocusManagerPluginOptions;\n\n    this.view.addChild(this._focusOutliner as unknown as PIXIContainer);\n\n    this._updatePixiAccessibility();\n\n    this._setupKeyboardListeners();\n    this._setupAppListeners();\n  }\n\n  public destroy(): void {\n    this._removeGlobalListeners();\n    this.deactivate();\n    this._focusOutliner.destroy();\n    this._layers.clear();\n    super.destroy();\n  }\n\n  public deactivate(): void {\n    this._setTarget(null);\n    this._updateOutliner();\n    this._active = false;\n  }\n\n  public add(focusable: IFocusable | IFocusable[], layerId?: string | number, isDefault: boolean = false): void {\n    this.addFocusable(focusable, layerId, isDefault);\n  }\n\n  public addFocusable(\n    focusable: IFocusable | IFocusable[],\n    layerId?: string | number | null | undefined,\n    isDefault: boolean = false,\n  ): void {\n    if (layerId === undefined || layerId == null) {\n      layerId = this._currentLayerId ?? null;\n    }\n    const layer = this._layers.get(layerId!);\n    if (!layer) {\n      Logger.error(`Layer with ID ${layerId} does not exist.`);\n      return;\n    }\n    if (!Array.isArray(focusable)) {\n      focusable = [focusable];\n    }\n    (focusable as IFocusable[]).forEach((f, idx) => {\n      layer.addFocusable(f, idx === 0 && isDefault);\n    });\n\n    if (this._active && isDefault) {\n      this._setTarget(layer.currentFocusable || layer.defaultFocusable || null, !this._active);\n    }\n  }\n\n  public remove(focusable: IFocusable | IFocusable[]) {\n    this.removeFocusable(focusable);\n  }\n\n  public removeFocusable(focusable: IFocusable | IFocusable[]) {\n    if (!Array.isArray(focusable)) {\n      focusable = [focusable];\n    }\n    this._layers.forEach((layer) => {\n      (focusable as IFocusable[]).forEach((f) => {\n        layer.removeFocusable(f);\n      });\n    });\n  }\n\n  public setLayerOrder(layerIds: (string | number)[]): void {\n    const newLayers: Map<string | number, IFocusLayer> = new Map();\n    layerIds.forEach((layerId) => {\n      if (!this._layers.has(layerId)) {\n        throw new Error(`Layer with ID ${layerId} does not exist.`);\n      }\n      newLayers.set(layerId, this._layers.get(layerId)!);\n    });\n    this._layers = newLayers;\n  }\n\n  public addFocusLayer(\n    layerId?: string | number,\n    setAsCurrent: boolean = true,\n    focusables?: IFocusable | IFocusable[],\n  ): IFocusLayer {\n    if (layerId === undefined) {\n      layerId = this._layers.size;\n    }\n    let newLayer;\n    if (this._layers.has(layerId)) {\n      Logger.error(`Layer with ID ${layerId} already exists.`);\n      newLayer = this._layers.get(layerId)!;\n    } else {\n      newLayer = new FocusLayer(layerId);\n      this._layers.set(layerId, newLayer);\n    }\n\n    if (setAsCurrent || this._currentLayerId === null) {\n      this.setFocusLayer(layerId);\n    }\n    if (focusables) {\n      this.addFocusable(focusables, layerId);\n    }\n    return newLayer;\n  }\n\n  public removeFocusLayer(layerId?: string | number, removeTopLayerIfUndefined = true): void {\n    if (layerId === undefined && removeTopLayerIfUndefined) {\n      return this._removeTopLayer();\n    }\n    if (!this._layers.has(layerId!)) {\n      throw new Error(`Layer with ID ${layerId} does not exist.`);\n    }\n    const nextLayerId = getPreviousMapEntry(this._layers, layerId)?.[0];\n    this._layers.delete(layerId!);\n    this._postDelete(nextLayerId);\n  }\n\n  public restart(reverse: boolean = false) {\n    const layer = this._getCurrentLayer();\n    this._setTarget(\n      reverse\n        ? layer?.availableFocusables?.[layer?.availableFocusables?.length - 1] || null\n        : layer?.availableFocusables?.[0] || null,\n    );\n  }\n\n  public forceFocus(focusable: IFocusable) {\n    this.focus(focusable);\n  }\n\n  public setFocus(focusable: IFocusable) {\n    this.focus(focusable);\n  }\n\n  public focus(focusable: IFocusable) {\n    this._setTarget(focusable);\n  }\n\n  public setFocusLayer(layerId: string | number): void {\n    if (!this._layers.has(layerId)) {\n      throw new Error(`Layer with ID ${layerId} does not exist.`);\n    }\n    this._currentLayerId = layerId;\n    const currentLayer = this._getCurrentLayer();\n    if (currentLayer) {\n      currentLayer.current = true;\n      this._layers.forEach((layer, key) => {\n        layer.current = key === layerId;\n      });\n      currentLayer.sortFocusables();\n      this._setTarget(currentLayer.currentFocusable || currentLayer.defaultFocusable || null, !this._active);\n    }\n    this.onFocusLayerChange.emit(this._currentLayerId);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public postInitialize(_app: IApplication): Promise<void> | void {}\n\n  public clearFocus() {\n    this._setTarget(null);\n  }\n\n  public removeAllFocusLayers(): void {\n    this._layers.clear();\n    this._setTarget(null);\n  }\n\n  _onKeyDown(e: KeyboardEvent) {\n    if (!this._enabled || (e.key !== 'Tab' && e.key !== 'Enter' && e.key !== ' ' && e.key !== 'Space')) {\n      return;\n    }\n    if (!this._options.usePixiAccessibility) {\n      e.preventDefault();\n      if (e.key === 'Tab') {\n        const layer = this._getCurrentLayer();\n        const focusables = layer?.availableFocusables;\n        if (!focusables) {\n          return;\n        }\n        if (!this._keyboardActive) {\n          this._activate();\n          this._setTarget(layer.currentFocusable || layer.defaultFocusable || null);\n        } else {\n          // check if we're on the last focusable\n          if (e.shiftKey) {\n            this._prev();\n          } else {\n            this._next();\n          }\n        }\n      } else if (e.key === 'Enter' || e.key === ' ' || e.key === 'Space') {\n        if (this._focusTarget && this._focusTarget.isFocused) {\n          this._focusTarget.emit('pointerdown', { type: 'pointerdown' });\n        }\n      }\n    }\n  }\n\n  _onKeyUp(e: KeyboardEvent) {\n    if (!this._enabled || (e.key !== 'Enter' && e.key !== ' ' && e.key !== 'Space')) {\n      return;\n    }\n    if (!this._options.usePixiAccessibility) {\n      e.preventDefault();\n      if (this._focusTarget && this._focusTarget.isFocused) {\n        this._focusTarget.emit('click', { type: 'click' });\n        this._focusTarget.emit('pointerup', { type: 'pointerup' });\n      }\n    }\n  }\n\n  _onMouseMove(e: MouseEvent) {\n    if (e.movementX === 0 && e.movementY === 0) {\n      return;\n    }\n    this._deactivate();\n  }\n\n  protected getCoreFunctions(): string[] {\n    return [\n      'addFocusable',\n      'removeFocusable',\n      'setLayerOrder',\n      'addFocusLayer',\n      'removeFocusLayer',\n      'setFocusLayer',\n      'setFocus',\n      'focus',\n      'clearFocus',\n      'removeAllFocusLayers',\n    ];\n  }\n\n  protected getCoreSignals(): string[] {\n    return ['onFocusManagerActivated', 'onFocusManagerDeactivated', 'onFocusLayerChange', 'onFocusChange'];\n  }\n\n  private _next() {\n    const nextTarget = this._getCurrentLayer()?.next();\n    if (!nextTarget) {\n      Logger.error('FocusManager:: _next():: No focusable found in the current layer.');\n      return;\n    }\n    this._setTarget(nextTarget);\n  }\n\n  private _prev() {\n    const nextTarget = this._getCurrentLayer()?.prev();\n    if (!nextTarget) {\n      Logger.error('FocusManager:: _prev():: No focusable found in the current layer.');\n      return;\n    }\n    this._setTarget(nextTarget);\n  }\n\n  private _deactivate() {\n    if (!this._keyboardActive) {\n      return;\n    }\n    this._keyboardActive = false;\n  }\n\n  private _activate() {\n    if (this._keyboardActive) {\n      return;\n    }\n    this._keyboardActive = true;\n    globalThis.document.addEventListener('mousemove', this._onMouseMove, true);\n  }\n\n  private _updatePixiAccessibility() {\n    // @ts-expect-error _div is protected\n    this.app.renderer.accessibility._div.setAttribute('id', 'pixi-accessibility');\n    if (!this._options.usePixiAccessibility) {\n      // @ts-expect-error _div is protected\n      this.app.renderer.accessibility._div.setAttribute('disabled', 'disabled');\n      this.app.renderer.accessibility.destroy();\n      globalThis.addEventListener('keydown', this._onKeyDown, false);\n      globalThis.addEventListener('keyup', this._onKeyUp, false);\n    }\n  }\n\n  private _getCurrentLayer(): IFocusLayer | null {\n    return this._currentLayerId != null ? this._layers.get(this._currentLayerId) || null : null;\n  }\n\n  private _removeTopLayer() {\n    const layerId = getLastMapEntry(this._layers)?.[0];\n    const nextLayerId = getPreviousMapEntry(this._layers, layerId)?.[0];\n    if (layerId === undefined) {\n      return;\n    }\n    this._layers.delete(layerId);\n    this._postDelete(nextLayerId);\n  }\n\n  private _postDelete(nextLayerId: string | number | undefined) {\n    if (this._layers.size === 0) {\n      this._currentLayerId = null;\n    } else if (nextLayerId !== undefined) {\n      this.setFocusLayer(nextLayerId);\n    }\n  }\n\n  private _setTarget(focusTarget: IFocusable | null, setInactiveOnNull: boolean = true) {\n    const layer = this._getCurrentLayer();\n    const oldFocusTarget = this._focusTarget;\n    this._focusTarget = focusTarget;\n    // call the focus out methods on the current focusable, which is changing\n    if (oldFocusTarget && this._active) {\n      this._clearFocusTarget(oldFocusTarget);\n    }\n    if (this.app.renderer.accessibility.isActive || this._keyboardActive) {\n      if (this._focusTarget) {\n        if (!this._active) {\n          this._active = true;\n        }\n        if (this._options.usePixiAccessibility && !this._focusTarget._accessibleDiv) {\n          this.app.renderer.accessibility.postrender();\n        }\n\n        if (this._options.usePixiAccessibility) {\n          this.app.ticker.addOnce(() => {\n            this._focusTarget?._accessibleDiv?.focus();\n          });\n        }\n\n        if (layer?.hasFocusable(focusTarget)) {\n          // call focusIn on the focusable\n          if (this._focusTarget) {\n            this._focusTarget.focusIn();\n            this._focusTarget.isFocused = true;\n            this._focusTarget.onFocusIn.emit(this._focusTarget);\n            layer.setCurrentFocusable(this._focusTarget);\n            this._updateOutliner();\n          }\n        } else {\n          Logger.warn(\n            `The focusable`,\n            focusTarget,\n            `does not exist on the current focus layer: ${this._currentLayerId}`,\n          );\n        }\n      } else {\n        this._focusOutliner.clear();\n      }\n    } else {\n      this._focusOutliner.clear();\n      if (this._active && setInactiveOnNull) {\n        this._active = false;\n        this.onFocusManagerDeactivated.emit();\n        return;\n      }\n    }\n\n    if (oldFocusTarget !== focusTarget && this._active) {\n      this.onFocusChange.emit({ focusable: this._focusTarget, layer: this._currentLayerId });\n    }\n  }\n\n  private _clearFocusTarget(focusTarget: IFocusable | null) {\n    if (!focusTarget) {\n      return;\n    }\n    focusTarget.focusOut();\n    focusTarget.isFocused = false;\n    focusTarget.onFocusOut.emit(focusTarget);\n    focusTarget.blur();\n    focusTarget.onBlur.emit(focusTarget);\n  }\n\n  private _setupKeyboardListeners(): void {\n    window.addEventListener('keydown', this._onKeyDown, false);\n\n    this._addGlobalListeners();\n  }\n\n  private _addGlobalListeners() {\n    globalThis.document.addEventListener('mousemove', this._handleGlobalMouseMove);\n    globalThis.document.addEventListener('pointerdown', this._handleGlobalPointerDown);\n  }\n\n  private _removeGlobalListeners() {\n    globalThis.document.removeEventListener('mousemove', this._handleGlobalMouseMove);\n    globalThis.document.removeEventListener('pointerdown', this._handleGlobalPointerDown);\n  }\n\n  private _handleGlobalMouseMove() {\n    if (!this._enabled) {\n      return;\n    }\n    if (this._active) {\n      this.deactivate();\n    }\n  }\n\n  private _handleGlobalPointerDown() {\n    if (!this._enabled) {\n      return;\n    }\n    if (this._active) {\n      this.deactivate();\n    }\n    if (this.app.renderer.accessibility.isActive || this._keyboardActive) {\n      // @ts-expect-error _deactivate is protected\n      this.app.renderer.accessibility._deactivate();\n      this._deactivate();\n    }\n  }\n\n  private _setupAppListeners(): void {\n    this.app.scenes.onSceneChangeStart.connect(this.removeAllFocusLayers);\n  }\n\n  private _updateOutliner() {\n    if (this._focusTarget) {\n      this._focusOutliner.position.set(this._focusTarget.position.x, this._focusTarget.position.y);\n      this._focusOutliner.draw(this._focusTarget);\n    } else {\n      this._focusOutliner.clear();\n    }\n  }\n}\n"],"names":["FocusLayer","id","value","f","i","focusable","isDefault","index","a","b","FocusManagerPlugin","Plugin","Container","Signal","app","bindMethods","options","_a","FocusOutliner","layerId","layer","Logger","idx","layerIds","newLayers","setAsCurrent","focusables","newLayer","removeTopLayerIfUndefined","nextLayerId","getPreviousMapEntry","reverse","_b","_c","currentLayer","key","_app","nextTarget","getLastMapEntry","focusTarget","setInactiveOnNull","oldFocusTarget"],"mappings":"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"}