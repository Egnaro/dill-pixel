{"version":3,"file":"WebEventsPlugin-BwWIJvSM.mjs","sources":["../src/plugins/WebEventsPlugin.ts"],"sourcesContent":["import { Application } from '../core/Application';\nimport { Signal } from '../signals';\nimport { bindAllMethods } from '../utils/methodBinding';\nimport { Size } from '../utils/types';\nimport type { IPlugin } from './Plugin';\nimport { Plugin } from './Plugin';\n\nexport interface IWebEventsPlugin extends IPlugin {\n  onResize: Signal<(size: { width: number; height: number }) => void>;\n  onVisibilityChanged: Signal<(visible: boolean) => void>;\n}\n\n/**\n * Maintains a list of callbacks for specific web events and invokes callbacks when event occurs.\n */\nexport class WebEventsPlugin extends Plugin implements IWebEventsPlugin {\n  public readonly id = 'webEvents';\n\n  // signals\n  public onResize: Signal<(size: Size) => void> = new Signal<(size: Size) => void>();\n  public onVisibilityChanged: Signal<(visible: boolean) => void> = new Signal<(visible: boolean) => void>();\n\n  /**\n   * Creates callback arrays and registers to web events.\n   */\n  constructor() {\n    super();\n    bindAllMethods(this);\n  }\n\n  get app(): Application {\n    return Application.getInstance();\n  }\n\n  public initialize(): void {\n    document.addEventListener('visibilitychange', this._onVisibilityChanged, false);\n    window.addEventListener('resize', this._onResize);\n    document.addEventListener('fullscreenchange', this._onResize);\n  }\n\n  public destroy() {\n    document.removeEventListener('visibilitychange', this._onVisibilityChanged, false);\n    window.removeEventListener('resize', this._onResize);\n    document.removeEventListener('fullscreenchange', this._onResize);\n  }\n\n  protected getCoreSignals(): string[] {\n    return ['onResize', 'onVisibilityChanged'];\n  }\n\n  /**\n   * Called when the browser visibility changes. Passes the `hidden` flag of the document to all callbacks.\n   */\n  private _onVisibilityChanged(): void {\n    this.onVisibilityChanged.emit(!document.hidden);\n  }\n\n  /**\n   * Called when the browser resizes.\n   */\n  private _onResize(): void {\n    const el = this.app.renderer.canvas?.parentElement;\n    let screenWidth = window.innerWidth;\n    let screenHeight = window.innerHeight;\n    if (el && el?.getBoundingClientRect()) {\n      screenWidth = el.offsetWidth;\n      screenHeight = el.offsetHeight;\n    }\n    this.onResize.emit({ width: screenWidth, height: screenHeight });\n  }\n}\n"],"names":["WebEventsPlugin","Plugin","Signal","bindAllMethods","Application","el","_a","screenWidth","screenHeight"],"mappings":";AAeO,MAAMA,UAAwBC,EAAmC;AAAA;AAAA;AAAA;AAAA,EAUtE,cAAc;AACN,aAVR,KAAgB,KAAK,aAGd,KAAA,WAAyC,IAAIC,KAC7C,KAAA,sBAA0D,IAAIA,KAOnEC,EAAe,IAAI;AAAA,EACrB;AAAA,EAEA,IAAI,MAAmB;AACrB,WAAOC,EAAY;EACrB;AAAA,EAEO,aAAmB;AACxB,aAAS,iBAAiB,oBAAoB,KAAK,sBAAsB,EAAK,GACvE,OAAA,iBAAiB,UAAU,KAAK,SAAS,GACvC,SAAA,iBAAiB,oBAAoB,KAAK,SAAS;AAAA,EAC9D;AAAA,EAEO,UAAU;AACf,aAAS,oBAAoB,oBAAoB,KAAK,sBAAsB,EAAK,GAC1E,OAAA,oBAAoB,UAAU,KAAK,SAAS,GAC1C,SAAA,oBAAoB,oBAAoB,KAAK,SAAS;AAAA,EACjE;AAAA,EAEU,iBAA2B;AAC5B,WAAA,CAAC,YAAY,qBAAqB;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKQ,uBAA6B;AACnC,SAAK,oBAAoB,KAAK,CAAC,SAAS,MAAM;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA,EAKQ,YAAkB;;AACxB,UAAMC,KAAKC,IAAA,KAAK,IAAI,SAAS,WAAlB,gBAAAA,EAA0B;AACrC,QAAIC,IAAc,OAAO,YACrBC,IAAe,OAAO;AACtB,IAAAH,MAAMA,KAAA,QAAAA,EAAI,6BACZE,IAAcF,EAAG,aACjBG,IAAeH,EAAG,eAEpB,KAAK,SAAS,KAAK,EAAE,OAAOE,GAAa,QAAQC,GAAc;AAAA,EACjE;AACF;"}