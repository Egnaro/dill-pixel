{"version":3,"file":"PopupManagerPlugin-DbOR6uGT.mjs","sources":["../src/plugins/popups/PopupManagerPlugin.ts"],"sourcesContent":["import {IApplication} from '../../core/Application';\nimport {Container} from '../../display/Container';\nimport type {PopupConfig, PopupConstructor} from '../../display/Popup';\nimport {IPopup} from '../../display/Popup';\nimport {Signal} from '../../signals';\nimport {getLastMapEntry} from '../../utils/map';\nimport {bindAllMethods} from '../../utils/methodBinding';\nimport type {IPlugin} from '../Plugin';\nimport {Plugin} from '../Plugin';\n\n/**`\n * Interface for PopupManager\n */\nexport interface IPopupManagerPlugin extends IPlugin {\n  readonly view: Container; // The view of the PopupManager\n  readonly current: IPopup | undefined; // The current active popup\n  readonly popupCount: number; // The count of popups\n  readonly currentPopupId: string | number | undefined; // The id of the current popup\n  // signals\n  onShowPopup: Signal<(detail: PopupSignalDetail) => void>; // Signal for when a popup is shown\n  onHidePopup: Signal<(detail: PopupSignalDetail) => void>; // Signal for when a popup is hidden\n\n  // methods\n  addPopup(id: string | number, popup: PopupConstructor): void; // Add a popup\n\n  showPopup<T = any>(id: string | number, config: Partial<PopupConfig<T>>): Promise<IPopup<T> | undefined>;\n\n  hidePopup<T = any>(id: string | number, data?: any): Promise<IPopup<T> | undefined>; // Hide a popup\n\n  removeAllPopups(animate?: boolean): void; // Remove all popups\n}\n\nexport type PopupSignalDetail<T = any> = { id: string | number; data?: T };\n\n/**\n * PopupManager\n */\n\nexport class PopupManagerPlugin extends Plugin implements IPopupManagerPlugin {\n  public readonly id: string = 'popups'; // The id of the PopupManager\n  public readonly view = new Container(); // The view of the PopupManager\n\n  // signals\n  public onShowPopup: Signal<(detail: PopupSignalDetail) => void> = new Signal<(detail: PopupSignalDetail) => void>(); // Signal for when a popup is shown\n  public onHidePopup: Signal<(detail: PopupSignalDetail) => void> = new Signal<(detail: PopupSignalDetail) => void>(); // Signal for when a popup is hidden\n  private _popups: Map<string | number, PopupConstructor> = new Map(); // Map of popups\n  private _activePopups: Map<string | number, IPopup> = new Map(); // Map of active popups\n\n  private _currentPopupId: string | number | undefined = undefined; // The id of the current popup\n\n  get currentPopupId(): string | number | undefined {\n    return this._currentPopupId;\n  }\n\n  get popupCount(): number {\n    return this._popups.size;\n  }\n\n  get current(): IPopup | undefined {\n    if (this._currentPopupId === undefined) {\n      return undefined;\n    }\n    return this._activePopups.get(this._currentPopupId);\n  }\n\n  /**\n   * Initialize the PopupManager\n   * @param _app\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  initialize(_app: IApplication): void {\n    bindAllMethods(this);\n    this.view.name = 'PopupManager';\n    this._setupAppListeners();\n  }\n\n  /**\n   * Destroy the PopupManager\n   */\n  destroy(): void {\n    this._activePopups.clear();\n    super.destroy();\n  }\n\n  /**\n   * Add a popup\n   * @param id - The id of the popup\n   * @param popup - The popup constructor\n   */\n  addPopup<T = any>(id: string | number, popup: PopupConstructor<T>): void {\n    this._popups.set(id, popup);\n  }\n\n  /**\n   * Show a popup\n   * @param id - The id of the popup\n   * @param config - The configuration for the popup\n   * @returns a promise resolving to the popup, if it exists\n   */\n  async showPopup<T = any>(id: string | number, config: Partial<PopupConfig<T>> = {}): Promise<IPopup<T> | undefined> {\n    const popup: PopupConstructor<T> | undefined = this._popups.get(id);\n    if (popup) {\n      config.id = id;\n      const instance = this.view.add.existing(new popup(id, config));\n      instance.initialize();\n      this.app.focus.clearFocus();\n      await instance.show();\n      this.app.focus.setFocusLayer(id);\n      instance.afterShow();\n      this._activePopups.set(id, instance);\n      this._currentPopupId = id;\n      this.onShowPopup.emit({ id, data: config?.data });\n      instance.start();\n      return instance;\n    }\n    return;\n  }\n\n  /**\n   * Hide a popup\n   * @param id - The id of the popup\n   * @param data\n   * @returns a promise resolving to the popup, if it exists\n   */\n  async hidePopup<T = any>(id: string | number, data?: T): Promise<IPopup<T> | undefined> {\n    const popup = this._activePopups.get(id);\n    if (popup) {\n      popup.beforeHide();\n      await popup.hide();\n      this.view.removeChild(popup as any);\n      this._activePopups.delete(id);\n      this._currentPopupId = getLastMapEntry(this._activePopups)?.[0] || undefined;\n      this.onHidePopup.emit({ id, data });\n      popup.end();\n      return popup;\n    }\n    return;\n  }\n\n  /**\n   * Remove all popups\n   * @param animate - Whether to animate the removal\n   */\n  removeAllPopups(animate: boolean = false): void {\n    if (animate) {\n      this._activePopups.forEach((popup) => {\n        popup.hide();\n      });\n    } else {\n      this._activePopups.clear();\n      this.view.removeChildren();\n    }\n  }\n\n  protected getCoreFunctions() {\n    return ['addPopup', 'hidePopup', 'showPopup', 'removeAllPopups'];\n  }\n\n  protected getCoreSignals() {\n    return ['onShowPopup', 'onHidePopup'];\n  }\n\n  /**\n   * Setup application listeners\n   * @private\n   */\n  private _setupAppListeners(): void {\n    this.addSignalConnection(this.app.scenes.onSceneChangeStart.connect(() => this.removeAllPopups()));\n    this.app.keyboard.onKeyUp('Escape').connect(this._handleEscape);\n  }\n\n  /**\n   * Handle escape key press\n   * if the current popup should close when escape is pressed (true by default), closes it\n   * @private\n   */\n  private _handleEscape() {\n    if (this.current && this.current.config.closeOnEscape) {\n      void this.hidePopup(this.current.id);\n    }\n  }\n}\n"],"names":["PopupManagerPlugin","Plugin","Container","Signal","_app","bindAllMethods","id","popup","config","instance","data","_a","getLastMapEntry","animate"],"mappings":"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"}