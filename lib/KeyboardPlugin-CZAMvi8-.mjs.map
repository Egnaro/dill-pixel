{"version":3,"file":"KeyboardPlugin-CZAMvi8-.mjs","sources":["../src/plugins/KeyboardPlugin.ts"],"sourcesContent":["import { IApplication } from '../core/Application';\nimport { Signal } from '../signals';\nimport type { IPlugin } from './Plugin';\nimport { Plugin } from './Plugin';\n\nexport type KeyboardEventType = 'keydown' | 'keyup';\nexport type KeyboardEventDetail = { event: KeyboardEvent; key: string };\nexport type KeySignal = Signal<(detail: KeyboardEventDetail) => void>;\n\nexport interface IKeyboardPlugin extends IPlugin {\n  enabled: boolean;\n\n  onKeyDown(key?: string): KeySignal;\n\n  onKeyUp(key?: string): KeySignal;\n\n  isKeyDown(key: string): boolean;\n}\n\nexport class KeyboardPlugin extends Plugin implements IKeyboardPlugin {\n  public readonly id: string = 'keyboard';\n  // global signals\n  public onGlobalKeyDown: Signal<(detail: KeyboardEventDetail) => void> = new Signal();\n  public onGlobalKeyUp: Signal<(detail: KeyboardEventDetail) => void> = new Signal();\n\n  private _keysDown: Set<string> = new Set();\n  private _keyDownSignals: Map<string | undefined, KeySignal> = new Map();\n  private _keyUpSignals: Map<string | undefined, KeySignal> = new Map();\n\n  private _enabled: boolean = true;\n\n  public get enabled(): boolean {\n    return this._enabled;\n  }\n\n  public set enabled(value: boolean) {\n    this._enabled = value;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public initialize(_app: IApplication): void {\n    // track which keys are down\n    document.addEventListener('keydown', this._handleKeyDown);\n    document.addEventListener('keyup', this._handleKeyUp);\n  }\n\n  public destroy() {\n    document.removeEventListener('keydown', this._handleEvent);\n    document.removeEventListener('keyup', this._handleEvent);\n\n    document.addEventListener('keydown', this._handleKeyDown);\n    document.addEventListener('keyup', this._handleKeyUp);\n  }\n\n  public onKeyDown(key?: string): KeySignal {\n    return this._checkAndAddSignal(key?.toLowerCase() || undefined, 'keydown');\n  }\n\n  public onKeyUp(key?: string): KeySignal {\n    return this._checkAndAddSignal(key?.toLowerCase() || undefined, 'keyup');\n  }\n\n  public isKeyDown(key: string): boolean {\n    return this._keysDown.has(key);\n  }\n\n  _update() {\n    //\n  }\n\n  protected getCoreSignals(): string[] {\n    return ['onGlobalKeyDown', 'onGlobalKeyUp'];\n  }\n\n  protected getCoreFunctions(): string[] {\n    return ['onKeyDown', 'onKeyUp', 'isKeyDown'];\n  }\n\n  private _handleKeyDown(e: KeyboardEvent): void {\n    this._keysDown.add(e.key);\n    this.onGlobalKeyDown.emit({ event: e, key: e.key });\n  }\n\n  private _handleKeyUp(e: KeyboardEvent): void {\n    this._keysDown.delete(e.key);\n    this.onGlobalKeyUp.emit({ event: e, key: e.key });\n  }\n\n  /**\n   * Check if the signal exists and add it if it doesn't\n   * Also, if this is the first signal, start listening for the event\n   * @param {string} key\n   * @param {KeyboardEventType} eventType\n   * @returns {KeySignal}\n   * @private\n   */\n  private _checkAndAddSignal(key: string | undefined, eventType: KeyboardEventType): KeySignal {\n    const signalMap = eventType === 'keydown' ? this._keyDownSignals : this._keyUpSignals;\n\n    if (!signalMap.size) {\n      this._listen(eventType);\n    }\n\n    if (key === undefined) {\n      key = '*undefined*';\n    }\n\n    if (!signalMap.has(key)) {\n      signalMap.set(key, new Signal<(detail: KeyboardEventDetail) => void>());\n    }\n\n    return signalMap.get(key) as KeySignal;\n  }\n\n  private _listen(eventType: KeyboardEventType): void {\n    document.addEventListener(eventType, this._handleEvent);\n  }\n\n  private _handleEvent(event: KeyboardEvent): void {\n    if (!this._enabled) {\n      return;\n    }\n    const signalMap = event.type === 'keydown' ? this._keyDownSignals : this._keyUpSignals;\n    signalMap.get('*undefined*')?.emit({ event, key: event.key.toLowerCase() });\n    signalMap.get(event.key.toLowerCase())?.emit({ event, key: event.key });\n  }\n}\n"],"names":["KeyboardPlugin","Plugin","Signal","value","_app","key","eventType","signalMap","event","_a","_b"],"mappings":";AAmBO,MAAMA,UAAuBC,EAAkC;AAAA,EAA/D,cAAA;AAAA,UAAA,GAAA,SAAA,GACL,KAAgB,KAAa,YAEtB,KAAA,kBAAiE,IAAIC,KACrE,KAAA,gBAA+D,IAAIA,KAElE,KAAA,gCAA6B,OAC7B,KAAA,sCAA0D,OAC1D,KAAA,oCAAwD,OAEhE,KAAQ,WAAoB;AAAA,EAAA;AAAA,EAE5B,IAAW,UAAmB;AAC5B,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAW,QAAQC,GAAgB;AACjC,SAAK,WAAWA;AAAA,EAClB;AAAA;AAAA,EAGO,WAAWC,GAA0B;AAEjC,aAAA,iBAAiB,WAAW,KAAK,cAAc,GAC/C,SAAA,iBAAiB,SAAS,KAAK,YAAY;AAAA,EACtD;AAAA,EAEO,UAAU;AACN,aAAA,oBAAoB,WAAW,KAAK,YAAY,GAChD,SAAA,oBAAoB,SAAS,KAAK,YAAY,GAE9C,SAAA,iBAAiB,WAAW,KAAK,cAAc,GAC/C,SAAA,iBAAiB,SAAS,KAAK,YAAY;AAAA,EACtD;AAAA,EAEO,UAAUC,GAAyB;AACxC,WAAO,KAAK,oBAAmBA,KAAA,gBAAAA,EAAK,kBAAiB,QAAW,SAAS;AAAA,EAC3E;AAAA,EAEO,QAAQA,GAAyB;AACtC,WAAO,KAAK,oBAAmBA,KAAA,gBAAAA,EAAK,kBAAiB,QAAW,OAAO;AAAA,EACzE;AAAA,EAEO,UAAUA,GAAsB;AAC9B,WAAA,KAAK,UAAU,IAAIA,CAAG;AAAA,EAC/B;AAAA,EAEA,UAAU;AAAA,EAEV;AAAA,EAEU,iBAA2B;AAC5B,WAAA,CAAC,mBAAmB,eAAe;AAAA,EAC5C;AAAA,EAEU,mBAA6B;AAC9B,WAAA,CAAC,aAAa,WAAW,WAAW;AAAA,EAC7C;AAAA,EAEQ,eAAe,GAAwB;AACxC,SAAA,UAAU,IAAI,EAAE,GAAG,GACnB,KAAA,gBAAgB,KAAK,EAAE,OAAO,GAAG,KAAK,EAAE,KAAK;AAAA,EACpD;AAAA,EAEQ,aAAa,GAAwB;AACtC,SAAA,UAAU,OAAO,EAAE,GAAG,GACtB,KAAA,cAAc,KAAK,EAAE,OAAO,GAAG,KAAK,EAAE,KAAK;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUQ,mBAAmBA,GAAyBC,GAAyC;AAC3F,UAAMC,IAAYD,MAAc,YAAY,KAAK,kBAAkB,KAAK;AAEpE,WAACC,EAAU,QACb,KAAK,QAAQD,CAAS,GAGpBD,MAAQ,WACJA,IAAA,gBAGHE,EAAU,IAAIF,CAAG,KACpBE,EAAU,IAAIF,GAAK,IAAIH,EAA+C,CAAA,GAGjEK,EAAU,IAAIF,CAAG;AAAA,EAC1B;AAAA,EAEQ,QAAQC,GAAoC;AACzC,aAAA,iBAAiBA,GAAW,KAAK,YAAY;AAAA,EACxD;AAAA,EAEQ,aAAaE,GAA4B;;AAC3C,QAAA,CAAC,KAAK;AACR;AAEF,UAAMD,IAAYC,EAAM,SAAS,YAAY,KAAK,kBAAkB,KAAK;AAC/D,KAAAC,IAAAF,EAAA,IAAI,aAAa,MAAjB,QAAAE,EAAoB,KAAK,EAAE,OAAAD,GAAO,KAAKA,EAAM,IAAI,YAAY,EAAG,KAC1EE,IAAAH,EAAU,IAAIC,EAAM,IAAI,YAAA,CAAa,MAArC,QAAAE,EAAwC,KAAK,EAAE,OAAAF,GAAO,KAAKA,EAAM,IAAK;AAAA,EACxE;AACF;"}