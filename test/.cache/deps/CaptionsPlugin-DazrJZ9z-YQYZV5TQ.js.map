{
  "version": 3,
  "sources": ["../../node_modules/dill-pixel/src/plugins/captions/CaptionsRenderer.ts", "../../node_modules/dill-pixel/src/plugins/captions/CaptionsPlugin.ts"],
  "sourcesContent": ["import { gsap } from 'gsap';\nimport { BitmapText, Container as PIXIContainer, Sprite, Texture } from 'pixi.js';\nimport { Container } from '../../display';\nimport { Logger, type Size } from '../../utils';\nimport { CaptionsPlugin } from './CaptionsPlugin';\n\nexport type CaptionLine = {\n  id: string;\n  start: number;\n  end: number;\n  content: string;\n  speaker?: string;\n};\n\nexport interface ICaptionRenderer extends PIXIContainer {\n  visible: boolean;\n\n  start(): void;\n\n  stop(): void;\n\n  lineBegin(line: CaptionLine): void;\n\n  lineEnd(line: CaptionLine): void;\n\n  resize(size?: Size): void;\n\n  updateSettings(): void;\n\n  destroy(): void;\n}\n\nexport class CaptionsRenderer extends Container implements ICaptionRenderer {\n  private readonly _bg: Sprite;\n  private readonly _text: BitmapText;\n  private readonly _size: Size = { width: 0, height: 0 };\n  private readonly fontSize = 48;\n\n  constructor(private plugin: CaptionsPlugin) {\n    super({autoResize:false});\n    \n    this._bg = this.add.sprite({ asset: Texture.WHITE, anchor: [0.5, 0] });\n    this._bg.tint = this.plugin.options.backgroundColor;\n    this._bg.alpha = 0;\n\n    this._text = this.add.bitmapText({\n      font: plugin.options.fontName,\n      resolution: 2,\n      roundPixels: true,\n      style: {\n        fill: this.plugin.options.textColor,\n        fontSize: this.fontSize * this.getSizeMultiplier(),\n        fontWeight: 'bold',\n        align: 'center',\n        wordWrapWidth: this.plugin.maxWidth,\n        wordWrap: true,\n        lineHeight: this.fontSize * this.getSizeMultiplier() * 2 + 20,\n      },\n    });\n    this._text.style.wordWrap = true;\n    this._text.alpha = 0;\n    this._text.visible = false;\n    this._text.anchor.x = 0.5;\n    this._text.anchor.y = 0;\n    this.addChild(this._text);\n\n    if (this.plugin.debug) {\n      let isTapping = false;\n      this._bg.eventMode = 'static';\n      this._bg.on('pointertap', () => {\n        if (isTapping) {\n          return;\n        }\n        isTapping = true;\n        setTimeout(() => {\n          isTapping = false;\n          void this.app.voiceover.stopVO();\n        }, 100);\n      });\n    }\n  }\n\n  public start(): void {\n    this._text.visible = true;\n    this._bg.visible = true;\n\n    gsap.killTweensOf([this._bg, this._text]);\n    this.animate({ alpha: this.plugin.options.backgroundAlpha, visible: true, duration: 0.2 }, this._bg);\n    this.animate({ alpha: 1, visible: true, duration: 0.2 }, this._text);\n  }\n\n  public stop(): void {\n    gsap.killTweensOf([this._bg, this._text]);\n    this.animate({ alpha: 0, visible: false, duration: 0.2 }, [this._bg, this._text]);\n  }\n\n  public lineBegin(line: CaptionLine): void {\n    let text = line.content\n      .replace(/<[^>]*>/gi, '') // remove html tags\n      .replace(/\\[.*]\\W*/gi, ''); // remove brackets\n    if (line.start === 0) {\n      text = text.charAt(0).toUpperCase() + text.slice(1);\n    }\n    this._text.text = text;\n    this.resize();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public lineEnd(_line: CaptionLine): void {}\n\n  public resize(): void {\n    Logger.log('CaptionsRenderer.resize', this.plugin.options.maxWidth);\n    const size = this.app.size;\n    const opts = this.plugin.options;\n\n    this._size.width = size.width;\n    this._size.height = size.height;\n\n    this._text.style.fontSize = this.fontSize * this.getSizeMultiplier();\n    this._text.style.wordWrapWidth = opts.maxWidth * 2;\n    this._text.scale.set(0.5);\n    this._text.position.set(this._size.width * 0.5, 0);\n\n    this._bg.position.set(this._size.width * 0.5, 0);\n\n    let h = this._text.height;\n    if (opts.padding.top) {\n      h += opts.padding.top;\n    }\n    if (opts.padding.bottom) {\n      h += opts.padding.bottom;\n    }\n    this._bg.height = h;\n\n    this._text.y += opts.padding.top;\n\n    if (opts.floating) {\n      let w = this._text.width;\n\n      if (opts.padding.left) {\n        w += opts.padding.left;\n      }\n      if (opts.padding.right) {\n        w += opts.padding.right;\n      }\n\n      this._bg.x += opts.padding.right * 0.5 - opts.padding.left * 0.5;\n      this._bg.width = w;\n    } else {\n      this._bg.width = size.width;\n    }\n\n    if (opts.position === 'top') {\n      this.position.set(-size.width * 0.5, Math.round(-size.height * 0.5));\n      if (opts.floating) {\n        this.position.y += Math.round(opts.distance - this._bg.y);\n      }\n    } else {\n      this.position.set(-size.width * 0.5, Math.round(size.height * 0.5 - this._bg.height));\n      if (opts.floating) {\n        this.position.y -= Math.round(opts.distance + this._bg.y);\n      }\n    }\n  }\n\n  updateSettings() {\n    if (this.plugin.options.enabled) {\n      this._text.style.fill = this.plugin.options.textColor;\n      this._bg.tint = this.plugin.options.backgroundColor;\n      if (this._bg.visible) {\n        this._bg.alpha = this.plugin.options.backgroundAlpha;\n        this.resize();\n      }\n    } else {\n      this.stop();\n      this._bg.visible = false;\n      this._text.visible = false;\n      this._bg.alpha = this._text.alpha = 0;\n    }\n  }\n\n  private getSizeMultiplier(): number {\n    return this.plugin.options.fontSizeMultiplier;\n  }\n}\n", "import { Assets, Container, Ticker } from 'pixi.js';\nimport type { IApplication } from '../../core';\nimport type { ImportListItem, ImportListItemModule, Padding, PointLike } from '../../utils';\nimport { ensurePadding, getDynamicModuleFromImportListItem, isDev, Logger } from '../../utils';\nimport type { IAudioInstance } from '../audio';\nimport type { IPlugin } from '../Plugin';\nimport { Plugin } from '../Plugin';\nimport type { ICaptionRenderer } from './CaptionsRenderer';\nimport { CaptionsRenderer } from './CaptionsRenderer';\n\nconst isDebug = isDev;\n\n/**\n * Type definition for i18n dictionary.\n */\ntype CaptionsDict = Record<string, any>;\n\n/**\n * Type definition for i18n import list item.\n */\ntype CaptionsImportListItem<T> = {\n  id: string;\n  namedExport?: string;\n  options?: any;\n  module?: ImportListItemModule<T>;\n} & {\n  json?: string;\n};\n\ntype CaptionRendererConstructor = new (owner: CaptionsPlugin) => ICaptionRenderer;\n\n/**\n * Type definition for i18n options.\n */\nexport type CaptionsOptions = {\n  renderer: CaptionRendererConstructor;\n  defaultLocale: string;\n  files: CaptionsImportListItem<CaptionsDict>[];\n  fontFile: string;\n  fontName: string;\n  fontSizeMultiplier: number;\n  maxWidth: number;\n  textColor: number;\n  backgroundColor: number;\n  backgroundAlpha: number;\n  enabled: boolean;\n  floating: boolean;\n  distance: number;\n  padding: Padding;\n  position: 'top' | 'bottom';\n};\n\n/**\n * Default options for i18n module.\n */\nconst defaultOptions: Partial<CaptionsOptions> = {\n  renderer: CaptionsRenderer,\n  defaultLocale: 'en',\n  fontFile: './dill-pixel/font/Sans.fnt',\n  fontName: 'Sans',\n  fontSizeMultiplier: 1,\n  maxWidth: 0.8,\n  textColor: 0xffffff,\n  backgroundColor: 0x0,\n  backgroundAlpha: 0.4,\n  enabled: true,\n  floating: false,\n  distance: 0,\n  padding: { top: 20, left: 0, bottom: 20, right: 0 },\n  position: 'top',\n};\n\nfunction resolveMaxWidth(value: number, appWidth: number) {\n  if (value <= 0) {\n    return 0;\n  }\n  if (value > 0 && value <= 1) {\n    return appWidth * value;\n  }\n  return value;\n}\n\n/**\n * Interface for i18n module.\n */\nexport interface ICaptionsPlugin extends IPlugin {\n  readonly locale: string;\n  view: Container;\n  enabled: boolean;\n  floating: boolean;\n  distance: number;\n  padding: Padding;\n  position: 'top' | 'bottom';\n  backgroundColor: number;\n  textColor: number;\n  backgroundAlpha: number;\n  fontSizeMultiplier: number;\n  maxWidth: number;\n  options: Partial<CaptionsOptions>;\n\n  setLocale(localeId: string): Promise<string>;\n\n  loadLocale(localeId: string): Promise<void>;\n\n  render(): void;\n}\n\n/**\n * i18n module class.\n */\nexport class CaptionsPlugin extends Plugin implements ICaptionsPlugin {\n  public readonly id = 'captions';\n  public view: Container = new Container();\n  public renderer: ICaptionRenderer;\n  private _dicts: Record<string, CaptionsDict> = {};\n  private _locales: string[];\n  private _activeCaptionLine = -1;\n  private _activeCaptionTime = 0;\n  \n  private _locale: string;\n\n  /**\n   * Getter for locale.\n   */\n  get locale(): string {\n    return this._locale;\n  }\n\n  private _options: CaptionsOptions;\n  private _originalOptions: CaptionsOptions;\n\n  get options(): CaptionsOptions {\n    return this._options;\n  }\n\n  set options(value: Partial<CaptionsOptions>) {\n    this._options = { ...this._options, ...value };\n    \n\n    if (value.padding) {\n      this._options.padding = ensurePadding(value.padding);\n    }\n  }\n\n  private _activeCaptionId?: string;\n\n  get activeCaptionId() {\n    return this._activeCaptionId;\n  }\n\n  private _paused: boolean = false;\n\n  get paused(): boolean {\n    return this._paused;\n  }\n\n  set paused(value: boolean) {\n    this._paused = value;\n  }\n\n  get floating(): boolean {\n    return this.options.floating;\n  }\n\n  set floating(value: boolean) {\n    this.options.floating = value;\n    this.updateRenderer();\n  }\n\n  public get enabled(): boolean {\n    return this.options.enabled;\n  }\n\n  set enabled(value: boolean) {\n    this.options.enabled = value;\n    if (this.enabled) {\n      this.view.visible = true;\n    } else {\n      this.view.visible = false;\n    }\n  }\n\n  public get position(): 'top' | 'bottom' {\n    return this.options.position;\n  }\n\n  public set position(value: 'top' | 'bottom') {\n    this.options.position = value;\n    this.renderer.updateSettings();\n  }\n\n  set backgroundColor(value: number) {\n    this.options.backgroundColor = value;\n    this.updateRenderer();\n  }\n\n  set textColor(value: number) {\n    this.options.textColor = value;\n    this.updateRenderer();\n  }\n\n  set backgroundAlpha(value: number) {\n    this.options.backgroundAlpha = value;\n    this.updateRenderer();\n  }\n\n  get padding(): Padding {\n    return this.options.padding;\n  }\n\n  set padding(value: Partial<Padding> | PointLike) {\n    this.options.padding = ensurePadding(value);\n    this.updateRenderer();\n  }\n\n  get distance(): number {\n    return this.options.distance;\n  }\n\n  set distance(value: number) {\n    this.options.distance = value;\n    this.updateRenderer();\n  }\n\n  public get fontSizeMultiplier(): number {\n    return this.options.fontSizeMultiplier;\n  }\n\n  public set fontSizeMultiplier(value: number) {\n    this.options.fontSizeMultiplier = value;\n    this.renderer.resize();\n  }\n\n  public get maxWidth(): number {\n    return this.options.maxWidth;\n  }\n\n  public set maxWidth(value: number) {\n    this.options.maxWidth = resolveMaxWidth(value, this.app.size.width);\n    this.renderer?.resize();\n  }\n\n  get list(): CaptionsDict {\n    return this._dicts[this._locale];\n  }\n\n  get debug(): boolean {\n    return isDebug;\n  }\n\n  /**\n   * Initializes the i18n module.\n   * sets the default locale and loads the locale files.\n   * @param _app\n   * @param options The i18n options.\n   * @returns Promise<void>\n   */\n  public async initialize(_app: IApplication, options: Partial<CaptionsOptions> = {}): Promise<void> {\n    this._options = {\n      ...defaultOptions,\n      ...options,\n    } as CaptionsOptions;\n\n    this._originalOptions = { ...this._options};\n\n    if (options?.padding) {\n      this._options.padding = ensurePadding(options.padding);\n    }\n\n    this._locale = this.app.i18n.locale;\n    this._locales = this.app.i18n.locales;\n\n    if (this._options.fontFile) {\n      await Assets.load(this._options.fontFile);\n    }\n\n    if (this._options?.files?.length > 0) {\n      const files = this._options.files.filter((file) => this._locales.includes(file.id));\n      for (const file of files) {\n        await this.loadLocale(file.id);\n      }\n    }\n\n    this.addSignalConnection(this.app.onResize.connect(this.handleResize, 'highest'));\n  }\n\n  private handleResize() {\n    Logger.log('CaptionsPlugin.handleResize');\n    this.maxWidth = this._originalOptions.maxWidth ;\n  }\n\n  public postInitialize(): void {\n    this.app.i18n.onLocaleChanged.connect(this._handleLocaleChange);\n    this.app.voiceover.onVoiceOverStart.connect(this._handleVoiceOverStart);\n    this.app.voiceover.onVoiceOverPaused.connect(this._handleVoiceOverPaused);\n    this.app.voiceover.onVoiceOverResumed.connect(this._handleVoiceOverResumed);\n    this.app.voiceover.onVoiceOverComplete.connect(this._handleVoiceoverComplete);\n    this.app.voiceover.onVoiceOverStopped.connect(this._handleVoiceoverStopped);\n\n    this.app.stage.addChild(this.view);\n    this._options.maxWidth = resolveMaxWidth(this._originalOptions.maxWidth, this.app.size.width);\n    const RendererClass: CaptionRendererConstructor = this.options.renderer;\n    this.renderer = this.view.addChild(new RendererClass(this)) as CaptionsRenderer;\n\n    this.app.ticker.add(this.update);\n    this.app.scenes.onSceneChangeStart.connect(this.stopAllCaptions);\n  }\n\n  /**\n   * Sets the locale.\n   * If the locale is not loaded, it will load it first.\n   * @param localeId The locale id to set.\n   * @returns Promise<string>\n   */\n  async setLocale(localeId: string) {\n    if (this._locale === localeId) {\n      return this._locale;\n    }\n    if (this._activeCaptionId) {\n      this.stopCaption(this._activeCaptionId);\n    }\n    this._activeCaptionId = undefined;\n    await this._loadAndSetLocale(localeId);\n    this._locale = localeId;\n    return this._locale;\n  }\n\n  /**\n   * Loads a locale.\n   * @param localeId The locale id to load.\n   * @returns Promise<void>\n   */\n  async loadLocale(localeId: string) {\n    if (this._locale === 'localeId') {\n      return;\n    }\n    const file = this._options.files.find((file) => localeId === file.id);\n    if (!file) {\n      Logger.error(`i18n:: Could not find locale file for ${localeId}`);\n      return;\n    }\n    this._dicts[localeId] = file.json\n      ? await Assets.load(file.json)\n      : await getDynamicModuleFromImportListItem(file as ImportListItem<CaptionsDict>);\n  }\n\n  render() {\n    this.renderer.resize();\n  }\n\n  update(ticker: Ticker): void {\n    if (this._paused) {\n      return;\n    }\n    const dt: number = ticker.deltaMS / 1000;\n    const id = this._activeCaptionId;\n    if (id) {\n      this._activeCaptionTime += dt;\n      const ms = this._activeCaptionTime * 1000;\n      const cc = this.list[id];\n      const n = cc.length;\n      for (let i = 0; i < n; i++) {\n        if (ms >= cc[i].start && ms < cc[i].end) {\n          if (this._activeCaptionLine !== i) {\n            this.playLine(id, i);\n          }\n          break;\n        }\n      }\n      if (ms >= cc[n - 1].end) {\n        this.playLine(id, -1);\n      }\n    }\n  }\n\n  public playCaption(id: string): void {\n    // remove extension from id\n    id = this._getId(id);\n    this.playLine(id, 0);\n  }\n\n  public stopCaption(id: string): void {\n    // remove extension from id\n    id = this._getId(id);\n    if (this._activeCaptionId === id) {\n      this.playLine(id, -1);\n    }\n  }\n\n  public stopAllCaptions(): void {\n    this.renderer?.stop();\n    this._activeCaptionId = undefined;\n    this._activeCaptionLine = -1;\n  }\n\n  private _getId(id: string) {\n    return id.replace(/\\.[^/.]+$/, '');\n  }\n\n  private updateRenderer() {\n    if (!this.enabled) {\n      return;\n    }\n    this.renderer.updateSettings();\n  }\n\n  private _handleLocaleChange() {\n    void this.setLocale(this.app.i18n.locale);\n  }\n\n  private _handleVoiceOverStart(vo: IAudioInstance) {\n    this.playCaption(vo.id);\n  }\n\n  private _handleVoiceOverPaused() {\n    this.paused = true;\n  }\n\n  private _handleVoiceOverResumed() {\n    this.paused = false;\n  }\n\n  private _handleVoiceoverComplete(vo: IAudioInstance) {\n    const id = this._getId(vo?.id || '');\n    if (this._activeCaptionId === id) {\n      this.stopCaption(id);\n    }\n  }\n\n  private _handleVoiceoverStopped() {\n    this.stopAllCaptions();\n  }\n\n  /**\n   * Loads and sets a locale.\n   * If the locale is not loaded, it will load it first.\n   * @param localeId The locale id to load and set.\n   */\n  private async _loadAndSetLocale(localeId: string) {\n    if (!this._dicts[localeId]) {\n      await this.loadLocale(localeId);\n    }\n  }\n\n  private playLine(id: string, index: number) {\n    const cc = this.list[id];\n    const line = cc ? cc[index] : undefined;\n    if (line) {\n      if (this._activeCaptionId !== id) {\n        this._activeCaptionId = id;\n        this._activeCaptionTime = 0;\n        this._activeCaptionLine = -1;\n        this.renderer?.start();\n      }\n      if (this._activeCaptionLine !== index) {\n        this._activeCaptionLine = index;\n        this.renderer?.lineBegin({\n          id: this._activeCaptionId,\n          ...cc[index],\n        });\n      }\n    } else if (this._activeCaptionId === id && cc) {\n      this.renderer?.lineEnd({\n        id: this._activeCaptionId,\n        ...cc[this._activeCaptionLine],\n      });\n      this.renderer?.stop();\n      this._activeCaptionId = undefined;\n      this._activeCaptionLine = -1;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["CaptionsRenderer", "Container", "plugin", "Texture", "isTapping", "gsap", "line", "text", "_line", "Logger", "size", "opts", "h", "w", "isDebug", "isDev", "defaultOptions", "resolveMaxWidth", "value", "appWidth", "CaptionsPlugin", "Plugin", "ensurePadding", "_a", "_app", "options", "Assets", "_b", "files", "file", "RendererClass", "localeId", "getDynamicModuleFromImportListItem", "ticker", "dt", "id", "ms", "cc", "n", "i", "vo", "index", "_c", "_d"]
}
