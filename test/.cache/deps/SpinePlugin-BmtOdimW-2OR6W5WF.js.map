{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/Utils.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/attachments/Attachment.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/attachments/Sequence.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/Animation.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/AnimationState.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/AnimationStateData.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/attachments/BoundingBoxAttachment.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/attachments/ClippingAttachment.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/Texture.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/TextureAtlas.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/attachments/MeshAttachment.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/attachments/PathAttachment.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/attachments/PointAttachment.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/attachments/RegionAttachment.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/AtlasAttachmentLoader.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/BoneData.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/Bone.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/ConstraintData.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/Event.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/EventData.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/IkConstraint.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/IkConstraintData.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/PathConstraintData.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/PathConstraint.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/PhysicsConstraint.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/Slot.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/TransformConstraint.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/Skeleton.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/PhysicsConstraintData.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/SkeletonData.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/Skin.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/SlotData.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/TransformConstraintData.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/SkeletonBinary.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/SkeletonBounds.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/Triangulator.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/SkeletonClipping.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/SkeletonJson.js", "../../node_modules/.pnpm/@esotericsoftware+spine-core@4.2.66/node_modules/@esotericsoftware/spine-core/dist/polyfills.js", "../../node_modules/dill-pixel/src/plugins/spine/pixi-spine/SpineTexture.ts", "../../node_modules/dill-pixel/src/plugins/spine/pixi-spine/assets/atlasLoader.ts", "../../node_modules/dill-pixel/src/plugins/spine/pixi-spine/assets/skeletonLoader.ts", "../../node_modules/dill-pixel/src/plugins/spine/pixi-spine/BatchableSpineSlot.ts", "../../node_modules/dill-pixel/src/plugins/spine/pixi-spine/SpinePipe.ts", "../../node_modules/dill-pixel/src/plugins/spine/pixi-spine/Spine.ts", "../../node_modules/dill-pixel/src/plugins/spine/SpinePlugin.ts"],
  "sourcesContent": ["/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nexport class IntSet {\n    array = new Array();\n    add(value) {\n        let contains = this.contains(value);\n        this.array[value | 0] = value | 0;\n        return !contains;\n    }\n    contains(value) {\n        return this.array[value | 0] != undefined;\n    }\n    remove(value) {\n        this.array[value | 0] = undefined;\n    }\n    clear() {\n        this.array.length = 0;\n    }\n}\nexport class StringSet {\n    entries = {};\n    size = 0;\n    add(value) {\n        let contains = this.entries[value];\n        this.entries[value] = true;\n        if (!contains) {\n            this.size++;\n            return true;\n        }\n        return false;\n    }\n    addAll(values) {\n        let oldSize = this.size;\n        for (var i = 0, n = values.length; i < n; i++)\n            this.add(values[i]);\n        return oldSize != this.size;\n    }\n    contains(value) {\n        return this.entries[value];\n    }\n    clear() {\n        this.entries = {};\n        this.size = 0;\n    }\n}\nexport class Color {\n    r;\n    g;\n    b;\n    a;\n    static WHITE = new Color(1, 1, 1, 1);\n    static RED = new Color(1, 0, 0, 1);\n    static GREEN = new Color(0, 1, 0, 1);\n    static BLUE = new Color(0, 0, 1, 1);\n    static MAGENTA = new Color(1, 0, 1, 1);\n    constructor(r = 0, g = 0, b = 0, a = 0) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n    set(r, g, b, a) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n        return this.clamp();\n    }\n    setFromColor(c) {\n        this.r = c.r;\n        this.g = c.g;\n        this.b = c.b;\n        this.a = c.a;\n        return this;\n    }\n    setFromString(hex) {\n        hex = hex.charAt(0) == '#' ? hex.substr(1) : hex;\n        this.r = parseInt(hex.substr(0, 2), 16) / 255;\n        this.g = parseInt(hex.substr(2, 2), 16) / 255;\n        this.b = parseInt(hex.substr(4, 2), 16) / 255;\n        this.a = hex.length != 8 ? 1 : parseInt(hex.substr(6, 2), 16) / 255;\n        return this;\n    }\n    add(r, g, b, a) {\n        this.r += r;\n        this.g += g;\n        this.b += b;\n        this.a += a;\n        return this.clamp();\n    }\n    clamp() {\n        if (this.r < 0)\n            this.r = 0;\n        else if (this.r > 1)\n            this.r = 1;\n        if (this.g < 0)\n            this.g = 0;\n        else if (this.g > 1)\n            this.g = 1;\n        if (this.b < 0)\n            this.b = 0;\n        else if (this.b > 1)\n            this.b = 1;\n        if (this.a < 0)\n            this.a = 0;\n        else if (this.a > 1)\n            this.a = 1;\n        return this;\n    }\n    static rgba8888ToColor(color, value) {\n        color.r = ((value & 0xff000000) >>> 24) / 255;\n        color.g = ((value & 0x00ff0000) >>> 16) / 255;\n        color.b = ((value & 0x0000ff00) >>> 8) / 255;\n        color.a = ((value & 0x000000ff)) / 255;\n    }\n    static rgb888ToColor(color, value) {\n        color.r = ((value & 0x00ff0000) >>> 16) / 255;\n        color.g = ((value & 0x0000ff00) >>> 8) / 255;\n        color.b = ((value & 0x000000ff)) / 255;\n    }\n    toRgb888() {\n        const hex = (x) => (\"0\" + (x * 255).toString(16)).slice(-2);\n        return Number(\"0x\" + hex(this.r) + hex(this.g) + hex(this.b));\n    }\n    static fromString(hex) {\n        return new Color().setFromString(hex);\n    }\n}\nexport class MathUtils {\n    static PI = 3.1415927;\n    static PI2 = MathUtils.PI * 2;\n    static invPI2 = 1 / MathUtils.PI2;\n    static radiansToDegrees = 180 / MathUtils.PI;\n    static radDeg = MathUtils.radiansToDegrees;\n    static degreesToRadians = MathUtils.PI / 180;\n    static degRad = MathUtils.degreesToRadians;\n    static clamp(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    }\n    static cosDeg(degrees) {\n        return Math.cos(degrees * MathUtils.degRad);\n    }\n    static sinDeg(degrees) {\n        return Math.sin(degrees * MathUtils.degRad);\n    }\n    static atan2Deg(y, x) {\n        return Math.atan2(y, x) * MathUtils.degRad;\n    }\n    static signum(value) {\n        return value > 0 ? 1 : value < 0 ? -1 : 0;\n    }\n    static toInt(x) {\n        return x > 0 ? Math.floor(x) : Math.ceil(x);\n    }\n    static cbrt(x) {\n        let y = Math.pow(Math.abs(x), 1 / 3);\n        return x < 0 ? -y : y;\n    }\n    static randomTriangular(min, max) {\n        return MathUtils.randomTriangularWith(min, max, (min + max) * 0.5);\n    }\n    static randomTriangularWith(min, max, mode) {\n        let u = Math.random();\n        let d = max - min;\n        if (u <= (mode - min) / d)\n            return min + Math.sqrt(u * d * (mode - min));\n        return max - Math.sqrt((1 - u) * d * (max - mode));\n    }\n    static isPowerOfTwo(value) {\n        return value && (value & (value - 1)) === 0;\n    }\n}\nexport class Interpolation {\n    apply(start, end, a) {\n        return start + (end - start) * this.applyInternal(a);\n    }\n}\nexport class Pow extends Interpolation {\n    power = 2;\n    constructor(power) {\n        super();\n        this.power = power;\n    }\n    applyInternal(a) {\n        if (a <= 0.5)\n            return Math.pow(a * 2, this.power) / 2;\n        return Math.pow((a - 1) * 2, this.power) / (this.power % 2 == 0 ? -2 : 2) + 1;\n    }\n}\nexport class PowOut extends Pow {\n    constructor(power) {\n        super(power);\n    }\n    applyInternal(a) {\n        return Math.pow(a - 1, this.power) * (this.power % 2 == 0 ? -1 : 1) + 1;\n    }\n}\nexport class Utils {\n    static SUPPORTS_TYPED_ARRAYS = typeof (Float32Array) !== \"undefined\";\n    static arrayCopy(source, sourceStart, dest, destStart, numElements) {\n        for (let i = sourceStart, j = destStart; i < sourceStart + numElements; i++, j++) {\n            dest[j] = source[i];\n        }\n    }\n    static arrayFill(array, fromIndex, toIndex, value) {\n        for (let i = fromIndex; i < toIndex; i++)\n            array[i] = value;\n    }\n    static setArraySize(array, size, value = 0) {\n        let oldSize = array.length;\n        if (oldSize == size)\n            return array;\n        array.length = size;\n        if (oldSize < size) {\n            for (let i = oldSize; i < size; i++)\n                array[i] = value;\n        }\n        return array;\n    }\n    static ensureArrayCapacity(array, size, value = 0) {\n        if (array.length >= size)\n            return array;\n        return Utils.setArraySize(array, size, value);\n    }\n    static newArray(size, defaultValue) {\n        let array = new Array(size);\n        for (let i = 0; i < size; i++)\n            array[i] = defaultValue;\n        return array;\n    }\n    static newFloatArray(size) {\n        if (Utils.SUPPORTS_TYPED_ARRAYS)\n            return new Float32Array(size);\n        else {\n            let array = new Array(size);\n            for (let i = 0; i < array.length; i++)\n                array[i] = 0;\n            return array;\n        }\n    }\n    static newShortArray(size) {\n        if (Utils.SUPPORTS_TYPED_ARRAYS)\n            return new Int16Array(size);\n        else {\n            let array = new Array(size);\n            for (let i = 0; i < array.length; i++)\n                array[i] = 0;\n            return array;\n        }\n    }\n    static toFloatArray(array) {\n        return Utils.SUPPORTS_TYPED_ARRAYS ? new Float32Array(array) : array;\n    }\n    static toSinglePrecision(value) {\n        return Utils.SUPPORTS_TYPED_ARRAYS ? Math.fround(value) : value;\n    }\n    // This function is used to fix WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n    static webkit602BugfixHelper(alpha, blend) {\n    }\n    static contains(array, element, identity = true) {\n        for (var i = 0; i < array.length; i++)\n            if (array[i] == element)\n                return true;\n        return false;\n    }\n    static enumValue(type, name) {\n        return type[name[0].toUpperCase() + name.slice(1)];\n    }\n}\nexport class DebugUtils {\n    static logBones(skeleton) {\n        for (let i = 0; i < skeleton.bones.length; i++) {\n            let bone = skeleton.bones[i];\n            console.log(bone.data.name + \", \" + bone.a + \", \" + bone.b + \", \" + bone.c + \", \" + bone.d + \", \" + bone.worldX + \", \" + bone.worldY);\n        }\n    }\n}\nexport class Pool {\n    items = new Array();\n    instantiator;\n    constructor(instantiator) {\n        this.instantiator = instantiator;\n    }\n    obtain() {\n        return this.items.length > 0 ? this.items.pop() : this.instantiator();\n    }\n    free(item) {\n        if (item.reset)\n            item.reset();\n        this.items.push(item);\n    }\n    freeAll(items) {\n        for (let i = 0; i < items.length; i++)\n            this.free(items[i]);\n    }\n    clear() {\n        this.items.length = 0;\n    }\n}\nexport class Vector2 {\n    x;\n    y;\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n    set(x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n    length() {\n        let x = this.x;\n        let y = this.y;\n        return Math.sqrt(x * x + y * y);\n    }\n    normalize() {\n        let len = this.length();\n        if (len != 0) {\n            this.x /= len;\n            this.y /= len;\n        }\n        return this;\n    }\n}\nexport class TimeKeeper {\n    maxDelta = 0.064;\n    framesPerSecond = 0;\n    delta = 0;\n    totalTime = 0;\n    lastTime = Date.now() / 1000;\n    frameCount = 0;\n    frameTime = 0;\n    update() {\n        let now = Date.now() / 1000;\n        this.delta = now - this.lastTime;\n        this.frameTime += this.delta;\n        this.totalTime += this.delta;\n        if (this.delta > this.maxDelta)\n            this.delta = this.maxDelta;\n        this.lastTime = now;\n        this.frameCount++;\n        if (this.frameTime > 1) {\n            this.framesPerSecond = this.frameCount / this.frameTime;\n            this.frameTime = 0;\n            this.frameCount = 0;\n        }\n    }\n}\nexport class WindowedMean {\n    values;\n    addedValues = 0;\n    lastValue = 0;\n    mean = 0;\n    dirty = true;\n    constructor(windowSize = 32) {\n        this.values = new Array(windowSize);\n    }\n    hasEnoughData() {\n        return this.addedValues >= this.values.length;\n    }\n    addValue(value) {\n        if (this.addedValues < this.values.length)\n            this.addedValues++;\n        this.values[this.lastValue++] = value;\n        if (this.lastValue > this.values.length - 1)\n            this.lastValue = 0;\n        this.dirty = true;\n    }\n    getMean() {\n        if (this.hasEnoughData()) {\n            if (this.dirty) {\n                let mean = 0;\n                for (let i = 0; i < this.values.length; i++)\n                    mean += this.values[i];\n                this.mean = mean / this.values.length;\n                this.dirty = false;\n            }\n            return this.mean;\n        }\n        return 0;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Utils } from \"../Utils.js\";\n/** The base class for all attachments. */\nexport class Attachment {\n    name;\n    constructor(name) {\n        if (!name)\n            throw new Error(\"name cannot be null.\");\n        this.name = name;\n    }\n}\n/** Base class for an attachment with vertices that are transformed by one or more bones and can be deformed by a slot's\n * {@link Slot#deform}. */\nexport class VertexAttachment extends Attachment {\n    static nextID = 0;\n    /** The unique ID for this attachment. */\n    id = VertexAttachment.nextID++;\n    /** The bones which affect the {@link #getVertices()}. The array entries are, for each vertex, the number of bones affecting\n     * the vertex followed by that many bone indices, which is the index of the bone in {@link Skeleton#bones}. Will be null\n     * if this attachment has no weights. */\n    bones = null;\n    /** The vertex positions in the bone's coordinate system. For a non-weighted attachment, the values are `x,y`\n     * entries for each vertex. For a weighted attachment, the values are `x,y,weight` entries for each bone affecting\n     * each vertex. */\n    vertices = [];\n    /** The maximum number of world vertex values that can be output by\n     * {@link #computeWorldVertices()} using the `count` parameter. */\n    worldVerticesLength = 0;\n    /** Timelines for the timeline attachment are also applied to this attachment.\n     * May be null if no attachment-specific timelines should be applied. */\n    timelineAttachment = this;\n    constructor(name) {\n        super(name);\n    }\n    /** Transforms the attachment's local {@link #vertices} to world coordinates. If the slot's {@link Slot#deform} is\n     * not empty, it is used to deform the vertices.\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide.\n     * @param start The index of the first {@link #vertices} value to transform. Each vertex has 2 values, x and y.\n     * @param count The number of world vertex values to output. Must be <= {@link #worldVerticesLength} - `start`.\n     * @param worldVertices The output world vertices. Must have a length >= `offset` + `count` *\n     *           `stride` / 2.\n     * @param offset The `worldVertices` index to begin writing values.\n     * @param stride The number of `worldVertices` entries between the value pairs written. */\n    computeWorldVertices(slot, start, count, worldVertices, offset, stride) {\n        count = offset + (count >> 1) * stride;\n        let skeleton = slot.bone.skeleton;\n        let deformArray = slot.deform;\n        let vertices = this.vertices;\n        let bones = this.bones;\n        if (!bones) {\n            if (deformArray.length > 0)\n                vertices = deformArray;\n            let bone = slot.bone;\n            let x = bone.worldX;\n            let y = bone.worldY;\n            let a = bone.a, b = bone.b, c = bone.c, d = bone.d;\n            for (let v = start, w = offset; w < count; v += 2, w += stride) {\n                let vx = vertices[v], vy = vertices[v + 1];\n                worldVertices[w] = vx * a + vy * b + x;\n                worldVertices[w + 1] = vx * c + vy * d + y;\n            }\n            return;\n        }\n        let v = 0, skip = 0;\n        for (let i = 0; i < start; i += 2) {\n            let n = bones[v];\n            v += n + 1;\n            skip += n;\n        }\n        let skeletonBones = skeleton.bones;\n        if (deformArray.length == 0) {\n            for (let w = offset, b = skip * 3; w < count; w += stride) {\n                let wx = 0, wy = 0;\n                let n = bones[v++];\n                n += v;\n                for (; v < n; v++, b += 3) {\n                    let bone = skeletonBones[bones[v]];\n                    let vx = vertices[b], vy = vertices[b + 1], weight = vertices[b + 2];\n                    wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;\n                    wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;\n                }\n                worldVertices[w] = wx;\n                worldVertices[w + 1] = wy;\n            }\n        }\n        else {\n            let deform = deformArray;\n            for (let w = offset, b = skip * 3, f = skip << 1; w < count; w += stride) {\n                let wx = 0, wy = 0;\n                let n = bones[v++];\n                n += v;\n                for (; v < n; v++, b += 3, f += 2) {\n                    let bone = skeletonBones[bones[v]];\n                    let vx = vertices[b] + deform[f], vy = vertices[b + 1] + deform[f + 1], weight = vertices[b + 2];\n                    wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;\n                    wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;\n                }\n                worldVertices[w] = wx;\n                worldVertices[w + 1] = wy;\n            }\n        }\n    }\n    /** Does not copy id (generated) or name (set on construction). **/\n    copyTo(attachment) {\n        if (this.bones) {\n            attachment.bones = new Array(this.bones.length);\n            Utils.arrayCopy(this.bones, 0, attachment.bones, 0, this.bones.length);\n        }\n        else\n            attachment.bones = null;\n        if (this.vertices) {\n            attachment.vertices = Utils.newFloatArray(this.vertices.length);\n            Utils.arrayCopy(this.vertices, 0, attachment.vertices, 0, this.vertices.length);\n        }\n        attachment.worldVerticesLength = this.worldVerticesLength;\n        attachment.timelineAttachment = this.timelineAttachment;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Utils } from \"../Utils.js\";\nexport class Sequence {\n    static _nextID = 0;\n    id = Sequence.nextID();\n    regions;\n    start = 0;\n    digits = 0;\n    /** The index of the region to show for the setup pose. */\n    setupIndex = 0;\n    constructor(count) {\n        this.regions = new Array(count);\n    }\n    copy() {\n        let copy = new Sequence(this.regions.length);\n        Utils.arrayCopy(this.regions, 0, copy.regions, 0, this.regions.length);\n        copy.start = this.start;\n        copy.digits = this.digits;\n        copy.setupIndex = this.setupIndex;\n        return copy;\n    }\n    apply(slot, attachment) {\n        let index = slot.sequenceIndex;\n        if (index == -1)\n            index = this.setupIndex;\n        if (index >= this.regions.length)\n            index = this.regions.length - 1;\n        let region = this.regions[index];\n        if (attachment.region != region) {\n            attachment.region = region;\n            attachment.updateRegion();\n        }\n    }\n    getPath(basePath, index) {\n        let result = basePath;\n        let frame = (this.start + index).toString();\n        for (let i = this.digits - frame.length; i > 0; i--)\n            result += \"0\";\n        result += frame;\n        return result;\n    }\n    static nextID() {\n        return Sequence._nextID++;\n    }\n}\nexport var SequenceMode;\n(function (SequenceMode) {\n    SequenceMode[SequenceMode[\"hold\"] = 0] = \"hold\";\n    SequenceMode[SequenceMode[\"once\"] = 1] = \"once\";\n    SequenceMode[SequenceMode[\"loop\"] = 2] = \"loop\";\n    SequenceMode[SequenceMode[\"pingpong\"] = 3] = \"pingpong\";\n    SequenceMode[SequenceMode[\"onceReverse\"] = 4] = \"onceReverse\";\n    SequenceMode[SequenceMode[\"loopReverse\"] = 5] = \"loopReverse\";\n    SequenceMode[SequenceMode[\"pingpongReverse\"] = 6] = \"pingpongReverse\";\n})(SequenceMode || (SequenceMode = {}));\nexport const SequenceModeValues = [\n    SequenceMode.hold,\n    SequenceMode.once,\n    SequenceMode.loop,\n    SequenceMode.pingpong,\n    SequenceMode.onceReverse,\n    SequenceMode.loopReverse,\n    SequenceMode.pingpongReverse\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VxdWVuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXR0YWNobWVudHMvU2VxdWVuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrRUEyQitFO0FBSy9FLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHcEMsTUFBTSxPQUFPLFFBQVE7SUFDWixNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUUzQixFQUFFLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3ZCLE9BQU8sQ0FBa0I7SUFDekIsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNWLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDWCwwREFBMEQ7SUFDMUQsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUVmLFlBQWEsS0FBYTtRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksS0FBSyxDQUFnQixLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsSUFBSTtRQUNILElBQUksSUFBSSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDMUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ2xDLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELEtBQUssQ0FBRSxJQUFVLEVBQUUsVUFBNEI7UUFDOUMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUMvQixJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7WUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN6QyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU07WUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2xFLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakMsSUFBSSxVQUFVLENBQUMsTUFBTSxJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQ2pDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQzNCLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMzQixDQUFDO0lBQ0YsQ0FBQztJQUVELE9BQU8sQ0FBRSxRQUFnQixFQUFFLEtBQWE7UUFDdkMsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDO1FBQ3RCLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM1QyxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNsRCxNQUFNLElBQUksR0FBRyxDQUFDO1FBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQztRQUNoQixPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7SUFFTyxNQUFNLENBQUMsTUFBTTtRQUNwQixPQUFPLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMzQixDQUFDOztBQUdGLE1BQU0sQ0FBTixJQUFZLFlBUVg7QUFSRCxXQUFZLFlBQVk7SUFDdkIsK0NBQVEsQ0FBQTtJQUNSLCtDQUFRLENBQUE7SUFDUiwrQ0FBUSxDQUFBO0lBQ1IsdURBQVksQ0FBQTtJQUNaLDZEQUFlLENBQUE7SUFDZiw2REFBZSxDQUFBO0lBQ2YscUVBQW1CLENBQUE7QUFDcEIsQ0FBQyxFQVJXLFlBQVksS0FBWixZQUFZLFFBUXZCO0FBRUQsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUc7SUFDakMsWUFBWSxDQUFDLElBQUk7SUFDakIsWUFBWSxDQUFDLElBQUk7SUFDakIsWUFBWSxDQUFDLElBQUk7SUFDakIsWUFBWSxDQUFDLFFBQVE7SUFDckIsWUFBWSxDQUFDLFdBQVc7SUFDeEIsWUFBWSxDQUFDLFdBQVc7SUFDeEIsWUFBWSxDQUFDLGVBQWU7Q0FDNUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIFNwaW5lIFJ1bnRpbWVzIExpY2Vuc2UgQWdyZWVtZW50XG4gKiBMYXN0IHVwZGF0ZWQgSnVseSAyOCwgMjAyMy4gUmVwbGFjZXMgYWxsIHByaW9yIHZlcnNpb25zLlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy0yMDIzLCBFc290ZXJpYyBTb2Z0d2FyZSBMTENcbiAqXG4gKiBJbnRlZ3JhdGlvbiBvZiB0aGUgU3BpbmUgUnVudGltZXMgaW50byBzb2Z0d2FyZSBvciBvdGhlcndpc2UgY3JlYXRpbmdcbiAqIGRlcml2YXRpdmUgd29ya3Mgb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIGlzIHBlcm1pdHRlZCB1bmRlciB0aGUgdGVybXMgYW5kXG4gKiBjb25kaXRpb25zIG9mIFNlY3Rpb24gMiBvZiB0aGUgU3BpbmUgRWRpdG9yIExpY2Vuc2UgQWdyZWVtZW50OlxuICogaHR0cDovL2Vzb3Rlcmljc29mdHdhcmUuY29tL3NwaW5lLWVkaXRvci1saWNlbnNlXG4gKlxuICogT3RoZXJ3aXNlLCBpdCBpcyBwZXJtaXR0ZWQgdG8gaW50ZWdyYXRlIHRoZSBTcGluZSBSdW50aW1lcyBpbnRvIHNvZnR3YXJlIG9yXG4gKiBvdGhlcndpc2UgY3JlYXRlIGRlcml2YXRpdmUgd29ya3Mgb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIChjb2xsZWN0aXZlbHksXG4gKiBcIlByb2R1Y3RzXCIpLCBwcm92aWRlZCB0aGF0IGVhY2ggdXNlciBvZiB0aGUgUHJvZHVjdHMgbXVzdCBvYnRhaW4gdGhlaXIgb3duXG4gKiBTcGluZSBFZGl0b3IgbGljZW5zZSBhbmQgcmVkaXN0cmlidXRpb24gb2YgdGhlIFByb2R1Y3RzIGluIGFueSBmb3JtIG11c3RcbiAqIGluY2x1ZGUgdGhpcyBsaWNlbnNlIGFuZCBjb3B5cmlnaHQgbm90aWNlLlxuICpcbiAqIFRIRSBTUElORSBSVU5USU1FUyBBUkUgUFJPVklERUQgQlkgRVNPVEVSSUMgU09GVFdBUkUgTExDIFwiQVMgSVNcIiBBTkQgQU5ZXG4gKiBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBFU09URVJJQyBTT0ZUV0FSRSBMTEMgQkUgTElBQkxFIEZPUiBBTllcbiAqIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gKiAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVMsXG4gKiBCVVNJTkVTUyBJTlRFUlJVUFRJT04sIE9SIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTKSBIT1dFVkVSIENBVVNFRCBBTkRcbiAqIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhFXG4gKiBTUElORSBSVU5USU1FUywgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IHsgVGV4dHVyZVJlZ2lvbiB9IGZyb20gXCIuLi9UZXh0dXJlLmpzXCI7XG5pbXBvcnQgeyBTbG90IH0gZnJvbSBcIi4uL1Nsb3QuanNcIjtcbmltcG9ydCB7IEhhc1RleHR1cmVSZWdpb24gfSBmcm9tIFwiLi9IYXNUZXh0dXJlUmVnaW9uLmpzXCI7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCIuLi9VdGlscy5qc1wiO1xuXG5cbmV4cG9ydCBjbGFzcyBTZXF1ZW5jZSB7XG5cdHByaXZhdGUgc3RhdGljIF9uZXh0SUQgPSAwO1xuXG5cdGlkID0gU2VxdWVuY2UubmV4dElEKCk7XG5cdHJlZ2lvbnM6IFRleHR1cmVSZWdpb25bXTtcblx0c3RhcnQgPSAwO1xuXHRkaWdpdHMgPSAwO1xuXHQvKiogVGhlIGluZGV4IG9mIHRoZSByZWdpb24gdG8gc2hvdyBmb3IgdGhlIHNldHVwIHBvc2UuICovXG5cdHNldHVwSW5kZXggPSAwO1xuXG5cdGNvbnN0cnVjdG9yIChjb3VudDogbnVtYmVyKSB7XG5cdFx0dGhpcy5yZWdpb25zID0gbmV3IEFycmF5PFRleHR1cmVSZWdpb24+KGNvdW50KTtcblx0fVxuXG5cdGNvcHkgKCk6IFNlcXVlbmNlIHtcblx0XHRsZXQgY29weSA9IG5ldyBTZXF1ZW5jZSh0aGlzLnJlZ2lvbnMubGVuZ3RoKTtcblx0XHRVdGlscy5hcnJheUNvcHkodGhpcy5yZWdpb25zLCAwLCBjb3B5LnJlZ2lvbnMsIDAsIHRoaXMucmVnaW9ucy5sZW5ndGgpO1xuXHRcdGNvcHkuc3RhcnQgPSB0aGlzLnN0YXJ0O1xuXHRcdGNvcHkuZGlnaXRzID0gdGhpcy5kaWdpdHM7XG5cdFx0Y29weS5zZXR1cEluZGV4ID0gdGhpcy5zZXR1cEluZGV4O1xuXHRcdHJldHVybiBjb3B5O1xuXHR9XG5cblx0YXBwbHkgKHNsb3Q6IFNsb3QsIGF0dGFjaG1lbnQ6IEhhc1RleHR1cmVSZWdpb24pIHtcblx0XHRsZXQgaW5kZXggPSBzbG90LnNlcXVlbmNlSW5kZXg7XG5cdFx0aWYgKGluZGV4ID09IC0xKSBpbmRleCA9IHRoaXMuc2V0dXBJbmRleDtcblx0XHRpZiAoaW5kZXggPj0gdGhpcy5yZWdpb25zLmxlbmd0aCkgaW5kZXggPSB0aGlzLnJlZ2lvbnMubGVuZ3RoIC0gMTtcblx0XHRsZXQgcmVnaW9uID0gdGhpcy5yZWdpb25zW2luZGV4XTtcblx0XHRpZiAoYXR0YWNobWVudC5yZWdpb24gIT0gcmVnaW9uKSB7XG5cdFx0XHRhdHRhY2htZW50LnJlZ2lvbiA9IHJlZ2lvbjtcblx0XHRcdGF0dGFjaG1lbnQudXBkYXRlUmVnaW9uKCk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0UGF0aCAoYmFzZVBhdGg6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG5cdFx0bGV0IHJlc3VsdCA9IGJhc2VQYXRoO1xuXHRcdGxldCBmcmFtZSA9ICh0aGlzLnN0YXJ0ICsgaW5kZXgpLnRvU3RyaW5nKCk7XG5cdFx0Zm9yIChsZXQgaSA9IHRoaXMuZGlnaXRzIC0gZnJhbWUubGVuZ3RoOyBpID4gMDsgaS0tKVxuXHRcdFx0cmVzdWx0ICs9IFwiMFwiO1xuXHRcdHJlc3VsdCArPSBmcmFtZTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgbmV4dElEICgpOiBudW1iZXIge1xuXHRcdHJldHVybiBTZXF1ZW5jZS5fbmV4dElEKys7XG5cdH1cbn1cblxuZXhwb3J0IGVudW0gU2VxdWVuY2VNb2RlIHtcblx0aG9sZCA9IDAsXG5cdG9uY2UgPSAxLFxuXHRsb29wID0gMixcblx0cGluZ3BvbmcgPSAzLFxuXHRvbmNlUmV2ZXJzZSA9IDQsXG5cdGxvb3BSZXZlcnNlID0gNSxcblx0cGluZ3BvbmdSZXZlcnNlID0gNlxufVxuXG5leHBvcnQgY29uc3QgU2VxdWVuY2VNb2RlVmFsdWVzID0gW1xuXHRTZXF1ZW5jZU1vZGUuaG9sZCxcblx0U2VxdWVuY2VNb2RlLm9uY2UsXG5cdFNlcXVlbmNlTW9kZS5sb29wLFxuXHRTZXF1ZW5jZU1vZGUucGluZ3BvbmcsXG5cdFNlcXVlbmNlTW9kZS5vbmNlUmV2ZXJzZSxcblx0U2VxdWVuY2VNb2RlLmxvb3BSZXZlcnNlLFxuXHRTZXF1ZW5jZU1vZGUucGluZ3BvbmdSZXZlcnNlXG5dO1xuIl19", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { VertexAttachment } from \"./attachments/Attachment.js\";\nimport { StringSet, Utils, MathUtils } from \"./Utils.js\";\nimport { SequenceMode, SequenceModeValues } from \"./attachments/Sequence.js\";\n/** A simple container for a list of timelines and a name. */\nexport class Animation {\n    /** The animation's name, which is unique across all animations in the skeleton. */\n    name;\n    timelines = [];\n    timelineIds = new StringSet();\n    /** The duration of the animation in seconds, which is the highest time of all keys in the timeline. */\n    duration;\n    constructor(name, timelines, duration) {\n        if (!name)\n            throw new Error(\"name cannot be null.\");\n        this.name = name;\n        this.setTimelines(timelines);\n        this.duration = duration;\n    }\n    setTimelines(timelines) {\n        if (!timelines)\n            throw new Error(\"timelines cannot be null.\");\n        this.timelines = timelines;\n        this.timelineIds.clear();\n        for (var i = 0; i < timelines.length; i++)\n            this.timelineIds.addAll(timelines[i].getPropertyIds());\n    }\n    hasTimeline(ids) {\n        for (let i = 0; i < ids.length; i++)\n            if (this.timelineIds.contains(ids[i]))\n                return true;\n        return false;\n    }\n    /** Applies all the animation's timelines to the specified skeleton.\n     *\n     * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\n     * @param loop If true, the animation repeats after {@link #getDuration()}.\n     * @param events May be null to ignore fired events. */\n    apply(skeleton, lastTime, time, loop, events, alpha, blend, direction) {\n        if (!skeleton)\n            throw new Error(\"skeleton cannot be null.\");\n        if (loop && this.duration != 0) {\n            time %= this.duration;\n            if (lastTime > 0)\n                lastTime %= this.duration;\n        }\n        let timelines = this.timelines;\n        for (let i = 0, n = timelines.length; i < n; i++)\n            timelines[i].apply(skeleton, lastTime, time, events, alpha, blend, direction);\n    }\n}\n/** Controls how a timeline value is mixed with the setup pose value or current pose value when a timeline's `alpha`\n * < 1.\n *\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */\nexport var MixBlend;\n(function (MixBlend) {\n    /** Transitions from the setup value to the timeline value (the current value is not used). Before the first key, the setup\n     * value is set. */\n    MixBlend[MixBlend[\"setup\"] = 0] = \"setup\";\n    /** Transitions from the current value to the timeline value. Before the first key, transitions from the current value to\n     * the setup value. Timelines which perform instant transitions, such as {@link DrawOrderTimeline} or\n     * {@link AttachmentTimeline}, use the setup value before the first key.\n     *\n     * `first` is intended for the first animations applied, not for animations layered on top of those. */\n    MixBlend[MixBlend[\"first\"] = 1] = \"first\";\n    /** Transitions from the current value to the timeline value. No change is made before the first key (the current value is\n     * kept until the first key).\n     *\n     * `replace` is intended for animations layered on top of others, not for the first animations applied. */\n    MixBlend[MixBlend[\"replace\"] = 2] = \"replace\";\n    /** Transitions from the current value to the current value plus the timeline value. No change is made before the first key\n     * (the current value is kept until the first key).\n     *\n     * `add` is intended for animations layered on top of others, not for the first animations applied. Properties\n     * keyed by additive animations must be set manually or by another animation before applying the additive animations, else\n     * the property values will increase continually. */\n    MixBlend[MixBlend[\"add\"] = 3] = \"add\";\n})(MixBlend || (MixBlend = {}));\n/** Indicates whether a timeline's `alpha` is mixing out over time toward 0 (the setup or current pose value) or\n * mixing in toward 1 (the timeline's value).\n *\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */\nexport var MixDirection;\n(function (MixDirection) {\n    MixDirection[MixDirection[\"mixIn\"] = 0] = \"mixIn\";\n    MixDirection[MixDirection[\"mixOut\"] = 1] = \"mixOut\";\n})(MixDirection || (MixDirection = {}));\nconst Property = {\n    rotate: 0,\n    x: 1,\n    y: 2,\n    scaleX: 3,\n    scaleY: 4,\n    shearX: 5,\n    shearY: 6,\n    inherit: 7,\n    rgb: 8,\n    alpha: 9,\n    rgb2: 10,\n    attachment: 11,\n    deform: 12,\n    event: 13,\n    drawOrder: 14,\n    ikConstraint: 15,\n    transformConstraint: 16,\n    pathConstraintPosition: 17,\n    pathConstraintSpacing: 18,\n    pathConstraintMix: 19,\n    physicsConstraintInertia: 20,\n    physicsConstraintStrength: 21,\n    physicsConstraintDamping: 22,\n    physicsConstraintMass: 23,\n    physicsConstraintWind: 24,\n    physicsConstraintGravity: 25,\n    physicsConstraintMix: 26,\n    physicsConstraintReset: 27,\n    sequence: 28,\n};\n/** The interface for all timelines. */\nexport class Timeline {\n    propertyIds;\n    frames;\n    constructor(frameCount, propertyIds) {\n        this.propertyIds = propertyIds;\n        this.frames = Utils.newFloatArray(frameCount * this.getFrameEntries());\n    }\n    getPropertyIds() {\n        return this.propertyIds;\n    }\n    getFrameEntries() {\n        return 1;\n    }\n    getFrameCount() {\n        return this.frames.length / this.getFrameEntries();\n    }\n    getDuration() {\n        return this.frames[this.frames.length - this.getFrameEntries()];\n    }\n    static search1(frames, time) {\n        let n = frames.length;\n        for (let i = 1; i < n; i++)\n            if (frames[i] > time)\n                return i - 1;\n        return n - 1;\n    }\n    static search(frames, time, step) {\n        let n = frames.length;\n        for (let i = step; i < n; i += step)\n            if (frames[i] > time)\n                return i - step;\n        return n - step;\n    }\n}\n/** The base class for timelines that use interpolation between key frame values. */\nexport class CurveTimeline extends Timeline {\n    curves; // type, x, y, ...\n    constructor(frameCount, bezierCount, propertyIds) {\n        super(frameCount, propertyIds);\n        this.curves = Utils.newFloatArray(frameCount + bezierCount * 18 /*BEZIER_SIZE*/);\n        this.curves[frameCount - 1] = 1 /*STEPPED*/;\n    }\n    /** Sets the specified key frame to linear interpolation. */\n    setLinear(frame) {\n        this.curves[frame] = 0 /*LINEAR*/;\n    }\n    /** Sets the specified key frame to stepped interpolation. */\n    setStepped(frame) {\n        this.curves[frame] = 1 /*STEPPED*/;\n    }\n    /** Shrinks the storage for Bezier curves, for use when <code>bezierCount</code> (specified in the constructor) was larger\n     * than the actual number of Bezier curves. */\n    shrink(bezierCount) {\n        let size = this.getFrameCount() + bezierCount * 18 /*BEZIER_SIZE*/;\n        if (this.curves.length > size) {\n            let newCurves = Utils.newFloatArray(size);\n            Utils.arrayCopy(this.curves, 0, newCurves, 0, size);\n            this.curves = newCurves;\n        }\n    }\n    /** Stores the segments for the specified Bezier curve. For timelines that modify multiple values, there may be more than\n     * one curve per frame.\n     * @param bezier The ordinal of this Bezier curve for this timeline, between 0 and <code>bezierCount - 1</code> (specified\n     *           in the constructor), inclusive.\n     * @param frame Between 0 and <code>frameCount - 1</code>, inclusive.\n     * @param value The index of the value for this frame that this curve is used for.\n     * @param time1 The time for the first key.\n     * @param value1 The value for the first key.\n     * @param cx1 The time for the first Bezier handle.\n     * @param cy1 The value for the first Bezier handle.\n     * @param cx2 The time of the second Bezier handle.\n     * @param cy2 The value for the second Bezier handle.\n     * @param time2 The time for the second key.\n     * @param value2 The value for the second key. */\n    setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2) {\n        let curves = this.curves;\n        let i = this.getFrameCount() + bezier * 18 /*BEZIER_SIZE*/;\n        if (value == 0)\n            curves[frame] = 2 /*BEZIER*/ + i;\n        let tmpx = (time1 - cx1 * 2 + cx2) * 0.03, tmpy = (value1 - cy1 * 2 + cy2) * 0.03;\n        let dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006, dddy = ((cy1 - cy2) * 3 - value1 + value2) * 0.006;\n        let ddx = tmpx * 2 + dddx, ddy = tmpy * 2 + dddy;\n        let dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667, dy = (cy1 - value1) * 0.3 + tmpy + dddy * 0.16666667;\n        let x = time1 + dx, y = value1 + dy;\n        for (let n = i + 18 /*BEZIER_SIZE*/; i < n; i += 2) {\n            curves[i] = x;\n            curves[i + 1] = y;\n            dx += ddx;\n            dy += ddy;\n            ddx += dddx;\n            ddy += dddy;\n            x += dx;\n            y += dy;\n        }\n    }\n    /** Returns the Bezier interpolated value for the specified time.\n     * @param frameIndex The index into {@link #getFrames()} for the values of the frame before <code>time</code>.\n     * @param valueOffset The offset from <code>frameIndex</code> to the value this curve is used for.\n     * @param i The index of the Bezier segments. See {@link #getCurveType(int)}. */\n    getBezierValue(time, frameIndex, valueOffset, i) {\n        let curves = this.curves;\n        if (curves[i] > time) {\n            let x = this.frames[frameIndex], y = this.frames[frameIndex + valueOffset];\n            return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\n        }\n        let n = i + 18 /*BEZIER_SIZE*/;\n        for (i += 2; i < n; i += 2) {\n            if (curves[i] >= time) {\n                let x = curves[i - 2], y = curves[i - 1];\n                return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\n            }\n        }\n        frameIndex += this.getFrameEntries();\n        let x = curves[n - 2], y = curves[n - 1];\n        return y + (time - x) / (this.frames[frameIndex] - x) * (this.frames[frameIndex + valueOffset] - y);\n    }\n}\nexport class CurveTimeline1 extends CurveTimeline {\n    constructor(frameCount, bezierCount, propertyId) {\n        super(frameCount, bezierCount, [propertyId]);\n    }\n    getFrameEntries() {\n        return 2 /*ENTRIES*/;\n    }\n    /** Sets the time and value for the specified frame.\n     * @param frame Between 0 and <code>frameCount</code>, inclusive.\n     * @param time The frame time in seconds. */\n    setFrame(frame, time, value) {\n        frame <<= 1;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*VALUE*/] = value;\n    }\n    /** Returns the interpolated value for the specified time. */\n    getCurveValue(time) {\n        let frames = this.frames;\n        let i = frames.length - 2;\n        for (let ii = 2; ii <= i; ii += 2) {\n            if (frames[ii] > time) {\n                i = ii - 2;\n                break;\n            }\n        }\n        let curveType = this.curves[i >> 1];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i], value = frames[i + 1 /*VALUE*/];\n                return value + (time - before) / (frames[i + 2 /*ENTRIES*/] - before) * (frames[i + 2 /*ENTRIES*/ + 1 /*VALUE*/] - value);\n            case 1 /*STEPPED*/:\n                return frames[i + 1 /*VALUE*/];\n        }\n        return this.getBezierValue(time, i, 1 /*VALUE*/, curveType - 2 /*BEZIER*/);\n    }\n    getRelativeValue(time, alpha, blend, current, setup) {\n        if (time < this.frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    return setup;\n                case MixBlend.first:\n                    return current + (setup - current) * alpha;\n            }\n            return current;\n        }\n        let value = this.getCurveValue(time);\n        switch (blend) {\n            case MixBlend.setup:\n                return setup + value * alpha;\n            case MixBlend.first:\n            case MixBlend.replace:\n                value += setup - current;\n        }\n        return current + value * alpha;\n    }\n    getAbsoluteValue(time, alpha, blend, current, setup) {\n        if (time < this.frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    return setup;\n                case MixBlend.first:\n                    return current + (setup - current) * alpha;\n            }\n            return current;\n        }\n        let value = this.getCurveValue(time);\n        if (blend == MixBlend.setup)\n            return setup + (value - setup) * alpha;\n        return current + (value - current) * alpha;\n    }\n    getAbsoluteValue2(time, alpha, blend, current, setup, value) {\n        if (time < this.frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    return setup;\n                case MixBlend.first:\n                    return current + (setup - current) * alpha;\n            }\n            return current;\n        }\n        if (blend == MixBlend.setup)\n            return setup + (value - setup) * alpha;\n        return current + (value - current) * alpha;\n    }\n    getScaleValue(time, alpha, blend, direction, current, setup) {\n        const frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    return setup;\n                case MixBlend.first:\n                    return current + (setup - current) * alpha;\n            }\n            return current;\n        }\n        let value = this.getCurveValue(time) * setup;\n        if (alpha == 1) {\n            if (blend == MixBlend.add)\n                return current + value - setup;\n            return value;\n        }\n        // Mixing out uses sign of setup or current pose, else use sign of key.\n        if (direction == MixDirection.mixOut) {\n            switch (blend) {\n                case MixBlend.setup:\n                    return setup + (Math.abs(value) * MathUtils.signum(setup) - setup) * alpha;\n                case MixBlend.first:\n                case MixBlend.replace:\n                    return current + (Math.abs(value) * MathUtils.signum(current) - current) * alpha;\n            }\n        }\n        else {\n            let s = 0;\n            switch (blend) {\n                case MixBlend.setup:\n                    s = Math.abs(setup) * MathUtils.signum(value);\n                    return s + (value - s) * alpha;\n                case MixBlend.first:\n                case MixBlend.replace:\n                    s = Math.abs(current) * MathUtils.signum(value);\n                    return s + (value - s) * alpha;\n            }\n        }\n        return current + (value - setup) * alpha;\n    }\n}\n/** The base class for a {@link CurveTimeline} which sets two properties. */\nexport class CurveTimeline2 extends CurveTimeline {\n    /** @param bezierCount The maximum number of Bezier curves. See {@link #shrink(int)}.\n     * @param propertyIds Unique identifiers for the properties the timeline modifies. */\n    constructor(frameCount, bezierCount, propertyId1, propertyId2) {\n        super(frameCount, bezierCount, [propertyId1, propertyId2]);\n    }\n    getFrameEntries() {\n        return 3 /*ENTRIES*/;\n    }\n    /** Sets the time and values for the specified frame.\n     * @param frame Between 0 and <code>frameCount</code>, inclusive.\n     * @param time The frame time in seconds. */\n    setFrame(frame, time, value1, value2) {\n        frame *= 3 /*ENTRIES*/;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*VALUE1*/] = value1;\n        this.frames[frame + 2 /*VALUE2*/] = value2;\n    }\n}\n/** Changes a bone's local {@link Bone#rotation}. */\nexport class RotateTimeline extends CurveTimeline1 {\n    boneIndex = 0;\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.rotate + \"|\" + boneIndex);\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (bone.active)\n            bone.rotation = this.getRelativeValue(time, alpha, blend, bone.rotation, bone.data.rotation);\n    }\n}\n/** Changes a bone's local {@link Bone#x} and {@link Bone#y}. */\nexport class TranslateTimeline extends CurveTimeline2 {\n    boneIndex = 0;\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.x + \"|\" + boneIndex, Property.y + \"|\" + boneIndex);\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.x = bone.data.x;\n                    bone.y = bone.data.y;\n                    return;\n                case MixBlend.first:\n                    bone.x += (bone.data.x - bone.x) * alpha;\n                    bone.y += (bone.data.y - bone.y) * alpha;\n            }\n            return;\n        }\n        let x = 0, y = 0;\n        let i = Timeline.search(frames, time, 3 /*ENTRIES*/);\n        let curveType = this.curves[i / 3 /*ENTRIES*/];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                x = frames[i + 1 /*VALUE1*/];\n                y = frames[i + 2 /*VALUE2*/];\n                let t = (time - before) / (frames[i + 3 /*ENTRIES*/] - before);\n                x += (frames[i + 3 /*ENTRIES*/ + 1 /*VALUE1*/] - x) * t;\n                y += (frames[i + 3 /*ENTRIES*/ + 2 /*VALUE2*/] - y) * t;\n                break;\n            case 1 /*STEPPED*/:\n                x = frames[i + 1 /*VALUE1*/];\n                y = frames[i + 2 /*VALUE2*/];\n                break;\n            default:\n                x = this.getBezierValue(time, i, 1 /*VALUE1*/, curveType - 2 /*BEZIER*/);\n                y = this.getBezierValue(time, i, 2 /*VALUE2*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n        }\n        switch (blend) {\n            case MixBlend.setup:\n                bone.x = bone.data.x + x * alpha;\n                bone.y = bone.data.y + y * alpha;\n                break;\n            case MixBlend.first:\n            case MixBlend.replace:\n                bone.x += (bone.data.x + x - bone.x) * alpha;\n                bone.y += (bone.data.y + y - bone.y) * alpha;\n                break;\n            case MixBlend.add:\n                bone.x += x * alpha;\n                bone.y += y * alpha;\n        }\n    }\n}\n/** Changes a bone's local {@link Bone#x}. */\nexport class TranslateXTimeline extends CurveTimeline1 {\n    boneIndex = 0;\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.x + \"|\" + boneIndex);\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (bone.active)\n            bone.x = this.getRelativeValue(time, alpha, blend, bone.x, bone.data.x);\n    }\n}\n/** Changes a bone's local {@link Bone#x}. */\nexport class TranslateYTimeline extends CurveTimeline1 {\n    boneIndex = 0;\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.y + \"|\" + boneIndex);\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (bone.active)\n            bone.y = this.getRelativeValue(time, alpha, blend, bone.y, bone.data.y);\n    }\n}\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\nexport class ScaleTimeline extends CurveTimeline2 {\n    boneIndex = 0;\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.scaleX + \"|\" + boneIndex, Property.scaleY + \"|\" + boneIndex);\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.scaleX = bone.data.scaleX;\n                    bone.scaleY = bone.data.scaleY;\n                    return;\n                case MixBlend.first:\n                    bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\n                    bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\n            }\n            return;\n        }\n        let x, y;\n        let i = Timeline.search(frames, time, 3 /*ENTRIES*/);\n        let curveType = this.curves[i / 3 /*ENTRIES*/];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                x = frames[i + 1 /*VALUE1*/];\n                y = frames[i + 2 /*VALUE2*/];\n                let t = (time - before) / (frames[i + 3 /*ENTRIES*/] - before);\n                x += (frames[i + 3 /*ENTRIES*/ + 1 /*VALUE1*/] - x) * t;\n                y += (frames[i + 3 /*ENTRIES*/ + 2 /*VALUE2*/] - y) * t;\n                break;\n            case 1 /*STEPPED*/:\n                x = frames[i + 1 /*VALUE1*/];\n                y = frames[i + 2 /*VALUE2*/];\n                break;\n            default:\n                x = this.getBezierValue(time, i, 1 /*VALUE1*/, curveType - 2 /*BEZIER*/);\n                y = this.getBezierValue(time, i, 2 /*VALUE2*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n        }\n        x *= bone.data.scaleX;\n        y *= bone.data.scaleY;\n        if (alpha == 1) {\n            if (blend == MixBlend.add) {\n                bone.scaleX += x - bone.data.scaleX;\n                bone.scaleY += y - bone.data.scaleY;\n            }\n            else {\n                bone.scaleX = x;\n                bone.scaleY = y;\n            }\n        }\n        else {\n            let bx = 0, by = 0;\n            if (direction == MixDirection.mixOut) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        bx = bone.data.scaleX;\n                        by = bone.data.scaleY;\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n                        break;\n                    case MixBlend.first:\n                    case MixBlend.replace:\n                        bx = bone.scaleX;\n                        by = bone.scaleY;\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n                        break;\n                    case MixBlend.add:\n                        bone.scaleX += (x - bone.data.scaleX) * alpha;\n                        bone.scaleY += (y - bone.data.scaleY) * alpha;\n                }\n            }\n            else {\n                switch (blend) {\n                    case MixBlend.setup:\n                        bx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\n                        by = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\n                        bone.scaleX = bx + (x - bx) * alpha;\n                        bone.scaleY = by + (y - by) * alpha;\n                        break;\n                    case MixBlend.first:\n                    case MixBlend.replace:\n                        bx = Math.abs(bone.scaleX) * MathUtils.signum(x);\n                        by = Math.abs(bone.scaleY) * MathUtils.signum(y);\n                        bone.scaleX = bx + (x - bx) * alpha;\n                        bone.scaleY = by + (y - by) * alpha;\n                        break;\n                    case MixBlend.add:\n                        bone.scaleX += (x - bone.data.scaleX) * alpha;\n                        bone.scaleY += (y - bone.data.scaleY) * alpha;\n                }\n            }\n        }\n    }\n}\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\nexport class ScaleXTimeline extends CurveTimeline1 {\n    boneIndex = 0;\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.scaleX + \"|\" + boneIndex);\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (bone.active)\n            bone.scaleX = this.getScaleValue(time, alpha, blend, direction, bone.scaleX, bone.data.scaleX);\n    }\n}\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\nexport class ScaleYTimeline extends CurveTimeline1 {\n    boneIndex = 0;\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.scaleY + \"|\" + boneIndex);\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (bone.active)\n            bone.scaleY = this.getScaleValue(time, alpha, blend, direction, bone.scaleY, bone.data.scaleY);\n    }\n}\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class ShearTimeline extends CurveTimeline2 {\n    boneIndex = 0;\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.shearX + \"|\" + boneIndex, Property.shearY + \"|\" + boneIndex);\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.shearX = bone.data.shearX;\n                    bone.shearY = bone.data.shearY;\n                    return;\n                case MixBlend.first:\n                    bone.shearX += (bone.data.shearX - bone.shearX) * alpha;\n                    bone.shearY += (bone.data.shearY - bone.shearY) * alpha;\n            }\n            return;\n        }\n        let x = 0, y = 0;\n        let i = Timeline.search(frames, time, 3 /*ENTRIES*/);\n        let curveType = this.curves[i / 3 /*ENTRIES*/];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                x = frames[i + 1 /*VALUE1*/];\n                y = frames[i + 2 /*VALUE2*/];\n                let t = (time - before) / (frames[i + 3 /*ENTRIES*/] - before);\n                x += (frames[i + 3 /*ENTRIES*/ + 1 /*VALUE1*/] - x) * t;\n                y += (frames[i + 3 /*ENTRIES*/ + 2 /*VALUE2*/] - y) * t;\n                break;\n            case 1 /*STEPPED*/:\n                x = frames[i + 1 /*VALUE1*/];\n                y = frames[i + 2 /*VALUE2*/];\n                break;\n            default:\n                x = this.getBezierValue(time, i, 1 /*VALUE1*/, curveType - 2 /*BEZIER*/);\n                y = this.getBezierValue(time, i, 2 /*VALUE2*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n        }\n        switch (blend) {\n            case MixBlend.setup:\n                bone.shearX = bone.data.shearX + x * alpha;\n                bone.shearY = bone.data.shearY + y * alpha;\n                break;\n            case MixBlend.first:\n            case MixBlend.replace:\n                bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\n                bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\n                break;\n            case MixBlend.add:\n                bone.shearX += x * alpha;\n                bone.shearY += y * alpha;\n        }\n    }\n}\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class ShearXTimeline extends CurveTimeline1 {\n    boneIndex = 0;\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.shearX + \"|\" + boneIndex);\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (bone.active)\n            bone.shearX = this.getRelativeValue(time, alpha, blend, bone.shearX, bone.data.shearX);\n    }\n}\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class ShearYTimeline extends CurveTimeline1 {\n    boneIndex = 0;\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.shearY + \"|\" + boneIndex);\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (bone.active)\n            bone.shearY = this.getRelativeValue(time, alpha, blend, bone.shearY, bone.data.shearY);\n    }\n}\nexport class InheritTimeline extends Timeline {\n    boneIndex = 0;\n    constructor(frameCount, boneIndex) {\n        super(frameCount, [Property.inherit + \"|\" + boneIndex]);\n        this.boneIndex = boneIndex;\n    }\n    getFrameEntries() {\n        return 2 /*ENTRIES*/;\n    }\n    /** Sets the transform mode for the specified frame.\n     * @param frame Between 0 and <code>frameCount</code>, inclusive.\n     * @param time The frame time in seconds. */\n    setFrame(frame, time, inherit) {\n        frame *= 2 /*ENTRIES*/;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*INHERIT*/] = inherit;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (!bone.active)\n            return;\n        if (direction == MixDirection.mixOut) {\n            if (blend == MixBlend.setup)\n                bone.inherit = bone.data.inherit;\n            return;\n        }\n        let frames = this.frames;\n        if (time < frames[0]) {\n            if (blend == MixBlend.setup || blend == MixBlend.first)\n                bone.inherit = bone.data.inherit;\n            return;\n        }\n        bone.inherit = this.frames[Timeline.search(frames, time, 2 /*ENTRIES*/) + 1 /*INHERIT*/];\n    }\n}\n/** Changes a slot's {@link Slot#color}. */\nexport class RGBATimeline extends CurveTimeline {\n    slotIndex = 0;\n    constructor(frameCount, bezierCount, slotIndex) {\n        super(frameCount, bezierCount, [\n            Property.rgb + \"|\" + slotIndex,\n            Property.alpha + \"|\" + slotIndex\n        ]);\n        this.slotIndex = slotIndex;\n    }\n    getFrameEntries() {\n        return 5 /*ENTRIES*/;\n    }\n    /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\n    setFrame(frame, time, r, g, b, a) {\n        frame *= 5 /*ENTRIES*/;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*R*/] = r;\n        this.frames[frame + 2 /*G*/] = g;\n        this.frames[frame + 3 /*B*/] = b;\n        this.frames[frame + 4 /*A*/] = a;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        let frames = this.frames;\n        let color = slot.color;\n        if (time < frames[0]) {\n            let setup = slot.data.color;\n            switch (blend) {\n                case MixBlend.setup:\n                    color.setFromColor(setup);\n                    return;\n                case MixBlend.first:\n                    color.add((setup.r - color.r) * alpha, (setup.g - color.g) * alpha, (setup.b - color.b) * alpha, (setup.a - color.a) * alpha);\n            }\n            return;\n        }\n        let r = 0, g = 0, b = 0, a = 0;\n        let i = Timeline.search(frames, time, 5 /*ENTRIES*/);\n        let curveType = this.curves[i / 5 /*ENTRIES*/];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                a = frames[i + 4 /*A*/];\n                let t = (time - before) / (frames[i + 5 /*ENTRIES*/] - before);\n                r += (frames[i + 5 /*ENTRIES*/ + 1 /*R*/] - r) * t;\n                g += (frames[i + 5 /*ENTRIES*/ + 2 /*G*/] - g) * t;\n                b += (frames[i + 5 /*ENTRIES*/ + 3 /*B*/] - b) * t;\n                a += (frames[i + 5 /*ENTRIES*/ + 4 /*A*/] - a) * t;\n                break;\n            case 1 /*STEPPED*/:\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                a = frames[i + 4 /*A*/];\n                break;\n            default:\n                r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);\n                g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n                b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n                a = this.getBezierValue(time, i, 4 /*A*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);\n        }\n        if (alpha == 1)\n            color.set(r, g, b, a);\n        else {\n            if (blend == MixBlend.setup)\n                color.setFromColor(slot.data.color);\n            color.add((r - color.r) * alpha, (g - color.g) * alpha, (b - color.b) * alpha, (a - color.a) * alpha);\n        }\n    }\n}\n/** Changes a slot's {@link Slot#color}. */\nexport class RGBTimeline extends CurveTimeline {\n    slotIndex = 0;\n    constructor(frameCount, bezierCount, slotIndex) {\n        super(frameCount, bezierCount, [\n            Property.rgb + \"|\" + slotIndex\n        ]);\n        this.slotIndex = slotIndex;\n    }\n    getFrameEntries() {\n        return 4 /*ENTRIES*/;\n    }\n    /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\n    setFrame(frame, time, r, g, b) {\n        frame <<= 2;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*R*/] = r;\n        this.frames[frame + 2 /*G*/] = g;\n        this.frames[frame + 3 /*B*/] = b;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        let frames = this.frames;\n        let color = slot.color;\n        if (time < frames[0]) {\n            let setup = slot.data.color;\n            switch (blend) {\n                case MixBlend.setup:\n                    color.r = setup.r;\n                    color.g = setup.g;\n                    color.b = setup.b;\n                    return;\n                case MixBlend.first:\n                    color.r += (setup.r - color.r) * alpha;\n                    color.g += (setup.g - color.g) * alpha;\n                    color.b += (setup.b - color.b) * alpha;\n            }\n            return;\n        }\n        let r = 0, g = 0, b = 0;\n        let i = Timeline.search(frames, time, 4 /*ENTRIES*/);\n        let curveType = this.curves[i >> 2];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                let t = (time - before) / (frames[i + 4 /*ENTRIES*/] - before);\n                r += (frames[i + 4 /*ENTRIES*/ + 1 /*R*/] - r) * t;\n                g += (frames[i + 4 /*ENTRIES*/ + 2 /*G*/] - g) * t;\n                b += (frames[i + 4 /*ENTRIES*/ + 3 /*B*/] - b) * t;\n                break;\n            case 1 /*STEPPED*/:\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                break;\n            default:\n                r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);\n                g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n                b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n        }\n        if (alpha == 1) {\n            color.r = r;\n            color.g = g;\n            color.b = b;\n        }\n        else {\n            if (blend == MixBlend.setup) {\n                let setup = slot.data.color;\n                color.r = setup.r;\n                color.g = setup.g;\n                color.b = setup.b;\n            }\n            color.r += (r - color.r) * alpha;\n            color.g += (g - color.g) * alpha;\n            color.b += (b - color.b) * alpha;\n        }\n    }\n}\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class AlphaTimeline extends CurveTimeline1 {\n    slotIndex = 0;\n    constructor(frameCount, bezierCount, slotIndex) {\n        super(frameCount, bezierCount, Property.alpha + \"|\" + slotIndex);\n        this.slotIndex = slotIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        let color = slot.color;\n        if (time < this.frames[0]) {\n            let setup = slot.data.color;\n            switch (blend) {\n                case MixBlend.setup:\n                    color.a = setup.a;\n                    return;\n                case MixBlend.first:\n                    color.a += (setup.a - color.a) * alpha;\n            }\n            return;\n        }\n        let a = this.getCurveValue(time);\n        if (alpha == 1)\n            color.a = a;\n        else {\n            if (blend == MixBlend.setup)\n                color.a = slot.data.color.a;\n            color.a += (a - color.a) * alpha;\n        }\n    }\n}\n/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */\nexport class RGBA2Timeline extends CurveTimeline {\n    slotIndex = 0;\n    constructor(frameCount, bezierCount, slotIndex) {\n        super(frameCount, bezierCount, [\n            Property.rgb + \"|\" + slotIndex,\n            Property.alpha + \"|\" + slotIndex,\n            Property.rgb2 + \"|\" + slotIndex\n        ]);\n        this.slotIndex = slotIndex;\n    }\n    getFrameEntries() {\n        return 8 /*ENTRIES*/;\n    }\n    /** Sets the time in seconds, light, and dark colors for the specified key frame. */\n    setFrame(frame, time, r, g, b, a, r2, g2, b2) {\n        frame <<= 3;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*R*/] = r;\n        this.frames[frame + 2 /*G*/] = g;\n        this.frames[frame + 3 /*B*/] = b;\n        this.frames[frame + 4 /*A*/] = a;\n        this.frames[frame + 5 /*R2*/] = r2;\n        this.frames[frame + 6 /*G2*/] = g2;\n        this.frames[frame + 7 /*B2*/] = b2;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        let frames = this.frames;\n        let light = slot.color, dark = slot.darkColor;\n        if (time < frames[0]) {\n            let setupLight = slot.data.color, setupDark = slot.data.darkColor;\n            switch (blend) {\n                case MixBlend.setup:\n                    light.setFromColor(setupLight);\n                    dark.r = setupDark.r;\n                    dark.g = setupDark.g;\n                    dark.b = setupDark.b;\n                    return;\n                case MixBlend.first:\n                    light.add((setupLight.r - light.r) * alpha, (setupLight.g - light.g) * alpha, (setupLight.b - light.b) * alpha, (setupLight.a - light.a) * alpha);\n                    dark.r += (setupDark.r - dark.r) * alpha;\n                    dark.g += (setupDark.g - dark.g) * alpha;\n                    dark.b += (setupDark.b - dark.b) * alpha;\n            }\n            return;\n        }\n        let r = 0, g = 0, b = 0, a = 0, r2 = 0, g2 = 0, b2 = 0;\n        let i = Timeline.search(frames, time, 8 /*ENTRIES*/);\n        let curveType = this.curves[i >> 3];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                a = frames[i + 4 /*A*/];\n                r2 = frames[i + 5 /*R2*/];\n                g2 = frames[i + 6 /*G2*/];\n                b2 = frames[i + 7 /*B2*/];\n                let t = (time - before) / (frames[i + 8 /*ENTRIES*/] - before);\n                r += (frames[i + 8 /*ENTRIES*/ + 1 /*R*/] - r) * t;\n                g += (frames[i + 8 /*ENTRIES*/ + 2 /*G*/] - g) * t;\n                b += (frames[i + 8 /*ENTRIES*/ + 3 /*B*/] - b) * t;\n                a += (frames[i + 8 /*ENTRIES*/ + 4 /*A*/] - a) * t;\n                r2 += (frames[i + 8 /*ENTRIES*/ + 5 /*R2*/] - r2) * t;\n                g2 += (frames[i + 8 /*ENTRIES*/ + 6 /*G2*/] - g2) * t;\n                b2 += (frames[i + 8 /*ENTRIES*/ + 7 /*B2*/] - b2) * t;\n                break;\n            case 1 /*STEPPED*/:\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                a = frames[i + 4 /*A*/];\n                r2 = frames[i + 5 /*R2*/];\n                g2 = frames[i + 6 /*G2*/];\n                b2 = frames[i + 7 /*B2*/];\n                break;\n            default:\n                r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);\n                g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n                b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n                a = this.getBezierValue(time, i, 4 /*A*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);\n                r2 = this.getBezierValue(time, i, 5 /*R2*/, curveType + 18 /*BEZIER_SIZE*/ * 4 - 2 /*BEZIER*/);\n                g2 = this.getBezierValue(time, i, 6 /*G2*/, curveType + 18 /*BEZIER_SIZE*/ * 5 - 2 /*BEZIER*/);\n                b2 = this.getBezierValue(time, i, 7 /*B2*/, curveType + 18 /*BEZIER_SIZE*/ * 6 - 2 /*BEZIER*/);\n        }\n        if (alpha == 1) {\n            light.set(r, g, b, a);\n            dark.r = r2;\n            dark.g = g2;\n            dark.b = b2;\n        }\n        else {\n            if (blend == MixBlend.setup) {\n                light.setFromColor(slot.data.color);\n                let setupDark = slot.data.darkColor;\n                dark.r = setupDark.r;\n                dark.g = setupDark.g;\n                dark.b = setupDark.b;\n            }\n            light.add((r - light.r) * alpha, (g - light.g) * alpha, (b - light.b) * alpha, (a - light.a) * alpha);\n            dark.r += (r2 - dark.r) * alpha;\n            dark.g += (g2 - dark.g) * alpha;\n            dark.b += (b2 - dark.b) * alpha;\n        }\n    }\n}\n/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */\nexport class RGB2Timeline extends CurveTimeline {\n    slotIndex = 0;\n    constructor(frameCount, bezierCount, slotIndex) {\n        super(frameCount, bezierCount, [\n            Property.rgb + \"|\" + slotIndex,\n            Property.rgb2 + \"|\" + slotIndex\n        ]);\n        this.slotIndex = slotIndex;\n    }\n    getFrameEntries() {\n        return 7 /*ENTRIES*/;\n    }\n    /** Sets the time in seconds, light, and dark colors for the specified key frame. */\n    setFrame(frame, time, r, g, b, r2, g2, b2) {\n        frame *= 7 /*ENTRIES*/;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*R*/] = r;\n        this.frames[frame + 2 /*G*/] = g;\n        this.frames[frame + 3 /*B*/] = b;\n        this.frames[frame + 4 /*R2*/] = r2;\n        this.frames[frame + 5 /*G2*/] = g2;\n        this.frames[frame + 6 /*B2*/] = b2;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        let frames = this.frames;\n        let light = slot.color, dark = slot.darkColor;\n        if (time < frames[0]) {\n            let setupLight = slot.data.color, setupDark = slot.data.darkColor;\n            switch (blend) {\n                case MixBlend.setup:\n                    light.r = setupLight.r;\n                    light.g = setupLight.g;\n                    light.b = setupLight.b;\n                    dark.r = setupDark.r;\n                    dark.g = setupDark.g;\n                    dark.b = setupDark.b;\n                    return;\n                case MixBlend.first:\n                    light.r += (setupLight.r - light.r) * alpha;\n                    light.g += (setupLight.g - light.g) * alpha;\n                    light.b += (setupLight.b - light.b) * alpha;\n                    dark.r += (setupDark.r - dark.r) * alpha;\n                    dark.g += (setupDark.g - dark.g) * alpha;\n                    dark.b += (setupDark.b - dark.b) * alpha;\n            }\n            return;\n        }\n        let r = 0, g = 0, b = 0, a = 0, r2 = 0, g2 = 0, b2 = 0;\n        let i = Timeline.search(frames, time, 7 /*ENTRIES*/);\n        let curveType = this.curves[i / 7 /*ENTRIES*/];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                r2 = frames[i + 4 /*R2*/];\n                g2 = frames[i + 5 /*G2*/];\n                b2 = frames[i + 6 /*B2*/];\n                let t = (time - before) / (frames[i + 7 /*ENTRIES*/] - before);\n                r += (frames[i + 7 /*ENTRIES*/ + 1 /*R*/] - r) * t;\n                g += (frames[i + 7 /*ENTRIES*/ + 2 /*G*/] - g) * t;\n                b += (frames[i + 7 /*ENTRIES*/ + 3 /*B*/] - b) * t;\n                r2 += (frames[i + 7 /*ENTRIES*/ + 4 /*R2*/] - r2) * t;\n                g2 += (frames[i + 7 /*ENTRIES*/ + 5 /*G2*/] - g2) * t;\n                b2 += (frames[i + 7 /*ENTRIES*/ + 6 /*B2*/] - b2) * t;\n                break;\n            case 1 /*STEPPED*/:\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                r2 = frames[i + 4 /*R2*/];\n                g2 = frames[i + 5 /*G2*/];\n                b2 = frames[i + 6 /*B2*/];\n                break;\n            default:\n                r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);\n                g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n                b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n                r2 = this.getBezierValue(time, i, 4 /*R2*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);\n                g2 = this.getBezierValue(time, i, 5 /*G2*/, curveType + 18 /*BEZIER_SIZE*/ * 4 - 2 /*BEZIER*/);\n                b2 = this.getBezierValue(time, i, 6 /*B2*/, curveType + 18 /*BEZIER_SIZE*/ * 5 - 2 /*BEZIER*/);\n        }\n        if (alpha == 1) {\n            light.r = r;\n            light.g = g;\n            light.b = b;\n            dark.r = r2;\n            dark.g = g2;\n            dark.b = b2;\n        }\n        else {\n            if (blend == MixBlend.setup) {\n                let setupLight = slot.data.color, setupDark = slot.data.darkColor;\n                light.r = setupLight.r;\n                light.g = setupLight.g;\n                light.b = setupLight.b;\n                dark.r = setupDark.r;\n                dark.g = setupDark.g;\n                dark.b = setupDark.b;\n            }\n            light.r += (r - light.r) * alpha;\n            light.g += (g - light.g) * alpha;\n            light.b += (b - light.b) * alpha;\n            dark.r += (r2 - dark.r) * alpha;\n            dark.g += (g2 - dark.g) * alpha;\n            dark.b += (b2 - dark.b) * alpha;\n        }\n    }\n}\n/** Changes a slot's {@link Slot#attachment}. */\nexport class AttachmentTimeline extends Timeline {\n    slotIndex = 0;\n    /** The attachment name for each key frame. May contain null values to clear the attachment. */\n    attachmentNames;\n    constructor(frameCount, slotIndex) {\n        super(frameCount, [\n            Property.attachment + \"|\" + slotIndex\n        ]);\n        this.slotIndex = slotIndex;\n        this.attachmentNames = new Array(frameCount);\n    }\n    getFrameCount() {\n        return this.frames.length;\n    }\n    /** Sets the time in seconds and the attachment name for the specified key frame. */\n    setFrame(frame, time, attachmentName) {\n        this.frames[frame] = time;\n        this.attachmentNames[frame] = attachmentName;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        if (direction == MixDirection.mixOut) {\n            if (blend == MixBlend.setup)\n                this.setAttachment(skeleton, slot, slot.data.attachmentName);\n            return;\n        }\n        if (time < this.frames[0]) {\n            if (blend == MixBlend.setup || blend == MixBlend.first)\n                this.setAttachment(skeleton, slot, slot.data.attachmentName);\n            return;\n        }\n        this.setAttachment(skeleton, slot, this.attachmentNames[Timeline.search1(this.frames, time)]);\n    }\n    setAttachment(skeleton, slot, attachmentName) {\n        slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\n    }\n}\n/** Changes a slot's {@link Slot#deform} to deform a {@link VertexAttachment}. */\nexport class DeformTimeline extends CurveTimeline {\n    slotIndex = 0;\n    /** The attachment that will be deformed. */\n    attachment;\n    /** The vertices for each key frame. */\n    vertices;\n    constructor(frameCount, bezierCount, slotIndex, attachment) {\n        super(frameCount, bezierCount, [\n            Property.deform + \"|\" + slotIndex + \"|\" + attachment.id\n        ]);\n        this.slotIndex = slotIndex;\n        this.attachment = attachment;\n        this.vertices = new Array(frameCount);\n    }\n    getFrameCount() {\n        return this.frames.length;\n    }\n    /** Sets the time in seconds and the vertices for the specified key frame.\n     * @param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights. */\n    setFrame(frame, time, vertices) {\n        this.frames[frame] = time;\n        this.vertices[frame] = vertices;\n    }\n    /** @param value1 Ignored (0 is used for a deform timeline).\n     * @param value2 Ignored (1 is used for a deform timeline). */\n    setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2) {\n        let curves = this.curves;\n        let i = this.getFrameCount() + bezier * 18 /*BEZIER_SIZE*/;\n        if (value == 0)\n            curves[frame] = 2 /*BEZIER*/ + i;\n        let tmpx = (time1 - cx1 * 2 + cx2) * 0.03, tmpy = cy2 * 0.03 - cy1 * 0.06;\n        let dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006, dddy = (cy1 - cy2 + 0.33333333) * 0.018;\n        let ddx = tmpx * 2 + dddx, ddy = tmpy * 2 + dddy;\n        let dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667, dy = cy1 * 0.3 + tmpy + dddy * 0.16666667;\n        let x = time1 + dx, y = dy;\n        for (let n = i + 18 /*BEZIER_SIZE*/; i < n; i += 2) {\n            curves[i] = x;\n            curves[i + 1] = y;\n            dx += ddx;\n            dy += ddy;\n            ddx += dddx;\n            ddy += dddy;\n            x += dx;\n            y += dy;\n        }\n    }\n    getCurvePercent(time, frame) {\n        let curves = this.curves;\n        let i = curves[frame];\n        switch (i) {\n            case 0 /*LINEAR*/:\n                let x = this.frames[frame];\n                return (time - x) / (this.frames[frame + this.getFrameEntries()] - x);\n            case 1 /*STEPPED*/:\n                return 0;\n        }\n        i -= 2 /*BEZIER*/;\n        if (curves[i] > time) {\n            let x = this.frames[frame];\n            return curves[i + 1] * (time - x) / (curves[i] - x);\n        }\n        let n = i + 18 /*BEZIER_SIZE*/;\n        for (i += 2; i < n; i += 2) {\n            if (curves[i] >= time) {\n                let x = curves[i - 2], y = curves[i - 1];\n                return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\n            }\n        }\n        let x = curves[n - 2], y = curves[n - 1];\n        return y + (1 - y) * (time - x) / (this.frames[frame + this.getFrameEntries()] - x);\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        let slotAttachment = slot.getAttachment();\n        if (!slotAttachment)\n            return;\n        if (!(slotAttachment instanceof VertexAttachment) || slotAttachment.timelineAttachment != this.attachment)\n            return;\n        let deform = slot.deform;\n        if (deform.length == 0)\n            blend = MixBlend.setup;\n        let vertices = this.vertices;\n        let vertexCount = vertices[0].length;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    deform.length = 0;\n                    return;\n                case MixBlend.first:\n                    if (alpha == 1) {\n                        deform.length = 0;\n                        return;\n                    }\n                    deform.length = vertexCount;\n                    let vertexAttachment = slotAttachment;\n                    if (!vertexAttachment.bones) {\n                        // Unweighted vertex positions.\n                        let setupVertices = vertexAttachment.vertices;\n                        for (var i = 0; i < vertexCount; i++)\n                            deform[i] += (setupVertices[i] - deform[i]) * alpha;\n                    }\n                    else {\n                        // Weighted deform offsets.\n                        alpha = 1 - alpha;\n                        for (var i = 0; i < vertexCount; i++)\n                            deform[i] *= alpha;\n                    }\n            }\n            return;\n        }\n        deform.length = vertexCount;\n        if (time >= frames[frames.length - 1]) {\n            let lastVertices = vertices[frames.length - 1];\n            if (alpha == 1) {\n                if (blend == MixBlend.add) {\n                    let vertexAttachment = slotAttachment;\n                    if (!vertexAttachment.bones) {\n                        // Unweighted vertex positions, with alpha.\n                        let setupVertices = vertexAttachment.vertices;\n                        for (let i = 0; i < vertexCount; i++)\n                            deform[i] += lastVertices[i] - setupVertices[i];\n                    }\n                    else {\n                        // Weighted deform offsets, with alpha.\n                        for (let i = 0; i < vertexCount; i++)\n                            deform[i] += lastVertices[i];\n                    }\n                }\n                else\n                    Utils.arrayCopy(lastVertices, 0, deform, 0, vertexCount);\n            }\n            else {\n                switch (blend) {\n                    case MixBlend.setup: {\n                        let vertexAttachment = slotAttachment;\n                        if (!vertexAttachment.bones) {\n                            // Unweighted vertex positions, with alpha.\n                            let setupVertices = vertexAttachment.vertices;\n                            for (let i = 0; i < vertexCount; i++) {\n                                let setup = setupVertices[i];\n                                deform[i] = setup + (lastVertices[i] - setup) * alpha;\n                            }\n                        }\n                        else {\n                            // Weighted deform offsets, with alpha.\n                            for (let i = 0; i < vertexCount; i++)\n                                deform[i] = lastVertices[i] * alpha;\n                        }\n                        break;\n                    }\n                    case MixBlend.first:\n                    case MixBlend.replace:\n                        for (let i = 0; i < vertexCount; i++)\n                            deform[i] += (lastVertices[i] - deform[i]) * alpha;\n                        break;\n                    case MixBlend.add:\n                        let vertexAttachment = slotAttachment;\n                        if (!vertexAttachment.bones) {\n                            // Unweighted vertex positions, with alpha.\n                            let setupVertices = vertexAttachment.vertices;\n                            for (let i = 0; i < vertexCount; i++)\n                                deform[i] += (lastVertices[i] - setupVertices[i]) * alpha;\n                        }\n                        else {\n                            // Weighted deform offsets, with alpha.\n                            for (let i = 0; i < vertexCount; i++)\n                                deform[i] += lastVertices[i] * alpha;\n                        }\n                }\n            }\n            return;\n        }\n        // Interpolate between the previous frame and the current frame.\n        let frame = Timeline.search1(frames, time);\n        let percent = this.getCurvePercent(time, frame);\n        let prevVertices = vertices[frame];\n        let nextVertices = vertices[frame + 1];\n        if (alpha == 1) {\n            if (blend == MixBlend.add) {\n                let vertexAttachment = slotAttachment;\n                if (!vertexAttachment.bones) {\n                    // Unweighted vertex positions, with alpha.\n                    let setupVertices = vertexAttachment.vertices;\n                    for (let i = 0; i < vertexCount; i++) {\n                        let prev = prevVertices[i];\n                        deform[i] += prev + (nextVertices[i] - prev) * percent - setupVertices[i];\n                    }\n                }\n                else {\n                    // Weighted deform offsets, with alpha.\n                    for (let i = 0; i < vertexCount; i++) {\n                        let prev = prevVertices[i];\n                        deform[i] += prev + (nextVertices[i] - prev) * percent;\n                    }\n                }\n            }\n            else {\n                for (let i = 0; i < vertexCount; i++) {\n                    let prev = prevVertices[i];\n                    deform[i] = prev + (nextVertices[i] - prev) * percent;\n                }\n            }\n        }\n        else {\n            switch (blend) {\n                case MixBlend.setup: {\n                    let vertexAttachment = slotAttachment;\n                    if (!vertexAttachment.bones) {\n                        // Unweighted vertex positions, with alpha.\n                        let setupVertices = vertexAttachment.vertices;\n                        for (let i = 0; i < vertexCount; i++) {\n                            let prev = prevVertices[i], setup = setupVertices[i];\n                            deform[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha;\n                        }\n                    }\n                    else {\n                        // Weighted deform offsets, with alpha.\n                        for (let i = 0; i < vertexCount; i++) {\n                            let prev = prevVertices[i];\n                            deform[i] = (prev + (nextVertices[i] - prev) * percent) * alpha;\n                        }\n                    }\n                    break;\n                }\n                case MixBlend.first:\n                case MixBlend.replace:\n                    for (let i = 0; i < vertexCount; i++) {\n                        let prev = prevVertices[i];\n                        deform[i] += (prev + (nextVertices[i] - prev) * percent - deform[i]) * alpha;\n                    }\n                    break;\n                case MixBlend.add:\n                    let vertexAttachment = slotAttachment;\n                    if (!vertexAttachment.bones) {\n                        // Unweighted vertex positions, with alpha.\n                        let setupVertices = vertexAttachment.vertices;\n                        for (let i = 0; i < vertexCount; i++) {\n                            let prev = prevVertices[i];\n                            deform[i] += (prev + (nextVertices[i] - prev) * percent - setupVertices[i]) * alpha;\n                        }\n                    }\n                    else {\n                        // Weighted deform offsets, with alpha.\n                        for (let i = 0; i < vertexCount; i++) {\n                            let prev = prevVertices[i];\n                            deform[i] += (prev + (nextVertices[i] - prev) * percent) * alpha;\n                        }\n                    }\n            }\n        }\n    }\n}\n/** Fires an {@link Event} when specific animation times are reached. */\nexport class EventTimeline extends Timeline {\n    static propertyIds = [\"\" + Property.event];\n    /** The event for each key frame. */\n    events;\n    constructor(frameCount) {\n        super(frameCount, EventTimeline.propertyIds);\n        this.events = new Array(frameCount);\n    }\n    getFrameCount() {\n        return this.frames.length;\n    }\n    /** Sets the time in seconds and the event for the specified key frame. */\n    setFrame(frame, event) {\n        this.frames[frame] = event.time;\n        this.events[frame] = event;\n    }\n    /** Fires events for frames > `lastTime` and <= `time`. */\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        if (!firedEvents)\n            return;\n        let frames = this.frames;\n        let frameCount = this.frames.length;\n        if (lastTime > time) { // Apply after lastTime for looped animations.\n            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha, blend, direction);\n            lastTime = -1;\n        }\n        else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\n            return;\n        if (time < frames[0])\n            return;\n        let i = 0;\n        if (lastTime < frames[0])\n            i = 0;\n        else {\n            i = Timeline.search1(frames, lastTime) + 1;\n            let frameTime = frames[i];\n            while (i > 0) { // Fire multiple events with the same frame.\n                if (frames[i - 1] != frameTime)\n                    break;\n                i--;\n            }\n        }\n        for (; i < frameCount && time >= frames[i]; i++)\n            firedEvents.push(this.events[i]);\n    }\n}\n/** Changes a skeleton's {@link Skeleton#drawOrder}. */\nexport class DrawOrderTimeline extends Timeline {\n    static propertyIds = [\"\" + Property.drawOrder];\n    /** The draw order for each key frame. See {@link #setFrame(int, float, int[])}. */\n    drawOrders;\n    constructor(frameCount) {\n        super(frameCount, DrawOrderTimeline.propertyIds);\n        this.drawOrders = new Array(frameCount);\n    }\n    getFrameCount() {\n        return this.frames.length;\n    }\n    /** Sets the time in seconds and the draw order for the specified key frame.\n     * @param drawOrder For each slot in {@link Skeleton#slots}, the index of the new draw order. May be null to use setup pose\n     *           draw order. */\n    setFrame(frame, time, drawOrder) {\n        this.frames[frame] = time;\n        this.drawOrders[frame] = drawOrder;\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        if (direction == MixDirection.mixOut) {\n            if (blend == MixBlend.setup)\n                Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n            return;\n        }\n        if (time < this.frames[0]) {\n            if (blend == MixBlend.setup || blend == MixBlend.first)\n                Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n            return;\n        }\n        let idx = Timeline.search1(this.frames, time);\n        let drawOrderToSetupIndex = this.drawOrders[idx];\n        if (!drawOrderToSetupIndex)\n            Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n        else {\n            let drawOrder = skeleton.drawOrder;\n            let slots = skeleton.slots;\n            for (let i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\n                drawOrder[i] = slots[drawOrderToSetupIndex[i]];\n        }\n    }\n}\n/** Changes an IK constraint's {@link IkConstraint#mix}, {@link IkConstraint#softness},\n * {@link IkConstraint#bendDirection}, {@link IkConstraint#stretch}, and {@link IkConstraint#compress}. */\nexport class IkConstraintTimeline extends CurveTimeline {\n    /** The index of the IK constraint in {@link Skeleton#getIkConstraints()} that will be changed when this timeline is applied */\n    constraintIndex = 0;\n    constructor(frameCount, bezierCount, ikConstraintIndex) {\n        super(frameCount, bezierCount, [\n            Property.ikConstraint + \"|\" + ikConstraintIndex\n        ]);\n        this.constraintIndex = ikConstraintIndex;\n    }\n    getFrameEntries() {\n        return 6 /*ENTRIES*/;\n    }\n    /** Sets the time in seconds, mix, softness, bend direction, compress, and stretch for the specified key frame. */\n    setFrame(frame, time, mix, softness, bendDirection, compress, stretch) {\n        frame *= 6 /*ENTRIES*/;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*MIX*/] = mix;\n        this.frames[frame + 2 /*SOFTNESS*/] = softness;\n        this.frames[frame + 3 /*BEND_DIRECTION*/] = bendDirection;\n        this.frames[frame + 4 /*COMPRESS*/] = compress ? 1 : 0;\n        this.frames[frame + 5 /*STRETCH*/] = stretch ? 1 : 0;\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        let constraint = skeleton.ikConstraints[this.constraintIndex];\n        if (!constraint.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    constraint.mix = constraint.data.mix;\n                    constraint.softness = constraint.data.softness;\n                    constraint.bendDirection = constraint.data.bendDirection;\n                    constraint.compress = constraint.data.compress;\n                    constraint.stretch = constraint.data.stretch;\n                    return;\n                case MixBlend.first:\n                    constraint.mix += (constraint.data.mix - constraint.mix) * alpha;\n                    constraint.softness += (constraint.data.softness - constraint.softness) * alpha;\n                    constraint.bendDirection = constraint.data.bendDirection;\n                    constraint.compress = constraint.data.compress;\n                    constraint.stretch = constraint.data.stretch;\n            }\n            return;\n        }\n        let mix = 0, softness = 0;\n        let i = Timeline.search(frames, time, 6 /*ENTRIES*/);\n        let curveType = this.curves[i / 6 /*ENTRIES*/];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                mix = frames[i + 1 /*MIX*/];\n                softness = frames[i + 2 /*SOFTNESS*/];\n                let t = (time - before) / (frames[i + 6 /*ENTRIES*/] - before);\n                mix += (frames[i + 6 /*ENTRIES*/ + 1 /*MIX*/] - mix) * t;\n                softness += (frames[i + 6 /*ENTRIES*/ + 2 /*SOFTNESS*/] - softness) * t;\n                break;\n            case 1 /*STEPPED*/:\n                mix = frames[i + 1 /*MIX*/];\n                softness = frames[i + 2 /*SOFTNESS*/];\n                break;\n            default:\n                mix = this.getBezierValue(time, i, 1 /*MIX*/, curveType - 2 /*BEZIER*/);\n                softness = this.getBezierValue(time, i, 2 /*SOFTNESS*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n        }\n        if (blend == MixBlend.setup) {\n            constraint.mix = constraint.data.mix + (mix - constraint.data.mix) * alpha;\n            constraint.softness = constraint.data.softness + (softness - constraint.data.softness) * alpha;\n            if (direction == MixDirection.mixOut) {\n                constraint.bendDirection = constraint.data.bendDirection;\n                constraint.compress = constraint.data.compress;\n                constraint.stretch = constraint.data.stretch;\n            }\n            else {\n                constraint.bendDirection = frames[i + 3 /*BEND_DIRECTION*/];\n                constraint.compress = frames[i + 4 /*COMPRESS*/] != 0;\n                constraint.stretch = frames[i + 5 /*STRETCH*/] != 0;\n            }\n        }\n        else {\n            constraint.mix += (mix - constraint.mix) * alpha;\n            constraint.softness += (softness - constraint.softness) * alpha;\n            if (direction == MixDirection.mixIn) {\n                constraint.bendDirection = frames[i + 3 /*BEND_DIRECTION*/];\n                constraint.compress = frames[i + 4 /*COMPRESS*/] != 0;\n                constraint.stretch = frames[i + 5 /*STRETCH*/] != 0;\n            }\n        }\n    }\n}\n/** Changes a transform constraint's {@link TransformConstraint#rotateMix}, {@link TransformConstraint#translateMix},\n * {@link TransformConstraint#scaleMix}, and {@link TransformConstraint#shearMix}. */\nexport class TransformConstraintTimeline extends CurveTimeline {\n    /** The index of the transform constraint slot in {@link Skeleton#transformConstraints} that will be changed. */\n    constraintIndex = 0;\n    constructor(frameCount, bezierCount, transformConstraintIndex) {\n        super(frameCount, bezierCount, [\n            Property.transformConstraint + \"|\" + transformConstraintIndex\n        ]);\n        this.constraintIndex = transformConstraintIndex;\n    }\n    getFrameEntries() {\n        return 7 /*ENTRIES*/;\n    }\n    /** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame. */\n    setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY) {\n        let frames = this.frames;\n        frame *= 7 /*ENTRIES*/;\n        frames[frame] = time;\n        frames[frame + 1 /*ROTATE*/] = mixRotate;\n        frames[frame + 2 /*X*/] = mixX;\n        frames[frame + 3 /*Y*/] = mixY;\n        frames[frame + 4 /*SCALEX*/] = mixScaleX;\n        frames[frame + 5 /*SCALEY*/] = mixScaleY;\n        frames[frame + 6 /*SHEARY*/] = mixShearY;\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        let constraint = skeleton.transformConstraints[this.constraintIndex];\n        if (!constraint.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            let data = constraint.data;\n            switch (blend) {\n                case MixBlend.setup:\n                    constraint.mixRotate = data.mixRotate;\n                    constraint.mixX = data.mixX;\n                    constraint.mixY = data.mixY;\n                    constraint.mixScaleX = data.mixScaleX;\n                    constraint.mixScaleY = data.mixScaleY;\n                    constraint.mixShearY = data.mixShearY;\n                    return;\n                case MixBlend.first:\n                    constraint.mixRotate += (data.mixRotate - constraint.mixRotate) * alpha;\n                    constraint.mixX += (data.mixX - constraint.mixX) * alpha;\n                    constraint.mixY += (data.mixY - constraint.mixY) * alpha;\n                    constraint.mixScaleX += (data.mixScaleX - constraint.mixScaleX) * alpha;\n                    constraint.mixScaleY += (data.mixScaleY - constraint.mixScaleY) * alpha;\n                    constraint.mixShearY += (data.mixShearY - constraint.mixShearY) * alpha;\n            }\n            return;\n        }\n        let rotate, x, y, scaleX, scaleY, shearY;\n        let i = Timeline.search(frames, time, 7 /*ENTRIES*/);\n        let curveType = this.curves[i / 7 /*ENTRIES*/];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                rotate = frames[i + 1 /*ROTATE*/];\n                x = frames[i + 2 /*X*/];\n                y = frames[i + 3 /*Y*/];\n                scaleX = frames[i + 4 /*SCALEX*/];\n                scaleY = frames[i + 5 /*SCALEY*/];\n                shearY = frames[i + 6 /*SHEARY*/];\n                let t = (time - before) / (frames[i + 7 /*ENTRIES*/] - before);\n                rotate += (frames[i + 7 /*ENTRIES*/ + 1 /*ROTATE*/] - rotate) * t;\n                x += (frames[i + 7 /*ENTRIES*/ + 2 /*X*/] - x) * t;\n                y += (frames[i + 7 /*ENTRIES*/ + 3 /*Y*/] - y) * t;\n                scaleX += (frames[i + 7 /*ENTRIES*/ + 4 /*SCALEX*/] - scaleX) * t;\n                scaleY += (frames[i + 7 /*ENTRIES*/ + 5 /*SCALEY*/] - scaleY) * t;\n                shearY += (frames[i + 7 /*ENTRIES*/ + 6 /*SHEARY*/] - shearY) * t;\n                break;\n            case 1 /*STEPPED*/:\n                rotate = frames[i + 1 /*ROTATE*/];\n                x = frames[i + 2 /*X*/];\n                y = frames[i + 3 /*Y*/];\n                scaleX = frames[i + 4 /*SCALEX*/];\n                scaleY = frames[i + 5 /*SCALEY*/];\n                shearY = frames[i + 6 /*SHEARY*/];\n                break;\n            default:\n                rotate = this.getBezierValue(time, i, 1 /*ROTATE*/, curveType - 2 /*BEZIER*/);\n                x = this.getBezierValue(time, i, 2 /*X*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n                y = this.getBezierValue(time, i, 3 /*Y*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n                scaleX = this.getBezierValue(time, i, 4 /*SCALEX*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);\n                scaleY = this.getBezierValue(time, i, 5 /*SCALEY*/, curveType + 18 /*BEZIER_SIZE*/ * 4 - 2 /*BEZIER*/);\n                shearY = this.getBezierValue(time, i, 6 /*SHEARY*/, curveType + 18 /*BEZIER_SIZE*/ * 5 - 2 /*BEZIER*/);\n        }\n        if (blend == MixBlend.setup) {\n            let data = constraint.data;\n            constraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;\n            constraint.mixX = data.mixX + (x - data.mixX) * alpha;\n            constraint.mixY = data.mixY + (y - data.mixY) * alpha;\n            constraint.mixScaleX = data.mixScaleX + (scaleX - data.mixScaleX) * alpha;\n            constraint.mixScaleY = data.mixScaleY + (scaleY - data.mixScaleY) * alpha;\n            constraint.mixShearY = data.mixShearY + (shearY - data.mixShearY) * alpha;\n        }\n        else {\n            constraint.mixRotate += (rotate - constraint.mixRotate) * alpha;\n            constraint.mixX += (x - constraint.mixX) * alpha;\n            constraint.mixY += (y - constraint.mixY) * alpha;\n            constraint.mixScaleX += (scaleX - constraint.mixScaleX) * alpha;\n            constraint.mixScaleY += (scaleY - constraint.mixScaleY) * alpha;\n            constraint.mixShearY += (shearY - constraint.mixShearY) * alpha;\n        }\n    }\n}\n/** Changes a path constraint's {@link PathConstraint#position}. */\nexport class PathConstraintPositionTimeline extends CurveTimeline1 {\n    /** The index of the path constraint in {@link Skeleton#getPathConstraints()} that will be changed when this timeline is\n     * applied. */\n    constraintIndex = 0;\n    constructor(frameCount, bezierCount, pathConstraintIndex) {\n        super(frameCount, bezierCount, Property.pathConstraintPosition + \"|\" + pathConstraintIndex);\n        this.constraintIndex = pathConstraintIndex;\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        let constraint = skeleton.pathConstraints[this.constraintIndex];\n        if (constraint.active)\n            constraint.position = this.getAbsoluteValue(time, alpha, blend, constraint.position, constraint.data.position);\n    }\n}\n/** Changes a path constraint's {@link PathConstraint#spacing}. */\nexport class PathConstraintSpacingTimeline extends CurveTimeline1 {\n    /** The index of the path constraint in {@link Skeleton#getPathConstraints()} that will be changed when this timeline is\n     * applied. */\n    constraintIndex = 0;\n    constructor(frameCount, bezierCount, pathConstraintIndex) {\n        super(frameCount, bezierCount, Property.pathConstraintSpacing + \"|\" + pathConstraintIndex);\n        this.constraintIndex = pathConstraintIndex;\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        let constraint = skeleton.pathConstraints[this.constraintIndex];\n        if (constraint.active)\n            constraint.spacing = this.getAbsoluteValue(time, alpha, blend, constraint.spacing, constraint.data.spacing);\n    }\n}\n/** Changes a transform constraint's {@link PathConstraint#getMixRotate()}, {@link PathConstraint#getMixX()}, and\n * {@link PathConstraint#getMixY()}. */\nexport class PathConstraintMixTimeline extends CurveTimeline {\n    /** The index of the path constraint in {@link Skeleton#getPathConstraints()} that will be changed when this timeline is\n     * applied. */\n    constraintIndex = 0;\n    constructor(frameCount, bezierCount, pathConstraintIndex) {\n        super(frameCount, bezierCount, [\n            Property.pathConstraintMix + \"|\" + pathConstraintIndex\n        ]);\n        this.constraintIndex = pathConstraintIndex;\n    }\n    getFrameEntries() {\n        return 4 /*ENTRIES*/;\n    }\n    setFrame(frame, time, mixRotate, mixX, mixY) {\n        let frames = this.frames;\n        frame <<= 2;\n        frames[frame] = time;\n        frames[frame + 1 /*ROTATE*/] = mixRotate;\n        frames[frame + 2 /*X*/] = mixX;\n        frames[frame + 3 /*Y*/] = mixY;\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        let constraint = skeleton.pathConstraints[this.constraintIndex];\n        if (!constraint.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    constraint.mixRotate = constraint.data.mixRotate;\n                    constraint.mixX = constraint.data.mixX;\n                    constraint.mixY = constraint.data.mixY;\n                    return;\n                case MixBlend.first:\n                    constraint.mixRotate += (constraint.data.mixRotate - constraint.mixRotate) * alpha;\n                    constraint.mixX += (constraint.data.mixX - constraint.mixX) * alpha;\n                    constraint.mixY += (constraint.data.mixY - constraint.mixY) * alpha;\n            }\n            return;\n        }\n        let rotate, x, y;\n        let i = Timeline.search(frames, time, 4 /*ENTRIES*/);\n        let curveType = this.curves[i >> 2];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                rotate = frames[i + 1 /*ROTATE*/];\n                x = frames[i + 2 /*X*/];\n                y = frames[i + 3 /*Y*/];\n                let t = (time - before) / (frames[i + 4 /*ENTRIES*/] - before);\n                rotate += (frames[i + 4 /*ENTRIES*/ + 1 /*ROTATE*/] - rotate) * t;\n                x += (frames[i + 4 /*ENTRIES*/ + 2 /*X*/] - x) * t;\n                y += (frames[i + 4 /*ENTRIES*/ + 3 /*Y*/] - y) * t;\n                break;\n            case 1 /*STEPPED*/:\n                rotate = frames[i + 1 /*ROTATE*/];\n                x = frames[i + 2 /*X*/];\n                y = frames[i + 3 /*Y*/];\n                break;\n            default:\n                rotate = this.getBezierValue(time, i, 1 /*ROTATE*/, curveType - 2 /*BEZIER*/);\n                x = this.getBezierValue(time, i, 2 /*X*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n                y = this.getBezierValue(time, i, 3 /*Y*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n        }\n        if (blend == MixBlend.setup) {\n            let data = constraint.data;\n            constraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;\n            constraint.mixX = data.mixX + (x - data.mixX) * alpha;\n            constraint.mixY = data.mixY + (y - data.mixY) * alpha;\n        }\n        else {\n            constraint.mixRotate += (rotate - constraint.mixRotate) * alpha;\n            constraint.mixX += (x - constraint.mixX) * alpha;\n            constraint.mixY += (y - constraint.mixY) * alpha;\n        }\n    }\n}\n/** The base class for most {@link PhysicsConstraint} timelines. */\nexport class PhysicsConstraintTimeline extends CurveTimeline1 {\n    /** The index of the physics constraint in {@link Skeleton#getPhysicsConstraints()} that will be changed when this timeline\n     * is applied, or -1 if all physics constraints in the skeleton will be changed. */\n    constraintIndex = 0;\n    /** @param physicsConstraintIndex -1 for all physics constraints in the skeleton. */\n    constructor(frameCount, bezierCount, physicsConstraintIndex, property) {\n        super(frameCount, bezierCount, property + \"|\" + physicsConstraintIndex);\n        this.constraintIndex = physicsConstraintIndex;\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        let constraint;\n        if (this.constraintIndex == -1) {\n            const value = time >= this.frames[0] ? this.getCurveValue(time) : 0;\n            for (const constraint of skeleton.physicsConstraints) {\n                if (constraint.active && this.global(constraint.data))\n                    this.set(constraint, this.getAbsoluteValue2(time, alpha, blend, this.get(constraint), this.setup(constraint), value));\n            }\n        }\n        else {\n            constraint = skeleton.physicsConstraints[this.constraintIndex];\n            if (constraint.active)\n                this.set(constraint, this.getAbsoluteValue(time, alpha, blend, this.get(constraint), this.setup(constraint)));\n        }\n    }\n}\n/** Changes a physics constraint's {@link PhysicsConstraint#getInertia()}. */\nexport class PhysicsConstraintInertiaTimeline extends PhysicsConstraintTimeline {\n    constructor(frameCount, bezierCount, physicsConstraintIndex) {\n        super(frameCount, bezierCount, physicsConstraintIndex, Property.physicsConstraintInertia);\n    }\n    setup(constraint) {\n        return constraint.data.inertia;\n    }\n    get(constraint) {\n        return constraint.inertia;\n    }\n    set(constraint, value) {\n        constraint.inertia = value;\n    }\n    global(constraint) {\n        return constraint.inertiaGlobal;\n    }\n}\n/** Changes a physics constraint's {@link PhysicsConstraint#getStrength()}. */\nexport class PhysicsConstraintStrengthTimeline extends PhysicsConstraintTimeline {\n    constructor(frameCount, bezierCount, physicsConstraintIndex) {\n        super(frameCount, bezierCount, physicsConstraintIndex, Property.physicsConstraintStrength);\n    }\n    setup(constraint) {\n        return constraint.data.strength;\n    }\n    get(constraint) {\n        return constraint.strength;\n    }\n    set(constraint, value) {\n        constraint.strength = value;\n    }\n    global(constraint) {\n        return constraint.strengthGlobal;\n    }\n}\n/** Changes a physics constraint's {@link PhysicsConstraint#getDamping()}. */\nexport class PhysicsConstraintDampingTimeline extends PhysicsConstraintTimeline {\n    constructor(frameCount, bezierCount, physicsConstraintIndex) {\n        super(frameCount, bezierCount, physicsConstraintIndex, Property.physicsConstraintDamping);\n    }\n    setup(constraint) {\n        return constraint.data.damping;\n    }\n    get(constraint) {\n        return constraint.damping;\n    }\n    set(constraint, value) {\n        constraint.damping = value;\n    }\n    global(constraint) {\n        return constraint.dampingGlobal;\n    }\n}\n/** Changes a physics constraint's {@link PhysicsConstraint#getMassInverse()}. The timeline values are not inverted. */\nexport class PhysicsConstraintMassTimeline extends PhysicsConstraintTimeline {\n    constructor(frameCount, bezierCount, physicsConstraintIndex) {\n        super(frameCount, bezierCount, physicsConstraintIndex, Property.physicsConstraintMass);\n    }\n    setup(constraint) {\n        return 1 / constraint.data.massInverse;\n    }\n    get(constraint) {\n        return 1 / constraint.massInverse;\n    }\n    set(constraint, value) {\n        constraint.massInverse = 1 / value;\n    }\n    global(constraint) {\n        return constraint.massGlobal;\n    }\n}\n/** Changes a physics constraint's {@link PhysicsConstraint#getWind()}. */\nexport class PhysicsConstraintWindTimeline extends PhysicsConstraintTimeline {\n    constructor(frameCount, bezierCount, physicsConstraintIndex) {\n        super(frameCount, bezierCount, physicsConstraintIndex, Property.physicsConstraintWind);\n    }\n    setup(constraint) {\n        return constraint.data.wind;\n    }\n    get(constraint) {\n        return constraint.wind;\n    }\n    set(constraint, value) {\n        constraint.wind = value;\n    }\n    global(constraint) {\n        return constraint.windGlobal;\n    }\n}\n/** Changes a physics constraint's {@link PhysicsConstraint#getGravity()}. */\nexport class PhysicsConstraintGravityTimeline extends PhysicsConstraintTimeline {\n    constructor(frameCount, bezierCount, physicsConstraintIndex) {\n        super(frameCount, bezierCount, physicsConstraintIndex, Property.physicsConstraintGravity);\n    }\n    setup(constraint) {\n        return constraint.data.gravity;\n    }\n    get(constraint) {\n        return constraint.gravity;\n    }\n    set(constraint, value) {\n        constraint.gravity = value;\n    }\n    global(constraint) {\n        return constraint.gravityGlobal;\n    }\n}\n/** Changes a physics constraint's {@link PhysicsConstraint#getMix()}. */\nexport class PhysicsConstraintMixTimeline extends PhysicsConstraintTimeline {\n    constructor(frameCount, bezierCount, physicsConstraintIndex) {\n        super(frameCount, bezierCount, physicsConstraintIndex, Property.physicsConstraintMix);\n    }\n    setup(constraint) {\n        return constraint.data.mix;\n    }\n    get(constraint) {\n        return constraint.mix;\n    }\n    set(constraint, value) {\n        constraint.mix = value;\n    }\n    global(constraint) {\n        return constraint.mixGlobal;\n    }\n}\n/** Resets a physics constraint when specific animation times are reached. */\nexport class PhysicsConstraintResetTimeline extends Timeline {\n    static propertyIds = [Property.physicsConstraintReset.toString()];\n    /** The index of the physics constraint in {@link Skeleton#getPhysicsConstraints()} that will be reset when this timeline is\n    * applied, or -1 if all physics constraints in the skeleton will be reset. */\n    constraintIndex;\n    /** @param physicsConstraintIndex -1 for all physics constraints in the skeleton. */\n    constructor(frameCount, physicsConstraintIndex) {\n        super(frameCount, PhysicsConstraintResetTimeline.propertyIds);\n        this.constraintIndex = physicsConstraintIndex;\n    }\n    getFrameCount() {\n        return this.frames.length;\n    }\n    /** Sets the time for the specified frame.\n     * @param frame Between 0 and <code>frameCount</code>, inclusive. */\n    setFrame(frame, time) {\n        this.frames[frame] = time;\n    }\n    /** Resets the physics constraint when frames > <code>lastTime</code> and <= <code>time</code>. */\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        let constraint;\n        if (this.constraintIndex != -1) {\n            constraint = skeleton.physicsConstraints[this.constraintIndex];\n            if (!constraint.active)\n                return;\n        }\n        const frames = this.frames;\n        if (lastTime > time) { // Apply after lastTime for looped animations.\n            this.apply(skeleton, lastTime, Number.MAX_VALUE, [], alpha, blend, direction);\n            lastTime = -1;\n        }\n        else if (lastTime >= frames[frames.length - 1]) // Last time is after last frame.\n            return;\n        if (time < frames[0])\n            return;\n        if (lastTime < frames[0] || time >= frames[Timeline.search1(frames, lastTime) + 1]) {\n            if (constraint != null)\n                constraint.reset();\n            else {\n                for (const constraint of skeleton.physicsConstraints) {\n                    if (constraint.active)\n                        constraint.reset();\n                }\n            }\n        }\n    }\n}\n/** Changes a slot's {@link Slot#getSequenceIndex()} for an attachment's {@link Sequence}. */\nexport class SequenceTimeline extends Timeline {\n    static ENTRIES = 3;\n    static MODE = 1;\n    static DELAY = 2;\n    slotIndex;\n    attachment;\n    constructor(frameCount, slotIndex, attachment) {\n        super(frameCount, [\n            Property.sequence + \"|\" + slotIndex + \"|\" + attachment.sequence.id\n        ]);\n        this.slotIndex = slotIndex;\n        this.attachment = attachment;\n    }\n    getFrameEntries() {\n        return SequenceTimeline.ENTRIES;\n    }\n    getSlotIndex() {\n        return this.slotIndex;\n    }\n    getAttachment() {\n        return this.attachment;\n    }\n    /** Sets the time, mode, index, and frame time for the specified frame.\n     * @param frame Between 0 and <code>frameCount</code>, inclusive.\n     * @param time Seconds between frames. */\n    setFrame(frame, time, mode, index, delay) {\n        let frames = this.frames;\n        frame *= SequenceTimeline.ENTRIES;\n        frames[frame] = time;\n        frames[frame + SequenceTimeline.MODE] = mode | (index << 4);\n        frames[frame + SequenceTimeline.DELAY] = delay;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        let slotAttachment = slot.attachment;\n        let attachment = this.attachment;\n        if (slotAttachment != attachment) {\n            if (!(slotAttachment instanceof VertexAttachment)\n                || slotAttachment.timelineAttachment != attachment)\n                return;\n        }\n        if (direction == MixDirection.mixOut) {\n            if (blend == MixBlend.setup)\n                slot.sequenceIndex = -1;\n            return;\n        }\n        let frames = this.frames;\n        if (time < frames[0]) {\n            if (blend == MixBlend.setup || blend == MixBlend.first)\n                slot.sequenceIndex = -1;\n            return;\n        }\n        let i = Timeline.search(frames, time, SequenceTimeline.ENTRIES);\n        let before = frames[i];\n        let modeAndIndex = frames[i + SequenceTimeline.MODE];\n        let delay = frames[i + SequenceTimeline.DELAY];\n        if (!this.attachment.sequence)\n            return;\n        let index = modeAndIndex >> 4, count = this.attachment.sequence.regions.length;\n        let mode = SequenceModeValues[modeAndIndex & 0xf];\n        if (mode != SequenceMode.hold) {\n            index += (((time - before) / delay + 0.00001) | 0);\n            switch (mode) {\n                case SequenceMode.once:\n                    index = Math.min(count - 1, index);\n                    break;\n                case SequenceMode.loop:\n                    index %= count;\n                    break;\n                case SequenceMode.pingpong: {\n                    let n = (count << 1) - 2;\n                    index = n == 0 ? 0 : index % n;\n                    if (index >= count)\n                        index = n - index;\n                    break;\n                }\n                case SequenceMode.onceReverse:\n                    index = Math.max(count - 1 - index, 0);\n                    break;\n                case SequenceMode.loopReverse:\n                    index = count - 1 - (index % count);\n                    break;\n                case SequenceMode.pingpongReverse: {\n                    let n = (count << 1) - 2;\n                    index = n == 0 ? 0 : (index + count - 1) % n;\n                    if (index >= count)\n                        index = n - index;\n                }\n            }\n        }\n        slot.sequenceIndex = index;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Animation, MixBlend, AttachmentTimeline, MixDirection, RotateTimeline, DrawOrderTimeline, Timeline, EventTimeline } from \"./Animation.js\";\nimport { StringSet, Pool, Utils, MathUtils } from \"./Utils.js\";\n/** Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies\n * multiple animations on top of each other (layering).\n *\n * See [Applying Animations](http://esotericsoftware.com/spine-applying-animations/) in the Spine Runtimes Guide. */\nexport class AnimationState {\n    static _emptyAnimation = new Animation(\"<empty>\", [], 0);\n    static emptyAnimation() {\n        return AnimationState._emptyAnimation;\n    }\n    /** The AnimationStateData to look up mix durations. */\n    data;\n    /** The list of tracks that currently have animations, which may contain null entries. */\n    tracks = new Array();\n    /** Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower\n     * or faster. Defaults to 1.\n     *\n     * See TrackEntry {@link TrackEntry#timeScale} for affecting a single animation. */\n    timeScale = 1;\n    unkeyedState = 0;\n    events = new Array();\n    listeners = new Array();\n    queue = new EventQueue(this);\n    propertyIDs = new StringSet();\n    animationsChanged = false;\n    trackEntryPool = new Pool(() => new TrackEntry());\n    constructor(data) {\n        this.data = data;\n    }\n    /** Increments each track entry {@link TrackEntry#trackTime()}, setting queued animations as current if needed. */\n    update(delta) {\n        delta *= this.timeScale;\n        let tracks = this.tracks;\n        for (let i = 0, n = tracks.length; i < n; i++) {\n            let current = tracks[i];\n            if (!current)\n                continue;\n            current.animationLast = current.nextAnimationLast;\n            current.trackLast = current.nextTrackLast;\n            let currentDelta = delta * current.timeScale;\n            if (current.delay > 0) {\n                current.delay -= currentDelta;\n                if (current.delay > 0)\n                    continue;\n                currentDelta = -current.delay;\n                current.delay = 0;\n            }\n            let next = current.next;\n            if (next) {\n                // When the next entry's delay is passed, change to the next entry, preserving leftover time.\n                let nextTime = current.trackLast - next.delay;\n                if (nextTime >= 0) {\n                    next.delay = 0;\n                    next.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta) * next.timeScale;\n                    current.trackTime += currentDelta;\n                    this.setCurrent(i, next, true);\n                    while (next.mixingFrom) {\n                        next.mixTime += delta;\n                        next = next.mixingFrom;\n                    }\n                    continue;\n                }\n            }\n            else if (current.trackLast >= current.trackEnd && !current.mixingFrom) {\n                tracks[i] = null;\n                this.queue.end(current);\n                this.clearNext(current);\n                continue;\n            }\n            if (current.mixingFrom && this.updateMixingFrom(current, delta)) {\n                // End mixing from entries once all have completed.\n                let from = current.mixingFrom;\n                current.mixingFrom = null;\n                if (from)\n                    from.mixingTo = null;\n                while (from) {\n                    this.queue.end(from);\n                    from = from.mixingFrom;\n                }\n            }\n            current.trackTime += currentDelta;\n        }\n        this.queue.drain();\n    }\n    /** Returns true when all mixing from entries are complete. */\n    updateMixingFrom(to, delta) {\n        let from = to.mixingFrom;\n        if (!from)\n            return true;\n        let finished = this.updateMixingFrom(from, delta);\n        from.animationLast = from.nextAnimationLast;\n        from.trackLast = from.nextTrackLast;\n        // Require mixTime > 0 to ensure the mixing from entry was applied at least once.\n        if (to.mixTime > 0 && to.mixTime >= to.mixDuration) {\n            // Require totalAlpha == 0 to ensure mixing is complete, unless mixDuration == 0 (the transition is a single frame).\n            if (from.totalAlpha == 0 || to.mixDuration == 0) {\n                to.mixingFrom = from.mixingFrom;\n                if (from.mixingFrom)\n                    from.mixingFrom.mixingTo = to;\n                to.interruptAlpha = from.interruptAlpha;\n                this.queue.end(from);\n            }\n            return finished;\n        }\n        from.trackTime += delta * from.timeScale;\n        to.mixTime += delta;\n        return false;\n    }\n    /** Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the\n     * animation state can be applied to multiple skeletons to pose them identically.\n     * @returns True if any animations were applied. */\n    apply(skeleton) {\n        if (!skeleton)\n            throw new Error(\"skeleton cannot be null.\");\n        if (this.animationsChanged)\n            this._animationsChanged();\n        let events = this.events;\n        let tracks = this.tracks;\n        let applied = false;\n        for (let i = 0, n = tracks.length; i < n; i++) {\n            let current = tracks[i];\n            if (!current || current.delay > 0)\n                continue;\n            applied = true;\n            let blend = i == 0 ? MixBlend.first : current.mixBlend;\n            // Apply mixing from entries first.\n            let alpha = current.alpha;\n            if (current.mixingFrom)\n                alpha *= this.applyMixingFrom(current, skeleton, blend);\n            else if (current.trackTime >= current.trackEnd && !current.next)\n                alpha = 0;\n            let attachments = alpha >= current.alphaAttachmentThreshold;\n            // Apply current entry.\n            let animationLast = current.animationLast, animationTime = current.getAnimationTime(), applyTime = animationTime;\n            let applyEvents = events;\n            if (current.reverse) {\n                applyTime = current.animation.duration - applyTime;\n                applyEvents = null;\n            }\n            let timelines = current.animation.timelines;\n            let timelineCount = timelines.length;\n            if ((i == 0 && alpha == 1) || blend == MixBlend.add) {\n                if (i == 0)\n                    attachments = true;\n                for (let ii = 0; ii < timelineCount; ii++) {\n                    // Fixes issue #302 on IOS9 where mix, blend sometimes became undefined and caused assets\n                    // to sometimes stop rendering when using color correction, as their RGBA values become NaN.\n                    // (https://github.com/pixijs/pixi-spine/issues/302)\n                    Utils.webkit602BugfixHelper(alpha, blend);\n                    var timeline = timelines[ii];\n                    if (timeline instanceof AttachmentTimeline)\n                        this.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, attachments);\n                    else\n                        timeline.apply(skeleton, animationLast, applyTime, applyEvents, alpha, blend, MixDirection.mixIn);\n                }\n            }\n            else {\n                let timelineMode = current.timelineMode;\n                let shortestRotation = current.shortestRotation;\n                let firstFrame = !shortestRotation && current.timelinesRotation.length != timelineCount << 1;\n                if (firstFrame)\n                    current.timelinesRotation.length = timelineCount << 1;\n                for (let ii = 0; ii < timelineCount; ii++) {\n                    let timeline = timelines[ii];\n                    let timelineBlend = timelineMode[ii] == SUBSEQUENT ? blend : MixBlend.setup;\n                    if (!shortestRotation && timeline instanceof RotateTimeline) {\n                        this.applyRotateTimeline(timeline, skeleton, applyTime, alpha, timelineBlend, current.timelinesRotation, ii << 1, firstFrame);\n                    }\n                    else if (timeline instanceof AttachmentTimeline) {\n                        this.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, attachments);\n                    }\n                    else {\n                        // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n                        Utils.webkit602BugfixHelper(alpha, blend);\n                        timeline.apply(skeleton, animationLast, applyTime, applyEvents, alpha, timelineBlend, MixDirection.mixIn);\n                    }\n                }\n            }\n            this.queueEvents(current, animationTime);\n            events.length = 0;\n            current.nextAnimationLast = animationTime;\n            current.nextTrackLast = current.trackTime;\n        }\n        // Set slots attachments to the setup pose, if needed. This occurs if an animation that is mixing out sets attachments so\n        // subsequent timelines see any deform, but the subsequent timelines don't set an attachment (eg they are also mixing out or\n        // the time is before the first key).\n        var setupState = this.unkeyedState + SETUP;\n        var slots = skeleton.slots;\n        for (var i = 0, n = skeleton.slots.length; i < n; i++) {\n            var slot = slots[i];\n            if (slot.attachmentState == setupState) {\n                var attachmentName = slot.data.attachmentName;\n                slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\n            }\n        }\n        this.unkeyedState += 2; // Increasing after each use avoids the need to reset attachmentState for every slot.\n        this.queue.drain();\n        return applied;\n    }\n    applyMixingFrom(to, skeleton, blend) {\n        let from = to.mixingFrom;\n        if (from.mixingFrom)\n            this.applyMixingFrom(from, skeleton, blend);\n        let mix = 0;\n        if (to.mixDuration == 0) { // Single frame mix to undo mixingFrom changes.\n            mix = 1;\n            if (blend == MixBlend.first)\n                blend = MixBlend.setup;\n        }\n        else {\n            mix = to.mixTime / to.mixDuration;\n            if (mix > 1)\n                mix = 1;\n            if (blend != MixBlend.first)\n                blend = from.mixBlend;\n        }\n        let attachments = mix < from.mixAttachmentThreshold, drawOrder = mix < from.mixDrawOrderThreshold;\n        let timelines = from.animation.timelines;\n        let timelineCount = timelines.length;\n        let alphaHold = from.alpha * to.interruptAlpha, alphaMix = alphaHold * (1 - mix);\n        let animationLast = from.animationLast, animationTime = from.getAnimationTime(), applyTime = animationTime;\n        let events = null;\n        if (from.reverse)\n            applyTime = from.animation.duration - applyTime;\n        else if (mix < from.eventThreshold)\n            events = this.events;\n        if (blend == MixBlend.add) {\n            for (let i = 0; i < timelineCount; i++)\n                timelines[i].apply(skeleton, animationLast, applyTime, events, alphaMix, blend, MixDirection.mixOut);\n        }\n        else {\n            let timelineMode = from.timelineMode;\n            let timelineHoldMix = from.timelineHoldMix;\n            let shortestRotation = from.shortestRotation;\n            let firstFrame = !shortestRotation && from.timelinesRotation.length != timelineCount << 1;\n            if (firstFrame)\n                from.timelinesRotation.length = timelineCount << 1;\n            from.totalAlpha = 0;\n            for (let i = 0; i < timelineCount; i++) {\n                let timeline = timelines[i];\n                let direction = MixDirection.mixOut;\n                let timelineBlend;\n                let alpha = 0;\n                switch (timelineMode[i]) {\n                    case SUBSEQUENT:\n                        if (!drawOrder && timeline instanceof DrawOrderTimeline)\n                            continue;\n                        timelineBlend = blend;\n                        alpha = alphaMix;\n                        break;\n                    case FIRST:\n                        timelineBlend = MixBlend.setup;\n                        alpha = alphaMix;\n                        break;\n                    case HOLD_SUBSEQUENT:\n                        timelineBlend = blend;\n                        alpha = alphaHold;\n                        break;\n                    case HOLD_FIRST:\n                        timelineBlend = MixBlend.setup;\n                        alpha = alphaHold;\n                        break;\n                    default:\n                        timelineBlend = MixBlend.setup;\n                        let holdMix = timelineHoldMix[i];\n                        alpha = alphaHold * Math.max(0, 1 - holdMix.mixTime / holdMix.mixDuration);\n                        break;\n                }\n                from.totalAlpha += alpha;\n                if (!shortestRotation && timeline instanceof RotateTimeline)\n                    this.applyRotateTimeline(timeline, skeleton, applyTime, alpha, timelineBlend, from.timelinesRotation, i << 1, firstFrame);\n                else if (timeline instanceof AttachmentTimeline)\n                    this.applyAttachmentTimeline(timeline, skeleton, applyTime, timelineBlend, attachments && alpha >= from.alphaAttachmentThreshold);\n                else {\n                    // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n                    Utils.webkit602BugfixHelper(alpha, blend);\n                    if (drawOrder && timeline instanceof DrawOrderTimeline && timelineBlend == MixBlend.setup)\n                        direction = MixDirection.mixIn;\n                    timeline.apply(skeleton, animationLast, applyTime, events, alpha, timelineBlend, direction);\n                }\n            }\n        }\n        if (to.mixDuration > 0)\n            this.queueEvents(from, animationTime);\n        this.events.length = 0;\n        from.nextAnimationLast = animationTime;\n        from.nextTrackLast = from.trackTime;\n        return mix;\n    }\n    applyAttachmentTimeline(timeline, skeleton, time, blend, attachments) {\n        var slot = skeleton.slots[timeline.slotIndex];\n        if (!slot.bone.active)\n            return;\n        if (time < timeline.frames[0]) { // Time is before first frame.\n            if (blend == MixBlend.setup || blend == MixBlend.first)\n                this.setAttachment(skeleton, slot, slot.data.attachmentName, attachments);\n        }\n        else\n            this.setAttachment(skeleton, slot, timeline.attachmentNames[Timeline.search1(timeline.frames, time)], attachments);\n        // If an attachment wasn't set (ie before the first frame or attachments is false), set the setup attachment later.\n        if (slot.attachmentState <= this.unkeyedState)\n            slot.attachmentState = this.unkeyedState + SETUP;\n    }\n    setAttachment(skeleton, slot, attachmentName, attachments) {\n        slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\n        if (attachments)\n            slot.attachmentState = this.unkeyedState + CURRENT;\n    }\n    applyRotateTimeline(timeline, skeleton, time, alpha, blend, timelinesRotation, i, firstFrame) {\n        if (firstFrame)\n            timelinesRotation[i] = 0;\n        if (alpha == 1) {\n            timeline.apply(skeleton, 0, time, null, 1, blend, MixDirection.mixIn);\n            return;\n        }\n        let bone = skeleton.bones[timeline.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = timeline.frames;\n        let r1 = 0, r2 = 0;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.rotation = bone.data.rotation;\n                default:\n                    return;\n                case MixBlend.first:\n                    r1 = bone.rotation;\n                    r2 = bone.data.rotation;\n            }\n        }\n        else {\n            r1 = blend == MixBlend.setup ? bone.data.rotation : bone.rotation;\n            r2 = bone.data.rotation + timeline.getCurveValue(time);\n        }\n        // Mix between rotations using the direction of the shortest route on the first frame while detecting crosses.\n        let total = 0, diff = r2 - r1;\n        diff -= Math.ceil(diff / 360 - 0.5) * 360;\n        if (diff == 0) {\n            total = timelinesRotation[i];\n        }\n        else {\n            let lastTotal = 0, lastDiff = 0;\n            if (firstFrame) {\n                lastTotal = 0;\n                lastDiff = diff;\n            }\n            else {\n                lastTotal = timelinesRotation[i];\n                lastDiff = timelinesRotation[i + 1];\n            }\n            let loops = lastTotal - lastTotal % 360;\n            total = diff + loops;\n            let current = diff >= 0, dir = lastTotal >= 0;\n            if (Math.abs(lastDiff) <= 90 && MathUtils.signum(lastDiff) != MathUtils.signum(diff)) {\n                if (Math.abs(lastTotal - loops) > 180) {\n                    total += 360 * MathUtils.signum(lastTotal);\n                    dir = current;\n                }\n                else if (loops != 0)\n                    total -= 360 * MathUtils.signum(lastTotal);\n                else\n                    dir = current;\n            }\n            if (dir != current)\n                total += 360 * MathUtils.signum(lastTotal);\n            timelinesRotation[i] = total;\n        }\n        timelinesRotation[i + 1] = diff;\n        bone.rotation = r1 + total * alpha;\n    }\n    queueEvents(entry, animationTime) {\n        let animationStart = entry.animationStart, animationEnd = entry.animationEnd;\n        let duration = animationEnd - animationStart;\n        let trackLastWrapped = entry.trackLast % duration;\n        // Queue events before complete.\n        let events = this.events;\n        let i = 0, n = events.length;\n        for (; i < n; i++) {\n            let event = events[i];\n            if (event.time < trackLastWrapped)\n                break;\n            if (event.time > animationEnd)\n                continue; // Discard events outside animation start/end.\n            this.queue.event(entry, event);\n        }\n        // Queue complete if completed a loop iteration or the animation.\n        let complete = false;\n        if (entry.loop) {\n            if (duration == 0)\n                complete = true;\n            else {\n                const cycles = Math.floor(entry.trackTime / duration);\n                complete = cycles > 0 && cycles > Math.floor(entry.trackLast / duration);\n            }\n        }\n        else\n            complete = animationTime >= animationEnd && entry.animationLast < animationEnd;\n        if (complete)\n            this.queue.complete(entry);\n        // Queue events after complete.\n        for (; i < n; i++) {\n            let event = events[i];\n            if (event.time < animationStart)\n                continue; // Discard events outside animation start/end.\n            this.queue.event(entry, event);\n        }\n    }\n    /** Removes all animations from all tracks, leaving skeletons in their current pose.\n     *\n     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n     * rather than leaving them in their current pose. */\n    clearTracks() {\n        let oldDrainDisabled = this.queue.drainDisabled;\n        this.queue.drainDisabled = true;\n        for (let i = 0, n = this.tracks.length; i < n; i++)\n            this.clearTrack(i);\n        this.tracks.length = 0;\n        this.queue.drainDisabled = oldDrainDisabled;\n        this.queue.drain();\n    }\n    /** Removes all animations from the track, leaving skeletons in their current pose.\n     *\n     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n     * rather than leaving them in their current pose. */\n    clearTrack(trackIndex) {\n        if (trackIndex >= this.tracks.length)\n            return;\n        let current = this.tracks[trackIndex];\n        if (!current)\n            return;\n        this.queue.end(current);\n        this.clearNext(current);\n        let entry = current;\n        while (true) {\n            let from = entry.mixingFrom;\n            if (!from)\n                break;\n            this.queue.end(from);\n            entry.mixingFrom = null;\n            entry.mixingTo = null;\n            entry = from;\n        }\n        this.tracks[current.trackIndex] = null;\n        this.queue.drain();\n    }\n    setCurrent(index, current, interrupt) {\n        let from = this.expandToIndex(index);\n        this.tracks[index] = current;\n        current.previous = null;\n        if (from) {\n            if (interrupt)\n                this.queue.interrupt(from);\n            current.mixingFrom = from;\n            from.mixingTo = current;\n            current.mixTime = 0;\n            // Store the interrupted mix percentage.\n            if (from.mixingFrom && from.mixDuration > 0)\n                current.interruptAlpha *= Math.min(1, from.mixTime / from.mixDuration);\n            from.timelinesRotation.length = 0; // Reset rotation for mixing out, in case entry was mixed in.\n        }\n        this.queue.start(current);\n    }\n    /** Sets an animation by name.\n      *\n      * See {@link #setAnimationWith()}. */\n    setAnimation(trackIndex, animationName, loop = false) {\n        let animation = this.data.skeletonData.findAnimation(animationName);\n        if (!animation)\n            throw new Error(\"Animation not found: \" + animationName);\n        return this.setAnimationWith(trackIndex, animation, loop);\n    }\n    /** Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never\n     * applied to a skeleton, it is replaced (not mixed from).\n     * @param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n     *           duration. In either case {@link TrackEntry#trackEnd} determines when the track is cleared.\n     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\n    setAnimationWith(trackIndex, animation, loop = false) {\n        if (!animation)\n            throw new Error(\"animation cannot be null.\");\n        let interrupt = true;\n        let current = this.expandToIndex(trackIndex);\n        if (current) {\n            if (current.nextTrackLast == -1) {\n                // Don't mix from an entry that was never applied.\n                this.tracks[trackIndex] = current.mixingFrom;\n                this.queue.interrupt(current);\n                this.queue.end(current);\n                this.clearNext(current);\n                current = current.mixingFrom;\n                interrupt = false;\n            }\n            else\n                this.clearNext(current);\n        }\n        let entry = this.trackEntry(trackIndex, animation, loop, current);\n        this.setCurrent(trackIndex, entry, interrupt);\n        this.queue.drain();\n        return entry;\n    }\n    /** Queues an animation by name.\n     *\n     * See {@link #addAnimationWith()}. */\n    addAnimation(trackIndex, animationName, loop = false, delay = 0) {\n        let animation = this.data.skeletonData.findAnimation(animationName);\n        if (!animation)\n            throw new Error(\"Animation not found: \" + animationName);\n        return this.addAnimationWith(trackIndex, animation, loop, delay);\n    }\n    /** Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is\n     * equivalent to calling {@link #setAnimationWith()}.\n     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n     *           minus any mix duration (from the {@link AnimationStateData}) plus the specified `delay` (ie the mix\n     *           ends at (`delay` = 0) or before (`delay` < 0) the previous track entry duration). If the\n     *           previous entry is looping, its next loop completion is used instead of its duration.\n     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\n    addAnimationWith(trackIndex, animation, loop = false, delay = 0) {\n        if (!animation)\n            throw new Error(\"animation cannot be null.\");\n        let last = this.expandToIndex(trackIndex);\n        if (last) {\n            while (last.next)\n                last = last.next;\n        }\n        let entry = this.trackEntry(trackIndex, animation, loop, last);\n        if (!last) {\n            this.setCurrent(trackIndex, entry, true);\n            this.queue.drain();\n        }\n        else {\n            last.next = entry;\n            entry.previous = last;\n            if (delay <= 0)\n                delay += last.getTrackComplete() - entry.mixDuration;\n        }\n        entry.delay = delay;\n        return entry;\n    }\n    /** Sets an empty animation for a track, discarding any queued animations, and sets the track entry's\n     * {@link TrackEntry#mixduration}. An empty animation has no timelines and serves as a placeholder for mixing in or out.\n     *\n     * Mixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation()},\n     * {@link #setEmptyAnimations()}, or {@link #addEmptyAnimation()}. Mixing to an empty animation causes\n     * the previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation\n     * transition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of\n     * 0 still mixes out over one frame.\n     *\n     * Mixing in is done by first setting an empty animation, then adding an animation using\n     * {@link #addAnimation()} and on the returned track entry, set the\n     * {@link TrackEntry#setMixDuration()}. Mixing from an empty animation causes the new animation to be applied more and\n     * more over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the\n     * setup pose value if no lower tracks key the property to the value keyed in the new animation. */\n    setEmptyAnimation(trackIndex, mixDuration = 0) {\n        let entry = this.setAnimationWith(trackIndex, AnimationState.emptyAnimation(), false);\n        entry.mixDuration = mixDuration;\n        entry.trackEnd = mixDuration;\n        return entry;\n    }\n    /** Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's\n     * {@link TrackEntry#mixDuration}. If the track is empty, it is equivalent to calling\n     * {@link #setEmptyAnimation()}.\n     *\n     * See {@link #setEmptyAnimation()}.\n     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n     *           minus any mix duration plus the specified `delay` (ie the mix ends at (`delay` = 0) or\n     *           before (`delay` < 0) the previous track entry duration). If the previous entry is looping, its next\n     *           loop completion is used instead of its duration.\n     * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\n    addEmptyAnimation(trackIndex, mixDuration = 0, delay = 0) {\n        let entry = this.addAnimationWith(trackIndex, AnimationState.emptyAnimation(), false, delay);\n        if (delay <= 0)\n            entry.delay += entry.mixDuration - mixDuration;\n        entry.mixDuration = mixDuration;\n        entry.trackEnd = mixDuration;\n        return entry;\n    }\n    /** Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix\n      * duration. */\n    setEmptyAnimations(mixDuration = 0) {\n        let oldDrainDisabled = this.queue.drainDisabled;\n        this.queue.drainDisabled = true;\n        for (let i = 0, n = this.tracks.length; i < n; i++) {\n            let current = this.tracks[i];\n            if (current)\n                this.setEmptyAnimation(current.trackIndex, mixDuration);\n        }\n        this.queue.drainDisabled = oldDrainDisabled;\n        this.queue.drain();\n    }\n    expandToIndex(index) {\n        if (index < this.tracks.length)\n            return this.tracks[index];\n        Utils.ensureArrayCapacity(this.tracks, index + 1, null);\n        this.tracks.length = index + 1;\n        return null;\n    }\n    /** @param last May be null. */\n    trackEntry(trackIndex, animation, loop, last) {\n        let entry = this.trackEntryPool.obtain();\n        entry.reset();\n        entry.trackIndex = trackIndex;\n        entry.animation = animation;\n        entry.loop = loop;\n        entry.holdPrevious = false;\n        entry.reverse = false;\n        entry.shortestRotation = false;\n        entry.eventThreshold = 0;\n        entry.alphaAttachmentThreshold = 0;\n        entry.mixAttachmentThreshold = 0;\n        entry.mixDrawOrderThreshold = 0;\n        entry.animationStart = 0;\n        entry.animationEnd = animation.duration;\n        entry.animationLast = -1;\n        entry.nextAnimationLast = -1;\n        entry.delay = 0;\n        entry.trackTime = 0;\n        entry.trackLast = -1;\n        entry.nextTrackLast = -1;\n        entry.trackEnd = Number.MAX_VALUE;\n        entry.timeScale = 1;\n        entry.alpha = 1;\n        entry.mixTime = 0;\n        entry.mixDuration = !last ? 0 : this.data.getMix(last.animation, animation);\n        entry.interruptAlpha = 1;\n        entry.totalAlpha = 0;\n        entry.mixBlend = MixBlend.replace;\n        return entry;\n    }\n    /** Removes the {@link TrackEntry#getNext() next entry} and all entries after it for the specified entry. */\n    clearNext(entry) {\n        let next = entry.next;\n        while (next) {\n            this.queue.dispose(next);\n            next = next.next;\n        }\n        entry.next = null;\n    }\n    _animationsChanged() {\n        this.animationsChanged = false;\n        this.propertyIDs.clear();\n        let tracks = this.tracks;\n        for (let i = 0, n = tracks.length; i < n; i++) {\n            let entry = tracks[i];\n            if (!entry)\n                continue;\n            while (entry.mixingFrom)\n                entry = entry.mixingFrom;\n            do {\n                if (!entry.mixingTo || entry.mixBlend != MixBlend.add)\n                    this.computeHold(entry);\n                entry = entry.mixingTo;\n            } while (entry);\n        }\n    }\n    computeHold(entry) {\n        let to = entry.mixingTo;\n        let timelines = entry.animation.timelines;\n        let timelinesCount = entry.animation.timelines.length;\n        let timelineMode = entry.timelineMode;\n        timelineMode.length = timelinesCount;\n        let timelineHoldMix = entry.timelineHoldMix;\n        timelineHoldMix.length = 0;\n        let propertyIDs = this.propertyIDs;\n        if (to && to.holdPrevious) {\n            for (let i = 0; i < timelinesCount; i++)\n                timelineMode[i] = propertyIDs.addAll(timelines[i].getPropertyIds()) ? HOLD_FIRST : HOLD_SUBSEQUENT;\n            return;\n        }\n        outer: for (let i = 0; i < timelinesCount; i++) {\n            let timeline = timelines[i];\n            let ids = timeline.getPropertyIds();\n            if (!propertyIDs.addAll(ids))\n                timelineMode[i] = SUBSEQUENT;\n            else if (!to || timeline instanceof AttachmentTimeline || timeline instanceof DrawOrderTimeline\n                || timeline instanceof EventTimeline || !to.animation.hasTimeline(ids)) {\n                timelineMode[i] = FIRST;\n            }\n            else {\n                for (let next = to.mixingTo; next; next = next.mixingTo) {\n                    if (next.animation.hasTimeline(ids))\n                        continue;\n                    if (entry.mixDuration > 0) {\n                        timelineMode[i] = HOLD_MIX;\n                        timelineHoldMix[i] = next;\n                        continue outer;\n                    }\n                    break;\n                }\n                timelineMode[i] = HOLD_FIRST;\n            }\n        }\n    }\n    /** Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing. */\n    getCurrent(trackIndex) {\n        if (trackIndex >= this.tracks.length)\n            return null;\n        return this.tracks[trackIndex];\n    }\n    /** Adds a listener to receive events for all track entries. */\n    addListener(listener) {\n        if (!listener)\n            throw new Error(\"listener cannot be null.\");\n        this.listeners.push(listener);\n    }\n    /** Removes the listener added with {@link #addListener()}. */\n    removeListener(listener) {\n        let index = this.listeners.indexOf(listener);\n        if (index >= 0)\n            this.listeners.splice(index, 1);\n    }\n    /** Removes all listeners added with {@link #addListener()}. */\n    clearListeners() {\n        this.listeners.length = 0;\n    }\n    /** Discards all listener notifications that have not yet been delivered. This can be useful to call from an\n     * {@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery\n     * are not wanted because new animations are being set. */\n    clearListenerNotifications() {\n        this.queue.clear();\n    }\n}\n/** Stores settings and other state for the playback of an animation on an {@link AnimationState} track.\n *\n * References to a track entry must not be kept after the {@link AnimationStateListener#dispose()} event occurs. */\nexport class TrackEntry {\n    /** The animation to apply for this track entry. */\n    animation = null;\n    previous = null;\n    /** The animation queued to start after this animation, or null. `next` makes up a linked list. */\n    next = null;\n    /** The track entry for the previous animation when mixing from the previous animation to this animation, or null if no\n     * mixing is currently occuring. When mixing from multiple animations, `mixingFrom` makes up a linked list. */\n    mixingFrom = null;\n    /** The track entry for the next animation when mixing from this animation to the next animation, or null if no mixing is\n     * currently occuring. When mixing to multiple animations, `mixingTo` makes up a linked list. */\n    mixingTo = null;\n    /** The listener for events generated by this track entry, or null.\n     *\n     * A track entry returned from {@link AnimationState#setAnimation()} is already the current animation\n     * for the track, so the track entry listener {@link AnimationStateListener#start()} will not be called. */\n    listener = null;\n    /** The index of the track where this track entry is either current or queued.\n     *\n     * See {@link AnimationState#getCurrent()}. */\n    trackIndex = 0;\n    /** If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n     * duration. */\n    loop = false;\n    /** If true, when mixing from the previous animation to this animation, the previous animation is applied as normal instead\n     * of being mixed out.\n     *\n     * When mixing between animations that key the same property, if a lower track also keys that property then the value will\n     * briefly dip toward the lower track value during the mix. This happens because the first animation mixes from 100% to 0%\n     * while the second animation mixes from 0% to 100%. Setting `holdPrevious` to true applies the first animation\n     * at 100% during the mix so the lower track value is overwritten. Such dipping does not occur on the lowest track which\n     * keys the property, only when a higher track also keys the property.\n     *\n     * Snapping will occur if `holdPrevious` is true and this animation does not key all the same properties as the\n     * previous animation. */\n    holdPrevious = false;\n    reverse = false;\n    shortestRotation = false;\n    /** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\n     * `eventThreshold`, event timelines are applied while this animation is being mixed out. Defaults to 0, so event\n     * timelines are not applied while this animation is being mixed out. */\n    eventThreshold = 0;\n    /** When the mix percentage ({@link #mixtime} / {@link #mixDuration}) is less than the\n     * `attachmentThreshold`, attachment timelines are applied while this animation is being mixed out. Defaults to\n     * 0, so attachment timelines are not applied while this animation is being mixed out. */\n    mixAttachmentThreshold = 0;\n    /** When {@link #getAlpha()} is greater than <code>alphaAttachmentThreshold</code>, attachment timelines are applied.\n     * Defaults to 0, so attachment timelines are always applied. */\n    alphaAttachmentThreshold = 0;\n    /** When the mix percentage ({@link #getMixTime()} / {@link #getMixDuration()}) is less than the\n     * <code>mixDrawOrderThreshold</code>, draw order timelines are applied while this animation is being mixed out. Defaults to\n     * 0, so draw order timelines are not applied while this animation is being mixed out. */\n    mixDrawOrderThreshold = 0;\n    /** Seconds when this animation starts, both initially and after looping. Defaults to 0.\n     *\n     * When changing the `animationStart` time, it often makes sense to set {@link #animationLast} to the same\n     * value to prevent timeline keys before the start time from triggering. */\n    animationStart = 0;\n    /** Seconds for the last frame of this animation. Non-looping animations won't play past this time. Looping animations will\n     * loop back to {@link #animationStart} at this time. Defaults to the animation {@link Animation#duration}. */\n    animationEnd = 0;\n    /** The time in seconds this animation was last applied. Some timelines use this for one-time triggers. Eg, when this\n     * animation is applied, event timelines will fire all events between the `animationLast` time (exclusive) and\n     * `animationTime` (inclusive). Defaults to -1 to ensure triggers on frame 0 happen the first time this animation\n     * is applied. */\n    animationLast = 0;\n    nextAnimationLast = 0;\n    /** Seconds to postpone playing the animation. When this track entry is the current track entry, `delay`\n     * postpones incrementing the {@link #trackTime}. When this track entry is queued, `delay` is the time from\n     * the start of the previous animation to when this track entry will become the current track entry (ie when the previous\n     * track entry {@link TrackEntry#trackTime} >= this track entry's `delay`).\n     *\n     * {@link #timeScale} affects the delay. */\n    delay = 0;\n    /** Current time in seconds this track entry has been the current track entry. The track time determines\n     * {@link #animationTime}. The track time can be set to start the animation at a time other than 0, without affecting\n     * looping. */\n    trackTime = 0;\n    trackLast = 0;\n    nextTrackLast = 0;\n    /** The track time in seconds when this animation will be removed from the track. Defaults to the highest possible float\n     * value, meaning the animation will be applied until a new animation is set or the track is cleared. If the track end time\n     * is reached, no other animations are queued for playback, and mixing from any previous animations is complete, then the\n     * properties keyed by the animation are set to the setup pose and the track is cleared.\n     *\n     * It may be desired to use {@link AnimationState#addEmptyAnimation()} rather than have the animation\n     * abruptly cease being applied. */\n    trackEnd = 0;\n    /** Multiplier for the delta time when this track entry is updated, causing time for this animation to pass slower or\n     * faster. Defaults to 1.\n     *\n     * {@link #mixTime} is not affected by track entry time scale, so {@link #mixDuration} may need to be adjusted to\n     * match the animation speed.\n     *\n     * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\n     * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, assuming time scale to be 1. If\n     * the time scale is not 1, the delay may need to be adjusted.\n     *\n     * See AnimationState {@link AnimationState#timeScale} for affecting all animations. */\n    timeScale = 0;\n    /** Values < 1 mix this animation with the skeleton's current pose (usually the pose resulting from lower tracks). Defaults\n     * to 1, which overwrites the skeleton's current pose with this animation.\n     *\n     * Typically track 0 is used to completely pose the skeleton, then alpha is used on higher tracks. It doesn't make sense to\n     * use alpha on track 0 if the skeleton pose is from the last frame render. */\n    alpha = 0;\n    /** Seconds from 0 to the {@link #getMixDuration()} when mixing from the previous animation to this animation. May be\n     * slightly more than `mixDuration` when the mix is complete. */\n    mixTime = 0;\n    /** Seconds for mixing from the previous animation to this animation. Defaults to the value provided by AnimationStateData\n     * {@link AnimationStateData#getMix()} based on the animation before this animation (if any).\n     *\n     * A mix duration of 0 still mixes out over one frame to provide the track entry being mixed out a chance to revert the\n     * properties it was animating.\n     *\n     * The `mixDuration` can be set manually rather than use the value from\n     * {@link AnimationStateData#getMix()}. In that case, the `mixDuration` can be set for a new\n     * track entry only before {@link AnimationState#update(float)} is first called.\n     *\n     * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\n     * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, not a mix duration set\n     * afterward. */\n    _mixDuration = 0;\n    interruptAlpha = 0;\n    totalAlpha = 0;\n    get mixDuration() {\n        return this._mixDuration;\n    }\n    set mixDuration(mixDuration) {\n        this._mixDuration = mixDuration;\n    }\n    setMixDurationWithDelay(mixDuration, delay) {\n        this._mixDuration = mixDuration;\n        if (this.previous != null && delay <= 0)\n            delay += this.previous.getTrackComplete() - mixDuration;\n        this.delay = delay;\n    }\n    /** Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}, which\n     * replaces the values from the lower tracks with the animation values. {@link MixBlend#add} adds the animation values to\n     * the values from the lower tracks.\n     *\n     * The `mixBlend` can be set for a new track entry only before {@link AnimationState#apply()} is first\n     * called. */\n    mixBlend = MixBlend.replace;\n    timelineMode = new Array();\n    timelineHoldMix = new Array();\n    timelinesRotation = new Array();\n    reset() {\n        this.next = null;\n        this.previous = null;\n        this.mixingFrom = null;\n        this.mixingTo = null;\n        this.animation = null;\n        this.listener = null;\n        this.timelineMode.length = 0;\n        this.timelineHoldMix.length = 0;\n        this.timelinesRotation.length = 0;\n    }\n    /** Uses {@link #trackTime} to compute the `animationTime`, which is between {@link #animationStart}\n     * and {@link #animationEnd}. When the `trackTime` is 0, the `animationTime` is equal to the\n     * `animationStart` time. */\n    getAnimationTime() {\n        if (this.loop) {\n            let duration = this.animationEnd - this.animationStart;\n            if (duration == 0)\n                return this.animationStart;\n            return (this.trackTime % duration) + this.animationStart;\n        }\n        return Math.min(this.trackTime + this.animationStart, this.animationEnd);\n    }\n    setAnimationLast(animationLast) {\n        this.animationLast = animationLast;\n        this.nextAnimationLast = animationLast;\n    }\n    /** Returns true if at least one loop has been completed.\n     *\n     * See {@link AnimationStateListener#complete()}. */\n    isComplete() {\n        return this.trackTime >= this.animationEnd - this.animationStart;\n    }\n    /** Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\n     * long way around when using {@link #alpha} and starting animations on other tracks.\n     *\n     * Mixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:\n     * the short way or the long way around. The two rotations likely change over time, so which direction is the short or long\n     * way also changes. If the short way was always chosen, bones would flip to the other side when that direction became the\n     * long way. TrackEntry chooses the short way the first time it is applied and remembers that direction. */\n    resetRotationDirections() {\n        this.timelinesRotation.length = 0;\n    }\n    getTrackComplete() {\n        let duration = this.animationEnd - this.animationStart;\n        if (duration != 0) {\n            if (this.loop)\n                return duration * (1 + ((this.trackTime / duration) | 0)); // Completion of next loop.\n            if (this.trackTime < duration)\n                return duration; // Before duration.\n        }\n        return this.trackTime; // Next update.\n    }\n    /** Returns true if this track entry has been applied at least once.\n     * <p>\n     * See {@link AnimationState#apply(Skeleton)}. */\n    wasApplied() {\n        return this.nextTrackLast != -1;\n    }\n    /** Returns true if there is a {@link #getNext()} track entry and it will become the current track entry during the next\n     * {@link AnimationState#update(float)}. */\n    isNextReady() {\n        return this.next != null && this.nextTrackLast - this.next.delay >= 0;\n    }\n}\nexport class EventQueue {\n    objects = [];\n    drainDisabled = false;\n    animState;\n    constructor(animState) {\n        this.animState = animState;\n    }\n    start(entry) {\n        this.objects.push(EventType.start);\n        this.objects.push(entry);\n        this.animState.animationsChanged = true;\n    }\n    interrupt(entry) {\n        this.objects.push(EventType.interrupt);\n        this.objects.push(entry);\n    }\n    end(entry) {\n        this.objects.push(EventType.end);\n        this.objects.push(entry);\n        this.animState.animationsChanged = true;\n    }\n    dispose(entry) {\n        this.objects.push(EventType.dispose);\n        this.objects.push(entry);\n    }\n    complete(entry) {\n        this.objects.push(EventType.complete);\n        this.objects.push(entry);\n    }\n    event(entry, event) {\n        this.objects.push(EventType.event);\n        this.objects.push(entry);\n        this.objects.push(event);\n    }\n    drain() {\n        if (this.drainDisabled)\n            return;\n        this.drainDisabled = true;\n        let objects = this.objects;\n        let listeners = this.animState.listeners;\n        for (let i = 0; i < objects.length; i += 2) {\n            let type = objects[i];\n            let entry = objects[i + 1];\n            switch (type) {\n                case EventType.start:\n                    if (entry.listener && entry.listener.start)\n                        entry.listener.start(entry);\n                    for (let ii = 0; ii < listeners.length; ii++) {\n                        let listener = listeners[ii];\n                        if (listener.start)\n                            listener.start(entry);\n                    }\n                    break;\n                case EventType.interrupt:\n                    if (entry.listener && entry.listener.interrupt)\n                        entry.listener.interrupt(entry);\n                    for (let ii = 0; ii < listeners.length; ii++) {\n                        let listener = listeners[ii];\n                        if (listener.interrupt)\n                            listener.interrupt(entry);\n                    }\n                    break;\n                case EventType.end:\n                    if (entry.listener && entry.listener.end)\n                        entry.listener.end(entry);\n                    for (let ii = 0; ii < listeners.length; ii++) {\n                        let listener = listeners[ii];\n                        if (listener.end)\n                            listener.end(entry);\n                    }\n                // Fall through.\n                case EventType.dispose:\n                    if (entry.listener && entry.listener.dispose)\n                        entry.listener.dispose(entry);\n                    for (let ii = 0; ii < listeners.length; ii++) {\n                        let listener = listeners[ii];\n                        if (listener.dispose)\n                            listener.dispose(entry);\n                    }\n                    this.animState.trackEntryPool.free(entry);\n                    break;\n                case EventType.complete:\n                    if (entry.listener && entry.listener.complete)\n                        entry.listener.complete(entry);\n                    for (let ii = 0; ii < listeners.length; ii++) {\n                        let listener = listeners[ii];\n                        if (listener.complete)\n                            listener.complete(entry);\n                    }\n                    break;\n                case EventType.event:\n                    let event = objects[i++ + 2];\n                    if (entry.listener && entry.listener.event)\n                        entry.listener.event(entry, event);\n                    for (let ii = 0; ii < listeners.length; ii++) {\n                        let listener = listeners[ii];\n                        if (listener.event)\n                            listener.event(entry, event);\n                    }\n                    break;\n            }\n        }\n        this.clear();\n        this.drainDisabled = false;\n    }\n    clear() {\n        this.objects.length = 0;\n    }\n}\nexport var EventType;\n(function (EventType) {\n    EventType[EventType[\"start\"] = 0] = \"start\";\n    EventType[EventType[\"interrupt\"] = 1] = \"interrupt\";\n    EventType[EventType[\"end\"] = 2] = \"end\";\n    EventType[EventType[\"dispose\"] = 3] = \"dispose\";\n    EventType[EventType[\"complete\"] = 4] = \"complete\";\n    EventType[EventType[\"event\"] = 5] = \"event\";\n})(EventType || (EventType = {}));\nexport class AnimationStateAdapter {\n    start(entry) {\n    }\n    interrupt(entry) {\n    }\n    end(entry) {\n    }\n    dispose(entry) {\n    }\n    complete(entry) {\n    }\n    event(entry, event) {\n    }\n}\n/** 1. A previously applied timeline has set this property.\n *\n * Result: Mix from the current pose to the timeline pose. */\nexport const SUBSEQUENT = 0;\n/** 1. This is the first timeline to set this property.\n * 2. The next track entry applied after this one does not have a timeline to set this property.\n *\n * Result: Mix from the setup pose to the timeline pose. */\nexport const FIRST = 1;\n/** 1) A previously applied timeline has set this property.<br>\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\n * Result: Mix from the current pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading\n * animations that key the same property. A subsequent timeline will set this property using a mix. */\nexport const HOLD_SUBSEQUENT = 2;\n/** 1) This is the first timeline to set this property.<br>\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\n * Result: Mix from the setup pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading animations\n * that key the same property. A subsequent timeline will set this property using a mix. */\nexport const HOLD_FIRST = 3;\n/** 1. This is the first timeline to set this property.\n * 2. The next track entry to be applied does have a timeline to set this property.\n * 3. The next track entry after that one does have a timeline to set this property.\n * 4. timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.\n *\n * Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than\n * 2 track entries in a row have a timeline that sets the same property.\n *\n * Eg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid\n * \"dipping\" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A\n * (which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into\n * place. */\nexport const HOLD_MIX = 4;\nexport const SETUP = 1;\nexport const CURRENT = 2;\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n/** Stores mix (crossfade) durations to be applied when {@link AnimationState} animations are changed. */\nexport class AnimationStateData {\n    /** The SkeletonData to look up animations when they are specified by name. */\n    skeletonData;\n    animationToMixTime = {};\n    /** The mix duration to use when no mix duration has been defined between two animations. */\n    defaultMix = 0;\n    constructor(skeletonData) {\n        if (!skeletonData)\n            throw new Error(\"skeletonData cannot be null.\");\n        this.skeletonData = skeletonData;\n    }\n    /** Sets a mix duration by animation name.\n     *\n     * See {@link #setMixWith()}. */\n    setMix(fromName, toName, duration) {\n        let from = this.skeletonData.findAnimation(fromName);\n        if (!from)\n            throw new Error(\"Animation not found: \" + fromName);\n        let to = this.skeletonData.findAnimation(toName);\n        if (!to)\n            throw new Error(\"Animation not found: \" + toName);\n        this.setMixWith(from, to, duration);\n    }\n    /** Sets the mix duration when changing from the specified animation to the other.\n     *\n     * See {@link TrackEntry#mixDuration}. */\n    setMixWith(from, to, duration) {\n        if (!from)\n            throw new Error(\"from cannot be null.\");\n        if (!to)\n            throw new Error(\"to cannot be null.\");\n        let key = from.name + \".\" + to.name;\n        this.animationToMixTime[key] = duration;\n    }\n    /** Returns the mix duration to use when changing from the specified animation to the other, or the {@link #defaultMix} if\n      * no mix duration has been set. */\n    getMix(from, to) {\n        let key = from.name + \".\" + to.name;\n        let value = this.animationToMixTime[key];\n        return value === undefined ? this.defaultMix : value;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW5pbWF0aW9uU3RhdGVEYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0FuaW1hdGlvblN0YXRlRGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytFQTJCK0U7QUFPL0UseUdBQXlHO0FBQ3pHLE1BQU0sT0FBTyxrQkFBa0I7SUFDOUIsOEVBQThFO0lBQzlFLFlBQVksQ0FBZTtJQUUzQixrQkFBa0IsR0FBc0IsRUFBRSxDQUFDO0lBRTNDLDRGQUE0RjtJQUM1RixVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRWYsWUFBYSxZQUEwQjtRQUN0QyxJQUFJLENBQUMsWUFBWTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNsQyxDQUFDO0lBRUQ7O29DQUVnQztJQUNoQyxNQUFNLENBQUUsUUFBZ0IsRUFBRSxNQUFjLEVBQUUsUUFBZ0I7UUFDekQsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLElBQUk7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQy9ELElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxFQUFFO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsR0FBRyxNQUFNLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVEOzs2Q0FFeUM7SUFDekMsVUFBVSxDQUFFLElBQWUsRUFBRSxFQUFhLEVBQUUsUUFBZ0I7UUFDM0QsSUFBSSxDQUFDLElBQUk7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLEVBQUU7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDL0MsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztRQUNwQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQ3pDLENBQUM7SUFFRDt3Q0FDb0M7SUFDcEMsTUFBTSxDQUFFLElBQWUsRUFBRSxFQUFhO1FBQ3JDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDcEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3RELENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIFNwaW5lIFJ1bnRpbWVzIExpY2Vuc2UgQWdyZWVtZW50XG4gKiBMYXN0IHVwZGF0ZWQgSnVseSAyOCwgMjAyMy4gUmVwbGFjZXMgYWxsIHByaW9yIHZlcnNpb25zLlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy0yMDIzLCBFc290ZXJpYyBTb2Z0d2FyZSBMTENcbiAqXG4gKiBJbnRlZ3JhdGlvbiBvZiB0aGUgU3BpbmUgUnVudGltZXMgaW50byBzb2Z0d2FyZSBvciBvdGhlcndpc2UgY3JlYXRpbmdcbiAqIGRlcml2YXRpdmUgd29ya3Mgb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIGlzIHBlcm1pdHRlZCB1bmRlciB0aGUgdGVybXMgYW5kXG4gKiBjb25kaXRpb25zIG9mIFNlY3Rpb24gMiBvZiB0aGUgU3BpbmUgRWRpdG9yIExpY2Vuc2UgQWdyZWVtZW50OlxuICogaHR0cDovL2Vzb3Rlcmljc29mdHdhcmUuY29tL3NwaW5lLWVkaXRvci1saWNlbnNlXG4gKlxuICogT3RoZXJ3aXNlLCBpdCBpcyBwZXJtaXR0ZWQgdG8gaW50ZWdyYXRlIHRoZSBTcGluZSBSdW50aW1lcyBpbnRvIHNvZnR3YXJlIG9yXG4gKiBvdGhlcndpc2UgY3JlYXRlIGRlcml2YXRpdmUgd29ya3Mgb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIChjb2xsZWN0aXZlbHksXG4gKiBcIlByb2R1Y3RzXCIpLCBwcm92aWRlZCB0aGF0IGVhY2ggdXNlciBvZiB0aGUgUHJvZHVjdHMgbXVzdCBvYnRhaW4gdGhlaXIgb3duXG4gKiBTcGluZSBFZGl0b3IgbGljZW5zZSBhbmQgcmVkaXN0cmlidXRpb24gb2YgdGhlIFByb2R1Y3RzIGluIGFueSBmb3JtIG11c3RcbiAqIGluY2x1ZGUgdGhpcyBsaWNlbnNlIGFuZCBjb3B5cmlnaHQgbm90aWNlLlxuICpcbiAqIFRIRSBTUElORSBSVU5USU1FUyBBUkUgUFJPVklERUQgQlkgRVNPVEVSSUMgU09GVFdBUkUgTExDIFwiQVMgSVNcIiBBTkQgQU5ZXG4gKiBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBFU09URVJJQyBTT0ZUV0FSRSBMTEMgQkUgTElBQkxFIEZPUiBBTllcbiAqIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gKiAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVMsXG4gKiBCVVNJTkVTUyBJTlRFUlJVUFRJT04sIE9SIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTKSBIT1dFVkVSIENBVVNFRCBBTkRcbiAqIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhFXG4gKiBTUElORSBSVU5USU1FUywgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IHsgQW5pbWF0aW9uIH0gZnJvbSBcIi4vQW5pbWF0aW9uLmpzXCI7XG5pbXBvcnQgeyBTa2VsZXRvbkRhdGEgfSBmcm9tIFwiLi9Ta2VsZXRvbkRhdGEuanNcIjtcbmltcG9ydCB7IFN0cmluZ01hcCB9IGZyb20gXCIuL1V0aWxzLmpzXCI7XG5cblxuLyoqIFN0b3JlcyBtaXggKGNyb3NzZmFkZSkgZHVyYXRpb25zIHRvIGJlIGFwcGxpZWQgd2hlbiB7QGxpbmsgQW5pbWF0aW9uU3RhdGV9IGFuaW1hdGlvbnMgYXJlIGNoYW5nZWQuICovXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uU3RhdGVEYXRhIHtcblx0LyoqIFRoZSBTa2VsZXRvbkRhdGEgdG8gbG9vayB1cCBhbmltYXRpb25zIHdoZW4gdGhleSBhcmUgc3BlY2lmaWVkIGJ5IG5hbWUuICovXG5cdHNrZWxldG9uRGF0YTogU2tlbGV0b25EYXRhO1xuXG5cdGFuaW1hdGlvblRvTWl4VGltZTogU3RyaW5nTWFwPG51bWJlcj4gPSB7fTtcblxuXHQvKiogVGhlIG1peCBkdXJhdGlvbiB0byB1c2Ugd2hlbiBubyBtaXggZHVyYXRpb24gaGFzIGJlZW4gZGVmaW5lZCBiZXR3ZWVuIHR3byBhbmltYXRpb25zLiAqL1xuXHRkZWZhdWx0TWl4ID0gMDtcblxuXHRjb25zdHJ1Y3RvciAoc2tlbGV0b25EYXRhOiBTa2VsZXRvbkRhdGEpIHtcblx0XHRpZiAoIXNrZWxldG9uRGF0YSkgdGhyb3cgbmV3IEVycm9yKFwic2tlbGV0b25EYXRhIGNhbm5vdCBiZSBudWxsLlwiKTtcblx0XHR0aGlzLnNrZWxldG9uRGF0YSA9IHNrZWxldG9uRGF0YTtcblx0fVxuXG5cdC8qKiBTZXRzIGEgbWl4IGR1cmF0aW9uIGJ5IGFuaW1hdGlvbiBuYW1lLlxuXHQgKlxuXHQgKiBTZWUge0BsaW5rICNzZXRNaXhXaXRoKCl9LiAqL1xuXHRzZXRNaXggKGZyb21OYW1lOiBzdHJpbmcsIHRvTmFtZTogc3RyaW5nLCBkdXJhdGlvbjogbnVtYmVyKSB7XG5cdFx0bGV0IGZyb20gPSB0aGlzLnNrZWxldG9uRGF0YS5maW5kQW5pbWF0aW9uKGZyb21OYW1lKTtcblx0XHRpZiAoIWZyb20pIHRocm93IG5ldyBFcnJvcihcIkFuaW1hdGlvbiBub3QgZm91bmQ6IFwiICsgZnJvbU5hbWUpO1xuXHRcdGxldCB0byA9IHRoaXMuc2tlbGV0b25EYXRhLmZpbmRBbmltYXRpb24odG9OYW1lKTtcblx0XHRpZiAoIXRvKSB0aHJvdyBuZXcgRXJyb3IoXCJBbmltYXRpb24gbm90IGZvdW5kOiBcIiArIHRvTmFtZSk7XG5cdFx0dGhpcy5zZXRNaXhXaXRoKGZyb20sIHRvLCBkdXJhdGlvbik7XG5cdH1cblxuXHQvKiogU2V0cyB0aGUgbWl4IGR1cmF0aW9uIHdoZW4gY2hhbmdpbmcgZnJvbSB0aGUgc3BlY2lmaWVkIGFuaW1hdGlvbiB0byB0aGUgb3RoZXIuXG5cdCAqXG5cdCAqIFNlZSB7QGxpbmsgVHJhY2tFbnRyeSNtaXhEdXJhdGlvbn0uICovXG5cdHNldE1peFdpdGggKGZyb206IEFuaW1hdGlvbiwgdG86IEFuaW1hdGlvbiwgZHVyYXRpb246IG51bWJlcikge1xuXHRcdGlmICghZnJvbSkgdGhyb3cgbmV3IEVycm9yKFwiZnJvbSBjYW5ub3QgYmUgbnVsbC5cIik7XG5cdFx0aWYgKCF0bykgdGhyb3cgbmV3IEVycm9yKFwidG8gY2Fubm90IGJlIG51bGwuXCIpO1xuXHRcdGxldCBrZXkgPSBmcm9tLm5hbWUgKyBcIi5cIiArIHRvLm5hbWU7XG5cdFx0dGhpcy5hbmltYXRpb25Ub01peFRpbWVba2V5XSA9IGR1cmF0aW9uO1xuXHR9XG5cblx0LyoqIFJldHVybnMgdGhlIG1peCBkdXJhdGlvbiB0byB1c2Ugd2hlbiBjaGFuZ2luZyBmcm9tIHRoZSBzcGVjaWZpZWQgYW5pbWF0aW9uIHRvIHRoZSBvdGhlciwgb3IgdGhlIHtAbGluayAjZGVmYXVsdE1peH0gaWZcblx0ICAqIG5vIG1peCBkdXJhdGlvbiBoYXMgYmVlbiBzZXQuICovXG5cdGdldE1peCAoZnJvbTogQW5pbWF0aW9uLCB0bzogQW5pbWF0aW9uKSB7XG5cdFx0bGV0IGtleSA9IGZyb20ubmFtZSArIFwiLlwiICsgdG8ubmFtZTtcblx0XHRsZXQgdmFsdWUgPSB0aGlzLmFuaW1hdGlvblRvTWl4VGltZVtrZXldO1xuXHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdGhpcy5kZWZhdWx0TWl4IDogdmFsdWU7XG5cdH1cbn1cbiJdfQ==", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color } from \"../Utils.js\";\nimport { VertexAttachment } from \"./Attachment.js\";\n/** An attachment with vertices that make up a polygon. Can be used for hit detection, creating physics bodies, spawning particle\n * effects, and more.\n *\n * See {@link SkeletonBounds} and [Bounding Boxes](http://esotericsoftware.com/spine-bounding-boxes) in the Spine User\n * Guide. */\nexport class BoundingBoxAttachment extends VertexAttachment {\n    color = new Color(1, 1, 1, 1);\n    constructor(name) {\n        super(name);\n    }\n    copy() {\n        let copy = new BoundingBoxAttachment(this.name);\n        this.copyTo(copy);\n        copy.color.setFromColor(this.color);\n        return copy;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm91bmRpbmdCb3hBdHRhY2htZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2F0dGFjaG1lbnRzL0JvdW5kaW5nQm94QXR0YWNobWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytFQTJCK0U7QUFFL0UsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQWMsTUFBTSxpQkFBaUIsQ0FBQztBQUUvRDs7OztZQUlZO0FBQ1osTUFBTSxPQUFPLHFCQUFzQixTQUFRLGdCQUFnQjtJQUMxRCxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFOUIsWUFBYSxJQUFZO1FBQ3hCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNiLENBQUM7SUFFRCxJQUFJO1FBQ0gsSUFBSSxJQUFJLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBTcGluZSBSdW50aW1lcyBMaWNlbnNlIEFncmVlbWVudFxuICogTGFzdCB1cGRhdGVkIEp1bHkgMjgsIDIwMjMuIFJlcGxhY2VzIGFsbCBwcmlvciB2ZXJzaW9ucy5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAyMywgRXNvdGVyaWMgU29mdHdhcmUgTExDXG4gKlxuICogSW50ZWdyYXRpb24gb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3Igb3RoZXJ3aXNlIGNyZWF0aW5nXG4gKiBkZXJpdmF0aXZlIHdvcmtzIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpcyBwZXJtaXR0ZWQgdW5kZXIgdGhlIHRlcm1zIGFuZFxuICogY29uZGl0aW9ucyBvZiBTZWN0aW9uIDIgb2YgdGhlIFNwaW5lIEVkaXRvciBMaWNlbnNlIEFncmVlbWVudDpcbiAqIGh0dHA6Ly9lc290ZXJpY3NvZnR3YXJlLmNvbS9zcGluZS1lZGl0b3ItbGljZW5zZVxuICpcbiAqIE90aGVyd2lzZSwgaXQgaXMgcGVybWl0dGVkIHRvIGludGVncmF0ZSB0aGUgU3BpbmUgUnVudGltZXMgaW50byBzb2Z0d2FyZSBvclxuICogb3RoZXJ3aXNlIGNyZWF0ZSBkZXJpdmF0aXZlIHdvcmtzIG9mIHRoZSBTcGluZSBSdW50aW1lcyAoY29sbGVjdGl2ZWx5LFxuICogXCJQcm9kdWN0c1wiKSwgcHJvdmlkZWQgdGhhdCBlYWNoIHVzZXIgb2YgdGhlIFByb2R1Y3RzIG11c3Qgb2J0YWluIHRoZWlyIG93blxuICogU3BpbmUgRWRpdG9yIGxpY2Vuc2UgYW5kIHJlZGlzdHJpYnV0aW9uIG9mIHRoZSBQcm9kdWN0cyBpbiBhbnkgZm9ybSBtdXN0XG4gKiBpbmNsdWRlIHRoaXMgbGljZW5zZSBhbmQgY29weXJpZ2h0IG5vdGljZS5cbiAqXG4gKiBUSEUgU1BJTkUgUlVOVElNRVMgQVJFIFBST1ZJREVEIEJZIEVTT1RFUklDIFNPRlRXQVJFIExMQyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgRVNPVEVSSUMgU09GVFdBUkUgTExDIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTLFxuICogQlVTSU5FU1MgSU5URVJSVVBUSU9OLCBPUiBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUykgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRIRVxuICogU1BJTkUgUlVOVElNRVMsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7IENvbG9yIH0gZnJvbSBcIi4uL1V0aWxzLmpzXCI7XG5pbXBvcnQgeyBWZXJ0ZXhBdHRhY2htZW50LCBBdHRhY2htZW50IH0gZnJvbSBcIi4vQXR0YWNobWVudC5qc1wiO1xuXG4vKiogQW4gYXR0YWNobWVudCB3aXRoIHZlcnRpY2VzIHRoYXQgbWFrZSB1cCBhIHBvbHlnb24uIENhbiBiZSB1c2VkIGZvciBoaXQgZGV0ZWN0aW9uLCBjcmVhdGluZyBwaHlzaWNzIGJvZGllcywgc3Bhd25pbmcgcGFydGljbGVcbiAqIGVmZmVjdHMsIGFuZCBtb3JlLlxuICpcbiAqIFNlZSB7QGxpbmsgU2tlbGV0b25Cb3VuZHN9IGFuZCBbQm91bmRpbmcgQm94ZXNdKGh0dHA6Ly9lc290ZXJpY3NvZnR3YXJlLmNvbS9zcGluZS1ib3VuZGluZy1ib3hlcykgaW4gdGhlIFNwaW5lIFVzZXJcbiAqIEd1aWRlLiAqL1xuZXhwb3J0IGNsYXNzIEJvdW5kaW5nQm94QXR0YWNobWVudCBleHRlbmRzIFZlcnRleEF0dGFjaG1lbnQge1xuXHRjb2xvciA9IG5ldyBDb2xvcigxLCAxLCAxLCAxKTtcblxuXHRjb25zdHJ1Y3RvciAobmFtZTogc3RyaW5nKSB7XG5cdFx0c3VwZXIobmFtZSk7XG5cdH1cblxuXHRjb3B5ICgpOiBBdHRhY2htZW50IHtcblx0XHRsZXQgY29weSA9IG5ldyBCb3VuZGluZ0JveEF0dGFjaG1lbnQodGhpcy5uYW1lKTtcblx0XHR0aGlzLmNvcHlUbyhjb3B5KTtcblx0XHRjb3B5LmNvbG9yLnNldEZyb21Db2xvcih0aGlzLmNvbG9yKTtcblx0XHRyZXR1cm4gY29weTtcblx0fVxufVxuIl19", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color } from \"../Utils.js\";\nimport { VertexAttachment } from \"./Attachment.js\";\n/** An attachment with vertices that make up a polygon used for clipping the rendering of other attachments. */\nexport class ClippingAttachment extends VertexAttachment {\n    /** Clipping is performed between the clipping polygon's slot and the end slot. Returns null if clipping is done until the end of\n     * the skeleton's rendering. */\n    endSlot = null;\n    // Nonessential.\n    /** The color of the clipping polygon as it was in Spine. Available only when nonessential data was exported. Clipping polygons\n     * are not usually rendered at runtime. */\n    color = new Color(0.2275, 0.2275, 0.8078, 1); // ce3a3aff\n    constructor(name) {\n        super(name);\n    }\n    copy() {\n        let copy = new ClippingAttachment(this.name);\n        this.copyTo(copy);\n        copy.endSlot = this.endSlot;\n        copy.color.setFromColor(this.color);\n        return copy;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xpcHBpbmdBdHRhY2htZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2F0dGFjaG1lbnRzL0NsaXBwaW5nQXR0YWNobWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytFQTJCK0U7QUFHL0UsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQWMsTUFBTSxpQkFBaUIsQ0FBQztBQUUvRCwrR0FBK0c7QUFDL0csTUFBTSxPQUFPLGtCQUFtQixTQUFRLGdCQUFnQjtJQUN2RDttQ0FDK0I7SUFDL0IsT0FBTyxHQUFvQixJQUFJLENBQUM7SUFFaEMsZ0JBQWdCO0lBQ2hCOzhDQUMwQztJQUMxQyxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXO0lBRXpELFlBQWEsSUFBWTtRQUN4QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDYixDQUFDO0lBRUQsSUFBSTtRQUNILElBQUksSUFBSSxHQUFHLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIFNwaW5lIFJ1bnRpbWVzIExpY2Vuc2UgQWdyZWVtZW50XG4gKiBMYXN0IHVwZGF0ZWQgSnVseSAyOCwgMjAyMy4gUmVwbGFjZXMgYWxsIHByaW9yIHZlcnNpb25zLlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy0yMDIzLCBFc290ZXJpYyBTb2Z0d2FyZSBMTENcbiAqXG4gKiBJbnRlZ3JhdGlvbiBvZiB0aGUgU3BpbmUgUnVudGltZXMgaW50byBzb2Z0d2FyZSBvciBvdGhlcndpc2UgY3JlYXRpbmdcbiAqIGRlcml2YXRpdmUgd29ya3Mgb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIGlzIHBlcm1pdHRlZCB1bmRlciB0aGUgdGVybXMgYW5kXG4gKiBjb25kaXRpb25zIG9mIFNlY3Rpb24gMiBvZiB0aGUgU3BpbmUgRWRpdG9yIExpY2Vuc2UgQWdyZWVtZW50OlxuICogaHR0cDovL2Vzb3Rlcmljc29mdHdhcmUuY29tL3NwaW5lLWVkaXRvci1saWNlbnNlXG4gKlxuICogT3RoZXJ3aXNlLCBpdCBpcyBwZXJtaXR0ZWQgdG8gaW50ZWdyYXRlIHRoZSBTcGluZSBSdW50aW1lcyBpbnRvIHNvZnR3YXJlIG9yXG4gKiBvdGhlcndpc2UgY3JlYXRlIGRlcml2YXRpdmUgd29ya3Mgb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIChjb2xsZWN0aXZlbHksXG4gKiBcIlByb2R1Y3RzXCIpLCBwcm92aWRlZCB0aGF0IGVhY2ggdXNlciBvZiB0aGUgUHJvZHVjdHMgbXVzdCBvYnRhaW4gdGhlaXIgb3duXG4gKiBTcGluZSBFZGl0b3IgbGljZW5zZSBhbmQgcmVkaXN0cmlidXRpb24gb2YgdGhlIFByb2R1Y3RzIGluIGFueSBmb3JtIG11c3RcbiAqIGluY2x1ZGUgdGhpcyBsaWNlbnNlIGFuZCBjb3B5cmlnaHQgbm90aWNlLlxuICpcbiAqIFRIRSBTUElORSBSVU5USU1FUyBBUkUgUFJPVklERUQgQlkgRVNPVEVSSUMgU09GVFdBUkUgTExDIFwiQVMgSVNcIiBBTkQgQU5ZXG4gKiBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBFU09URVJJQyBTT0ZUV0FSRSBMTEMgQkUgTElBQkxFIEZPUiBBTllcbiAqIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gKiAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVMsXG4gKiBCVVNJTkVTUyBJTlRFUlJVUFRJT04sIE9SIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTKSBIT1dFVkVSIENBVVNFRCBBTkRcbiAqIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhFXG4gKiBTUElORSBSVU5USU1FUywgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IHsgU2xvdERhdGEgfSBmcm9tIFwiLi4vU2xvdERhdGEuanNcIjtcbmltcG9ydCB7IENvbG9yIH0gZnJvbSBcIi4uL1V0aWxzLmpzXCI7XG5pbXBvcnQgeyBWZXJ0ZXhBdHRhY2htZW50LCBBdHRhY2htZW50IH0gZnJvbSBcIi4vQXR0YWNobWVudC5qc1wiO1xuXG4vKiogQW4gYXR0YWNobWVudCB3aXRoIHZlcnRpY2VzIHRoYXQgbWFrZSB1cCBhIHBvbHlnb24gdXNlZCBmb3IgY2xpcHBpbmcgdGhlIHJlbmRlcmluZyBvZiBvdGhlciBhdHRhY2htZW50cy4gKi9cbmV4cG9ydCBjbGFzcyBDbGlwcGluZ0F0dGFjaG1lbnQgZXh0ZW5kcyBWZXJ0ZXhBdHRhY2htZW50IHtcblx0LyoqIENsaXBwaW5nIGlzIHBlcmZvcm1lZCBiZXR3ZWVuIHRoZSBjbGlwcGluZyBwb2x5Z29uJ3Mgc2xvdCBhbmQgdGhlIGVuZCBzbG90LiBSZXR1cm5zIG51bGwgaWYgY2xpcHBpbmcgaXMgZG9uZSB1bnRpbCB0aGUgZW5kIG9mXG5cdCAqIHRoZSBza2VsZXRvbidzIHJlbmRlcmluZy4gKi9cblx0ZW5kU2xvdDogU2xvdERhdGEgfCBudWxsID0gbnVsbDtcblxuXHQvLyBOb25lc3NlbnRpYWwuXG5cdC8qKiBUaGUgY29sb3Igb2YgdGhlIGNsaXBwaW5nIHBvbHlnb24gYXMgaXQgd2FzIGluIFNwaW5lLiBBdmFpbGFibGUgb25seSB3aGVuIG5vbmVzc2VudGlhbCBkYXRhIHdhcyBleHBvcnRlZC4gQ2xpcHBpbmcgcG9seWdvbnNcblx0ICogYXJlIG5vdCB1c3VhbGx5IHJlbmRlcmVkIGF0IHJ1bnRpbWUuICovXG5cdGNvbG9yID0gbmV3IENvbG9yKDAuMjI3NSwgMC4yMjc1LCAwLjgwNzgsIDEpOyAvLyBjZTNhM2FmZlxuXG5cdGNvbnN0cnVjdG9yIChuYW1lOiBzdHJpbmcpIHtcblx0XHRzdXBlcihuYW1lKTtcblx0fVxuXG5cdGNvcHkgKCk6IEF0dGFjaG1lbnQge1xuXHRcdGxldCBjb3B5ID0gbmV3IENsaXBwaW5nQXR0YWNobWVudCh0aGlzLm5hbWUpO1xuXHRcdHRoaXMuY29weVRvKGNvcHkpO1xuXHRcdGNvcHkuZW5kU2xvdCA9IHRoaXMuZW5kU2xvdDtcblx0XHRjb3B5LmNvbG9yLnNldEZyb21Db2xvcih0aGlzLmNvbG9yKTtcblx0XHRyZXR1cm4gY29weTtcblx0fVxufVxuIl19", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nexport class Texture {\n    _image;\n    constructor(image) {\n        this._image = image;\n    }\n    getImage() {\n        return this._image;\n    }\n}\nexport var TextureFilter;\n(function (TextureFilter) {\n    TextureFilter[TextureFilter[\"Nearest\"] = 9728] = \"Nearest\";\n    TextureFilter[TextureFilter[\"Linear\"] = 9729] = \"Linear\";\n    TextureFilter[TextureFilter[\"MipMap\"] = 9987] = \"MipMap\";\n    TextureFilter[TextureFilter[\"MipMapNearestNearest\"] = 9984] = \"MipMapNearestNearest\";\n    TextureFilter[TextureFilter[\"MipMapLinearNearest\"] = 9985] = \"MipMapLinearNearest\";\n    TextureFilter[TextureFilter[\"MipMapNearestLinear\"] = 9986] = \"MipMapNearestLinear\";\n    TextureFilter[TextureFilter[\"MipMapLinearLinear\"] = 9987] = \"MipMapLinearLinear\"; // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\n})(TextureFilter || (TextureFilter = {}));\nexport var TextureWrap;\n(function (TextureWrap) {\n    TextureWrap[TextureWrap[\"MirroredRepeat\"] = 33648] = \"MirroredRepeat\";\n    TextureWrap[TextureWrap[\"ClampToEdge\"] = 33071] = \"ClampToEdge\";\n    TextureWrap[TextureWrap[\"Repeat\"] = 10497] = \"Repeat\"; // WebGLRenderingContext.REPEAT\n})(TextureWrap || (TextureWrap = {}));\nexport class TextureRegion {\n    texture;\n    u = 0;\n    v = 0;\n    u2 = 0;\n    v2 = 0;\n    width = 0;\n    height = 0;\n    degrees = 0;\n    offsetX = 0;\n    offsetY = 0;\n    originalWidth = 0;\n    originalHeight = 0;\n}\nexport class FakeTexture extends Texture {\n    setFilters(minFilter, magFilter) { }\n    setWraps(uWrap, vWrap) { }\n    dispose() { }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dHVyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9UZXh0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0VBMkIrRTtBQUUvRSxNQUFNLE9BQWdCLE9BQU87SUFDbEIsTUFBTSxDQUF1QztJQUV2RCxZQUFhLEtBQTJDO1FBQ3ZELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxRQUFRO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3BCLENBQUM7Q0FLRDtBQUVELE1BQU0sQ0FBTixJQUFZLGFBUVg7QUFSRCxXQUFZLGFBQWE7SUFDeEIsMERBQWMsQ0FBQTtJQUNkLHdEQUFhLENBQUE7SUFDYix3REFBYSxDQUFBO0lBQ2Isb0ZBQTJCLENBQUE7SUFDM0Isa0ZBQTBCLENBQUE7SUFDMUIsa0ZBQTBCLENBQUE7SUFDMUIsZ0ZBQXlCLENBQUEsQ0FBQyw2Q0FBNkM7QUFDeEUsQ0FBQyxFQVJXLGFBQWEsS0FBYixhQUFhLFFBUXhCO0FBRUQsTUFBTSxDQUFOLElBQVksV0FJWDtBQUpELFdBQVksV0FBVztJQUN0QixxRUFBc0IsQ0FBQTtJQUN0QiwrREFBbUIsQ0FBQTtJQUNuQixxREFBYyxDQUFBLENBQUMsK0JBQStCO0FBQy9DLENBQUMsRUFKVyxXQUFXLEtBQVgsV0FBVyxRQUl0QjtBQUVELE1BQU0sT0FBTyxhQUFhO0lBQ3pCLE9BQU8sQ0FBTTtJQUNiLENBQUMsR0FBRyxDQUFDLENBQUM7SUFBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDZixLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN0QixPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ1osT0FBTyxHQUFHLENBQUMsQ0FBQztJQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDekIsYUFBYSxHQUFHLENBQUMsQ0FBQztJQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7Q0FDdEM7QUFFRCxNQUFNLE9BQU8sV0FBWSxTQUFRLE9BQU87SUFDdkMsVUFBVSxDQUFFLFNBQXdCLEVBQUUsU0FBd0IsSUFBSSxDQUFDO0lBQ25FLFFBQVEsQ0FBRSxLQUFrQixFQUFFLEtBQWtCLElBQUksQ0FBQztJQUNyRCxPQUFPLEtBQU0sQ0FBQztDQUNkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogU3BpbmUgUnVudGltZXMgTGljZW5zZSBBZ3JlZW1lbnRcbiAqIExhc3QgdXBkYXRlZCBKdWx5IDI4LCAyMDIzLiBSZXBsYWNlcyBhbGwgcHJpb3IgdmVyc2lvbnMuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLTIwMjMsIEVzb3RlcmljIFNvZnR3YXJlIExMQ1xuICpcbiAqIEludGVncmF0aW9uIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpbnRvIHNvZnR3YXJlIG9yIG90aGVyd2lzZSBjcmVhdGluZ1xuICogZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgaXMgcGVybWl0dGVkIHVuZGVyIHRoZSB0ZXJtcyBhbmRcbiAqIGNvbmRpdGlvbnMgb2YgU2VjdGlvbiAyIG9mIHRoZSBTcGluZSBFZGl0b3IgTGljZW5zZSBBZ3JlZW1lbnQ6XG4gKiBodHRwOi8vZXNvdGVyaWNzb2Z0d2FyZS5jb20vc3BpbmUtZWRpdG9yLWxpY2Vuc2VcbiAqXG4gKiBPdGhlcndpc2UsIGl0IGlzIHBlcm1pdHRlZCB0byBpbnRlZ3JhdGUgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3JcbiAqIG90aGVyd2lzZSBjcmVhdGUgZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgKGNvbGxlY3RpdmVseSxcbiAqIFwiUHJvZHVjdHNcIiksIHByb3ZpZGVkIHRoYXQgZWFjaCB1c2VyIG9mIHRoZSBQcm9kdWN0cyBtdXN0IG9idGFpbiB0aGVpciBvd25cbiAqIFNwaW5lIEVkaXRvciBsaWNlbnNlIGFuZCByZWRpc3RyaWJ1dGlvbiBvZiB0aGUgUHJvZHVjdHMgaW4gYW55IGZvcm0gbXVzdFxuICogaW5jbHVkZSB0aGlzIGxpY2Vuc2UgYW5kIGNvcHlyaWdodCBub3RpY2UuXG4gKlxuICogVEhFIFNQSU5FIFJVTlRJTUVTIEFSRSBQUk9WSURFRCBCWSBFU09URVJJQyBTT0ZUV0FSRSBMTEMgXCJBUyBJU1wiIEFORCBBTllcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEVTT1RFUklDIFNPRlRXQVJFIExMQyBCRSBMSUFCTEUgRk9SIEFOWVxuICogRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbiAqIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUyxcbiAqIEJVU0lORVNTIElOVEVSUlVQVElPTiwgT1IgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFMpIEhPV0VWRVIgQ0FVU0VEIEFORFxuICogT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSEVcbiAqIFNQSU5FIFJVTlRJTUVTLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGV4dHVyZSB7XG5cdHByb3RlY3RlZCBfaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQgfCBJbWFnZUJpdG1hcCB8IGFueTtcblxuXHRjb25zdHJ1Y3RvciAoaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQgfCBJbWFnZUJpdG1hcCB8IGFueSkge1xuXHRcdHRoaXMuX2ltYWdlID0gaW1hZ2U7XG5cdH1cblxuXHRnZXRJbWFnZSAoKTogSFRNTEltYWdlRWxlbWVudCB8IEltYWdlQml0bWFwIHwgYW55IHtcblx0XHRyZXR1cm4gdGhpcy5faW1hZ2U7XG5cdH1cblxuXHRhYnN0cmFjdCBzZXRGaWx0ZXJzIChtaW5GaWx0ZXI6IFRleHR1cmVGaWx0ZXIsIG1hZ0ZpbHRlcjogVGV4dHVyZUZpbHRlcik6IHZvaWQ7XG5cdGFic3RyYWN0IHNldFdyYXBzICh1V3JhcDogVGV4dHVyZVdyYXAsIHZXcmFwOiBUZXh0dXJlV3JhcCk6IHZvaWQ7XG5cdGFic3RyYWN0IGRpc3Bvc2UgKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBlbnVtIFRleHR1cmVGaWx0ZXIge1xuXHROZWFyZXN0ID0gOTcyOCwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0Lk5FQVJFU1Rcblx0TGluZWFyID0gOTcyOSwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LkxJTkVBUlxuXHRNaXBNYXAgPSA5OTg3LCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuTElORUFSX01JUE1BUF9MSU5FQVJcblx0TWlwTWFwTmVhcmVzdE5lYXJlc3QgPSA5OTg0LCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuTkVBUkVTVF9NSVBNQVBfTkVBUkVTVFxuXHRNaXBNYXBMaW5lYXJOZWFyZXN0ID0gOTk4NSwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LkxJTkVBUl9NSVBNQVBfTkVBUkVTVFxuXHRNaXBNYXBOZWFyZXN0TGluZWFyID0gOTk4NiwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0Lk5FQVJFU1RfTUlQTUFQX0xJTkVBUlxuXHRNaXBNYXBMaW5lYXJMaW5lYXIgPSA5OTg3IC8vIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5MSU5FQVJfTUlQTUFQX0xJTkVBUlxufVxuXG5leHBvcnQgZW51bSBUZXh0dXJlV3JhcCB7XG5cdE1pcnJvcmVkUmVwZWF0ID0gMzM2NDgsIC8vIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5NSVJST1JFRF9SRVBFQVRcblx0Q2xhbXBUb0VkZ2UgPSAzMzA3MSwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LkNMQU1QX1RPX0VER0Vcblx0UmVwZWF0ID0gMTA0OTcgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LlJFUEVBVFxufVxuXG5leHBvcnQgY2xhc3MgVGV4dHVyZVJlZ2lvbiB7XG5cdHRleHR1cmU6IGFueTtcblx0dSA9IDA7IHYgPSAwO1xuXHR1MiA9IDA7IHYyID0gMDtcblx0d2lkdGggPSAwOyBoZWlnaHQgPSAwO1xuXHRkZWdyZWVzID0gMDtcblx0b2Zmc2V0WCA9IDA7IG9mZnNldFkgPSAwO1xuXHRvcmlnaW5hbFdpZHRoID0gMDsgb3JpZ2luYWxIZWlnaHQgPSAwO1xufVxuXG5leHBvcnQgY2xhc3MgRmFrZVRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblx0c2V0RmlsdGVycyAobWluRmlsdGVyOiBUZXh0dXJlRmlsdGVyLCBtYWdGaWx0ZXI6IFRleHR1cmVGaWx0ZXIpIHsgfVxuXHRzZXRXcmFwcyAodVdyYXA6IFRleHR1cmVXcmFwLCB2V3JhcDogVGV4dHVyZVdyYXApIHsgfVxuXHRkaXNwb3NlICgpIHsgfVxufVxuIl19", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { TextureFilter, TextureWrap, TextureRegion } from \"./Texture.js\";\nimport { Utils } from \"./Utils.js\";\nexport class TextureAtlas {\n    pages = new Array();\n    regions = new Array();\n    constructor(atlasText) {\n        let reader = new TextureAtlasReader(atlasText);\n        let entry = new Array(4);\n        let pageFields = {};\n        pageFields[\"size\"] = (page) => {\n            page.width = parseInt(entry[1]);\n            page.height = parseInt(entry[2]);\n        };\n        pageFields[\"format\"] = () => {\n            // page.format = Format[tuple[0]]; we don't need format in WebGL\n        };\n        pageFields[\"filter\"] = (page) => {\n            page.minFilter = Utils.enumValue(TextureFilter, entry[1]);\n            page.magFilter = Utils.enumValue(TextureFilter, entry[2]);\n        };\n        pageFields[\"repeat\"] = (page) => {\n            if (entry[1].indexOf('x') != -1)\n                page.uWrap = TextureWrap.Repeat;\n            if (entry[1].indexOf('y') != -1)\n                page.vWrap = TextureWrap.Repeat;\n        };\n        pageFields[\"pma\"] = (page) => {\n            page.pma = entry[1] == \"true\";\n        };\n        var regionFields = {};\n        regionFields[\"xy\"] = (region) => {\n            region.x = parseInt(entry[1]);\n            region.y = parseInt(entry[2]);\n        };\n        regionFields[\"size\"] = (region) => {\n            region.width = parseInt(entry[1]);\n            region.height = parseInt(entry[2]);\n        };\n        regionFields[\"bounds\"] = (region) => {\n            region.x = parseInt(entry[1]);\n            region.y = parseInt(entry[2]);\n            region.width = parseInt(entry[3]);\n            region.height = parseInt(entry[4]);\n        };\n        regionFields[\"offset\"] = (region) => {\n            region.offsetX = parseInt(entry[1]);\n            region.offsetY = parseInt(entry[2]);\n        };\n        regionFields[\"orig\"] = (region) => {\n            region.originalWidth = parseInt(entry[1]);\n            region.originalHeight = parseInt(entry[2]);\n        };\n        regionFields[\"offsets\"] = (region) => {\n            region.offsetX = parseInt(entry[1]);\n            region.offsetY = parseInt(entry[2]);\n            region.originalWidth = parseInt(entry[3]);\n            region.originalHeight = parseInt(entry[4]);\n        };\n        regionFields[\"rotate\"] = (region) => {\n            let value = entry[1];\n            if (value == \"true\")\n                region.degrees = 90;\n            else if (value != \"false\")\n                region.degrees = parseInt(value);\n        };\n        regionFields[\"index\"] = (region) => {\n            region.index = parseInt(entry[1]);\n        };\n        let line = reader.readLine();\n        // Ignore empty lines before first entry.\n        while (line && line.trim().length == 0)\n            line = reader.readLine();\n        // Header entries.\n        while (true) {\n            if (!line || line.trim().length == 0)\n                break;\n            if (reader.readEntry(entry, line) == 0)\n                break; // Silently ignore all header fields.\n            line = reader.readLine();\n        }\n        // Page and region entries.\n        let page = null;\n        let names = null;\n        let values = null;\n        while (true) {\n            if (line === null)\n                break;\n            if (line.trim().length == 0) {\n                page = null;\n                line = reader.readLine();\n            }\n            else if (!page) {\n                page = new TextureAtlasPage(line.trim());\n                while (true) {\n                    if (reader.readEntry(entry, line = reader.readLine()) == 0)\n                        break;\n                    let field = pageFields[entry[0]];\n                    if (field)\n                        field(page);\n                }\n                this.pages.push(page);\n            }\n            else {\n                let region = new TextureAtlasRegion(page, line);\n                while (true) {\n                    let count = reader.readEntry(entry, line = reader.readLine());\n                    if (count == 0)\n                        break;\n                    let field = regionFields[entry[0]];\n                    if (field)\n                        field(region);\n                    else {\n                        if (!names)\n                            names = [];\n                        if (!values)\n                            values = [];\n                        names.push(entry[0]);\n                        let entryValues = [];\n                        for (let i = 0; i < count; i++)\n                            entryValues.push(parseInt(entry[i + 1]));\n                        values.push(entryValues);\n                    }\n                }\n                if (region.originalWidth == 0 && region.originalHeight == 0) {\n                    region.originalWidth = region.width;\n                    region.originalHeight = region.height;\n                }\n                if (names && names.length > 0 && values && values.length > 0) {\n                    region.names = names;\n                    region.values = values;\n                    names = null;\n                    values = null;\n                }\n                region.u = region.x / page.width;\n                region.v = region.y / page.height;\n                if (region.degrees == 90) {\n                    region.u2 = (region.x + region.height) / page.width;\n                    region.v2 = (region.y + region.width) / page.height;\n                }\n                else {\n                    region.u2 = (region.x + region.width) / page.width;\n                    region.v2 = (region.y + region.height) / page.height;\n                }\n                this.regions.push(region);\n            }\n        }\n    }\n    findRegion(name) {\n        for (let i = 0; i < this.regions.length; i++) {\n            if (this.regions[i].name == name) {\n                return this.regions[i];\n            }\n        }\n        return null;\n    }\n    setTextures(assetManager, pathPrefix = \"\") {\n        for (let page of this.pages)\n            page.setTexture(assetManager.get(pathPrefix + page.name));\n    }\n    dispose() {\n        for (let i = 0; i < this.pages.length; i++) {\n            this.pages[i].texture?.dispose();\n        }\n    }\n}\nclass TextureAtlasReader {\n    lines;\n    index = 0;\n    constructor(text) {\n        this.lines = text.split(/\\r\\n|\\r|\\n/);\n    }\n    readLine() {\n        if (this.index >= this.lines.length)\n            return null;\n        return this.lines[this.index++];\n    }\n    readEntry(entry, line) {\n        if (!line)\n            return 0;\n        line = line.trim();\n        if (line.length == 0)\n            return 0;\n        let colon = line.indexOf(':');\n        if (colon == -1)\n            return 0;\n        entry[0] = line.substr(0, colon).trim();\n        for (let i = 1, lastMatch = colon + 1;; i++) {\n            let comma = line.indexOf(',', lastMatch);\n            if (comma == -1) {\n                entry[i] = line.substr(lastMatch).trim();\n                return i;\n            }\n            entry[i] = line.substr(lastMatch, comma - lastMatch).trim();\n            lastMatch = comma + 1;\n            if (i == 4)\n                return 4;\n        }\n    }\n}\nexport class TextureAtlasPage {\n    name;\n    minFilter = TextureFilter.Nearest;\n    magFilter = TextureFilter.Nearest;\n    uWrap = TextureWrap.ClampToEdge;\n    vWrap = TextureWrap.ClampToEdge;\n    texture = null;\n    width = 0;\n    height = 0;\n    pma = false;\n    regions = new Array();\n    constructor(name) {\n        this.name = name;\n    }\n    setTexture(texture) {\n        this.texture = texture;\n        texture.setFilters(this.minFilter, this.magFilter);\n        texture.setWraps(this.uWrap, this.vWrap);\n        for (let region of this.regions)\n            region.texture = texture;\n    }\n}\nexport class TextureAtlasRegion extends TextureRegion {\n    page;\n    name;\n    x = 0;\n    y = 0;\n    offsetX = 0;\n    offsetY = 0;\n    originalWidth = 0;\n    originalHeight = 0;\n    index = 0;\n    degrees = 0;\n    names = null;\n    values = null;\n    constructor(page, name) {\n        super();\n        this.page = page;\n        this.name = name;\n        page.regions.push(this);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { TextureAtlasRegion } from \"../TextureAtlas.js\";\nimport { Color, Utils } from \"../Utils.js\";\nimport { VertexAttachment } from \"./Attachment.js\";\n/** An attachment that displays a textured mesh. A mesh has hull vertices and internal vertices within the hull. Holes are not\n * supported. Each vertex has UVs (texture coordinates) and triangles are used to map an image on to the mesh.\n *\n * See [Mesh attachments](http://esotericsoftware.com/spine-meshes) in the Spine User Guide. */\nexport class MeshAttachment extends VertexAttachment {\n    region = null;\n    /** The name of the texture region for this attachment. */\n    path;\n    /** The UV pair for each vertex, normalized within the texture region. */\n    regionUVs = [];\n    /** The UV pair for each vertex, normalized within the entire texture.\n     *\n     * See {@link #updateUVs}. */\n    uvs = [];\n    /** Triplets of vertex indices which describe the mesh's triangulation. */\n    triangles = [];\n    /** The color to tint the mesh. */\n    color = new Color(1, 1, 1, 1);\n    /** The width of the mesh's image. Available only when nonessential data was exported. */\n    width = 0;\n    /** The height of the mesh's image. Available only when nonessential data was exported. */\n    height = 0;\n    /** The number of entries at the beginning of {@link #vertices} that make up the mesh hull. */\n    hullLength = 0;\n    /** Vertex index pairs describing edges for controling triangulation. Mesh triangles will never cross edges. Only available if\n     * nonessential data was exported. Triangulation is not performed at runtime. */\n    edges = [];\n    parentMesh = null;\n    sequence = null;\n    tempColor = new Color(0, 0, 0, 0);\n    constructor(name, path) {\n        super(name);\n        this.path = path;\n    }\n    /** Calculates {@link #uvs} using the {@link #regionUVs} and region. Must be called if the region, the region's properties, or\n     * the {@link #regionUVs} are changed. */\n    updateRegion() {\n        if (!this.region)\n            throw new Error(\"Region not set.\");\n        let regionUVs = this.regionUVs;\n        if (!this.uvs || this.uvs.length != regionUVs.length)\n            this.uvs = Utils.newFloatArray(regionUVs.length);\n        let uvs = this.uvs;\n        let n = this.uvs.length;\n        let u = this.region.u, v = this.region.v, width = 0, height = 0;\n        if (this.region instanceof TextureAtlasRegion) {\n            let region = this.region, page = region.page;\n            let textureWidth = page.width, textureHeight = page.height;\n            switch (region.degrees) {\n                case 90:\n                    u -= (region.originalHeight - region.offsetY - region.height) / textureWidth;\n                    v -= (region.originalWidth - region.offsetX - region.width) / textureHeight;\n                    width = region.originalHeight / textureWidth;\n                    height = region.originalWidth / textureHeight;\n                    for (let i = 0; i < n; i += 2) {\n                        uvs[i] = u + regionUVs[i + 1] * width;\n                        uvs[i + 1] = v + (1 - regionUVs[i]) * height;\n                    }\n                    return;\n                case 180:\n                    u -= (region.originalWidth - region.offsetX - region.width) / textureWidth;\n                    v -= region.offsetY / textureHeight;\n                    width = region.originalWidth / textureWidth;\n                    height = region.originalHeight / textureHeight;\n                    for (let i = 0; i < n; i += 2) {\n                        uvs[i] = u + (1 - regionUVs[i]) * width;\n                        uvs[i + 1] = v + (1 - regionUVs[i + 1]) * height;\n                    }\n                    return;\n                case 270:\n                    u -= region.offsetY / textureWidth;\n                    v -= region.offsetX / textureHeight;\n                    width = region.originalHeight / textureWidth;\n                    height = region.originalWidth / textureHeight;\n                    for (let i = 0; i < n; i += 2) {\n                        uvs[i] = u + (1 - regionUVs[i + 1]) * width;\n                        uvs[i + 1] = v + regionUVs[i] * height;\n                    }\n                    return;\n            }\n            u -= region.offsetX / textureWidth;\n            v -= (region.originalHeight - region.offsetY - region.height) / textureHeight;\n            width = region.originalWidth / textureWidth;\n            height = region.originalHeight / textureHeight;\n        }\n        else if (!this.region) {\n            u = v = 0;\n            width = height = 1;\n        }\n        else {\n            width = this.region.u2 - u;\n            height = this.region.v2 - v;\n        }\n        for (let i = 0; i < n; i += 2) {\n            uvs[i] = u + regionUVs[i] * width;\n            uvs[i + 1] = v + regionUVs[i + 1] * height;\n        }\n    }\n    /** The parent mesh if this is a linked mesh, else null. A linked mesh shares the {@link #bones}, {@link #vertices},\n     * {@link #regionUVs}, {@link #triangles}, {@link #hullLength}, {@link #edges}, {@link #width}, and {@link #height} with the\n     * parent mesh, but may have a different {@link #name} or {@link #path} (and therefore a different texture). */\n    getParentMesh() {\n        return this.parentMesh;\n    }\n    /** @param parentMesh May be null. */\n    setParentMesh(parentMesh) {\n        this.parentMesh = parentMesh;\n        if (parentMesh) {\n            this.bones = parentMesh.bones;\n            this.vertices = parentMesh.vertices;\n            this.worldVerticesLength = parentMesh.worldVerticesLength;\n            this.regionUVs = parentMesh.regionUVs;\n            this.triangles = parentMesh.triangles;\n            this.hullLength = parentMesh.hullLength;\n            this.worldVerticesLength = parentMesh.worldVerticesLength;\n        }\n    }\n    copy() {\n        if (this.parentMesh)\n            return this.newLinkedMesh();\n        let copy = new MeshAttachment(this.name, this.path);\n        copy.region = this.region;\n        copy.color.setFromColor(this.color);\n        this.copyTo(copy);\n        copy.regionUVs = new Array(this.regionUVs.length);\n        Utils.arrayCopy(this.regionUVs, 0, copy.regionUVs, 0, this.regionUVs.length);\n        copy.uvs = new Array(this.uvs.length);\n        Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, this.uvs.length);\n        copy.triangles = new Array(this.triangles.length);\n        Utils.arrayCopy(this.triangles, 0, copy.triangles, 0, this.triangles.length);\n        copy.hullLength = this.hullLength;\n        copy.sequence = this.sequence != null ? this.sequence.copy() : null;\n        // Nonessential.\n        if (this.edges) {\n            copy.edges = new Array(this.edges.length);\n            Utils.arrayCopy(this.edges, 0, copy.edges, 0, this.edges.length);\n        }\n        copy.width = this.width;\n        copy.height = this.height;\n        return copy;\n    }\n    computeWorldVertices(slot, start, count, worldVertices, offset, stride) {\n        if (this.sequence != null)\n            this.sequence.apply(slot, this);\n        super.computeWorldVertices(slot, start, count, worldVertices, offset, stride);\n    }\n    /** Returns a new mesh with the {@link #parentMesh} set to this mesh's parent mesh, if any, else to this mesh. **/\n    newLinkedMesh() {\n        let copy = new MeshAttachment(this.name, this.path);\n        copy.region = this.region;\n        copy.color.setFromColor(this.color);\n        copy.timelineAttachment = this.timelineAttachment;\n        copy.setParentMesh(this.parentMesh ? this.parentMesh : this);\n        if (copy.region != null)\n            copy.updateRegion();\n        return copy;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color, Utils } from \"../Utils.js\";\nimport { VertexAttachment } from \"./Attachment.js\";\n/** An attachment whose vertices make up a composite Bezier curve.\n *\n * See {@link PathConstraint} and [Paths](http://esotericsoftware.com/spine-paths) in the Spine User Guide. */\nexport class PathAttachment extends VertexAttachment {\n    /** The lengths along the path in the setup pose from the start of the path to the end of each Bezier curve. */\n    lengths = [];\n    /** If true, the start and end knots are connected. */\n    closed = false;\n    /** If true, additional calculations are performed to make calculating positions along the path more accurate. If false, fewer\n     * calculations are performed but calculating positions along the path is less accurate. */\n    constantSpeed = false;\n    /** The color of the path as it was in Spine. Available only when nonessential data was exported. Paths are not usually\n     * rendered at runtime. */\n    color = new Color(1, 1, 1, 1);\n    constructor(name) {\n        super(name);\n    }\n    copy() {\n        let copy = new PathAttachment(this.name);\n        this.copyTo(copy);\n        copy.lengths = new Array(this.lengths.length);\n        Utils.arrayCopy(this.lengths, 0, copy.lengths, 0, this.lengths.length);\n        copy.closed = closed;\n        copy.constantSpeed = this.constantSpeed;\n        copy.color.setFromColor(this.color);\n        return copy;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGF0aEF0dGFjaG1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXR0YWNobWVudHMvUGF0aEF0dGFjaG1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrRUEyQitFO0FBRS9FLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBYyxNQUFNLGlCQUFpQixDQUFDO0FBRS9EOzs4R0FFOEc7QUFDOUcsTUFBTSxPQUFPLGNBQWUsU0FBUSxnQkFBZ0I7SUFFbkQsK0dBQStHO0lBQy9HLE9BQU8sR0FBa0IsRUFBRSxDQUFDO0lBRTVCLHNEQUFzRDtJQUN0RCxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBRWY7K0ZBQzJGO0lBQzNGLGFBQWEsR0FBRyxLQUFLLENBQUM7SUFFdEI7OEJBQzBCO0lBQzFCLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUU5QixZQUFhLElBQVk7UUFDeEIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2IsQ0FBQztJQUVELElBQUk7UUFDSCxJQUFJLElBQUksR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksS0FBSyxDQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUN4QyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBTcGluZSBSdW50aW1lcyBMaWNlbnNlIEFncmVlbWVudFxuICogTGFzdCB1cGRhdGVkIEp1bHkgMjgsIDIwMjMuIFJlcGxhY2VzIGFsbCBwcmlvciB2ZXJzaW9ucy5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAyMywgRXNvdGVyaWMgU29mdHdhcmUgTExDXG4gKlxuICogSW50ZWdyYXRpb24gb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3Igb3RoZXJ3aXNlIGNyZWF0aW5nXG4gKiBkZXJpdmF0aXZlIHdvcmtzIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpcyBwZXJtaXR0ZWQgdW5kZXIgdGhlIHRlcm1zIGFuZFxuICogY29uZGl0aW9ucyBvZiBTZWN0aW9uIDIgb2YgdGhlIFNwaW5lIEVkaXRvciBMaWNlbnNlIEFncmVlbWVudDpcbiAqIGh0dHA6Ly9lc290ZXJpY3NvZnR3YXJlLmNvbS9zcGluZS1lZGl0b3ItbGljZW5zZVxuICpcbiAqIE90aGVyd2lzZSwgaXQgaXMgcGVybWl0dGVkIHRvIGludGVncmF0ZSB0aGUgU3BpbmUgUnVudGltZXMgaW50byBzb2Z0d2FyZSBvclxuICogb3RoZXJ3aXNlIGNyZWF0ZSBkZXJpdmF0aXZlIHdvcmtzIG9mIHRoZSBTcGluZSBSdW50aW1lcyAoY29sbGVjdGl2ZWx5LFxuICogXCJQcm9kdWN0c1wiKSwgcHJvdmlkZWQgdGhhdCBlYWNoIHVzZXIgb2YgdGhlIFByb2R1Y3RzIG11c3Qgb2J0YWluIHRoZWlyIG93blxuICogU3BpbmUgRWRpdG9yIGxpY2Vuc2UgYW5kIHJlZGlzdHJpYnV0aW9uIG9mIHRoZSBQcm9kdWN0cyBpbiBhbnkgZm9ybSBtdXN0XG4gKiBpbmNsdWRlIHRoaXMgbGljZW5zZSBhbmQgY29weXJpZ2h0IG5vdGljZS5cbiAqXG4gKiBUSEUgU1BJTkUgUlVOVElNRVMgQVJFIFBST1ZJREVEIEJZIEVTT1RFUklDIFNPRlRXQVJFIExMQyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgRVNPVEVSSUMgU09GVFdBUkUgTExDIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTLFxuICogQlVTSU5FU1MgSU5URVJSVVBUSU9OLCBPUiBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUykgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRIRVxuICogU1BJTkUgUlVOVElNRVMsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7IENvbG9yLCBVdGlscyB9IGZyb20gXCIuLi9VdGlscy5qc1wiO1xuaW1wb3J0IHsgVmVydGV4QXR0YWNobWVudCwgQXR0YWNobWVudCB9IGZyb20gXCIuL0F0dGFjaG1lbnQuanNcIjtcblxuLyoqIEFuIGF0dGFjaG1lbnQgd2hvc2UgdmVydGljZXMgbWFrZSB1cCBhIGNvbXBvc2l0ZSBCZXppZXIgY3VydmUuXG4gKlxuICogU2VlIHtAbGluayBQYXRoQ29uc3RyYWludH0gYW5kIFtQYXRoc10oaHR0cDovL2Vzb3Rlcmljc29mdHdhcmUuY29tL3NwaW5lLXBhdGhzKSBpbiB0aGUgU3BpbmUgVXNlciBHdWlkZS4gKi9cbmV4cG9ydCBjbGFzcyBQYXRoQXR0YWNobWVudCBleHRlbmRzIFZlcnRleEF0dGFjaG1lbnQge1xuXG5cdC8qKiBUaGUgbGVuZ3RocyBhbG9uZyB0aGUgcGF0aCBpbiB0aGUgc2V0dXAgcG9zZSBmcm9tIHRoZSBzdGFydCBvZiB0aGUgcGF0aCB0byB0aGUgZW5kIG9mIGVhY2ggQmV6aWVyIGN1cnZlLiAqL1xuXHRsZW5ndGhzOiBBcnJheTxudW1iZXI+ID0gW107XG5cblx0LyoqIElmIHRydWUsIHRoZSBzdGFydCBhbmQgZW5kIGtub3RzIGFyZSBjb25uZWN0ZWQuICovXG5cdGNsb3NlZCA9IGZhbHNlO1xuXG5cdC8qKiBJZiB0cnVlLCBhZGRpdGlvbmFsIGNhbGN1bGF0aW9ucyBhcmUgcGVyZm9ybWVkIHRvIG1ha2UgY2FsY3VsYXRpbmcgcG9zaXRpb25zIGFsb25nIHRoZSBwYXRoIG1vcmUgYWNjdXJhdGUuIElmIGZhbHNlLCBmZXdlclxuXHQgKiBjYWxjdWxhdGlvbnMgYXJlIHBlcmZvcm1lZCBidXQgY2FsY3VsYXRpbmcgcG9zaXRpb25zIGFsb25nIHRoZSBwYXRoIGlzIGxlc3MgYWNjdXJhdGUuICovXG5cdGNvbnN0YW50U3BlZWQgPSBmYWxzZTtcblxuXHQvKiogVGhlIGNvbG9yIG9mIHRoZSBwYXRoIGFzIGl0IHdhcyBpbiBTcGluZS4gQXZhaWxhYmxlIG9ubHkgd2hlbiBub25lc3NlbnRpYWwgZGF0YSB3YXMgZXhwb3J0ZWQuIFBhdGhzIGFyZSBub3QgdXN1YWxseVxuXHQgKiByZW5kZXJlZCBhdCBydW50aW1lLiAqL1xuXHRjb2xvciA9IG5ldyBDb2xvcigxLCAxLCAxLCAxKTtcblxuXHRjb25zdHJ1Y3RvciAobmFtZTogc3RyaW5nKSB7XG5cdFx0c3VwZXIobmFtZSk7XG5cdH1cblxuXHRjb3B5ICgpOiBBdHRhY2htZW50IHtcblx0XHRsZXQgY29weSA9IG5ldyBQYXRoQXR0YWNobWVudCh0aGlzLm5hbWUpO1xuXHRcdHRoaXMuY29weVRvKGNvcHkpO1xuXHRcdGNvcHkubGVuZ3RocyA9IG5ldyBBcnJheTxudW1iZXI+KHRoaXMubGVuZ3Rocy5sZW5ndGgpO1xuXHRcdFV0aWxzLmFycmF5Q29weSh0aGlzLmxlbmd0aHMsIDAsIGNvcHkubGVuZ3RocywgMCwgdGhpcy5sZW5ndGhzLmxlbmd0aCk7XG5cdFx0Y29weS5jbG9zZWQgPSBjbG9zZWQ7XG5cdFx0Y29weS5jb25zdGFudFNwZWVkID0gdGhpcy5jb25zdGFudFNwZWVkO1xuXHRcdGNvcHkuY29sb3Iuc2V0RnJvbUNvbG9yKHRoaXMuY29sb3IpO1xuXHRcdHJldHVybiBjb3B5O1xuXHR9XG59XG4iXX0=", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color, MathUtils } from \"../Utils.js\";\nimport { VertexAttachment } from \"./Attachment.js\";\n/** An attachment which is a single point and a rotation. This can be used to spawn projectiles, particles, etc. A bone can be\n * used in similar ways, but a PointAttachment is slightly less expensive to compute and can be hidden, shown, and placed in a\n * skin.\n *\n * See [Point Attachments](http://esotericsoftware.com/spine-point-attachments) in the Spine User Guide. */\nexport class PointAttachment extends VertexAttachment {\n    x = 0;\n    y = 0;\n    rotation = 0;\n    /** The color of the point attachment as it was in Spine. Available only when nonessential data was exported. Point attachments\n     * are not usually rendered at runtime. */\n    color = new Color(0.38, 0.94, 0, 1);\n    constructor(name) {\n        super(name);\n    }\n    computeWorldPosition(bone, point) {\n        point.x = this.x * bone.a + this.y * bone.b + bone.worldX;\n        point.y = this.x * bone.c + this.y * bone.d + bone.worldY;\n        return point;\n    }\n    computeWorldRotation(bone) {\n        const r = this.rotation * MathUtils.degRad, cos = Math.cos(r), sin = Math.sin(r);\n        const x = cos * bone.a + sin * bone.b;\n        const y = cos * bone.c + sin * bone.d;\n        return MathUtils.atan2Deg(y, x);\n    }\n    copy() {\n        let copy = new PointAttachment(this.name);\n        copy.x = this.x;\n        copy.y = this.y;\n        copy.rotation = this.rotation;\n        copy.color.setFromColor(this.color);\n        return copy;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9pbnRBdHRhY2htZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2F0dGFjaG1lbnRzL1BvaW50QXR0YWNobWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytFQTJCK0U7QUFHL0UsT0FBTyxFQUFFLEtBQUssRUFBVyxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEQsT0FBTyxFQUFFLGdCQUFnQixFQUFjLE1BQU0saUJBQWlCLENBQUM7QUFFL0Q7Ozs7MkdBSTJHO0FBQzNHLE1BQU0sT0FBTyxlQUFnQixTQUFRLGdCQUFnQjtJQUNwRCxDQUFDLEdBQVcsQ0FBQyxDQUFDO0lBQ2QsQ0FBQyxHQUFXLENBQUMsQ0FBQztJQUNkLFFBQVEsR0FBVyxDQUFDLENBQUM7SUFFckI7OENBQzBDO0lBQzFDLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVwQyxZQUFhLElBQVk7UUFDeEIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2IsQ0FBQztJQUVELG9CQUFvQixDQUFFLElBQVUsRUFBRSxLQUFjO1FBQy9DLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFELEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELG9CQUFvQixDQUFFLElBQVU7UUFDL0IsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pGLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUk7UUFDSCxJQUFJLElBQUksR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNoQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogU3BpbmUgUnVudGltZXMgTGljZW5zZSBBZ3JlZW1lbnRcbiAqIExhc3QgdXBkYXRlZCBKdWx5IDI4LCAyMDIzLiBSZXBsYWNlcyBhbGwgcHJpb3IgdmVyc2lvbnMuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLTIwMjMsIEVzb3RlcmljIFNvZnR3YXJlIExMQ1xuICpcbiAqIEludGVncmF0aW9uIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpbnRvIHNvZnR3YXJlIG9yIG90aGVyd2lzZSBjcmVhdGluZ1xuICogZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgaXMgcGVybWl0dGVkIHVuZGVyIHRoZSB0ZXJtcyBhbmRcbiAqIGNvbmRpdGlvbnMgb2YgU2VjdGlvbiAyIG9mIHRoZSBTcGluZSBFZGl0b3IgTGljZW5zZSBBZ3JlZW1lbnQ6XG4gKiBodHRwOi8vZXNvdGVyaWNzb2Z0d2FyZS5jb20vc3BpbmUtZWRpdG9yLWxpY2Vuc2VcbiAqXG4gKiBPdGhlcndpc2UsIGl0IGlzIHBlcm1pdHRlZCB0byBpbnRlZ3JhdGUgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3JcbiAqIG90aGVyd2lzZSBjcmVhdGUgZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgKGNvbGxlY3RpdmVseSxcbiAqIFwiUHJvZHVjdHNcIiksIHByb3ZpZGVkIHRoYXQgZWFjaCB1c2VyIG9mIHRoZSBQcm9kdWN0cyBtdXN0IG9idGFpbiB0aGVpciBvd25cbiAqIFNwaW5lIEVkaXRvciBsaWNlbnNlIGFuZCByZWRpc3RyaWJ1dGlvbiBvZiB0aGUgUHJvZHVjdHMgaW4gYW55IGZvcm0gbXVzdFxuICogaW5jbHVkZSB0aGlzIGxpY2Vuc2UgYW5kIGNvcHlyaWdodCBub3RpY2UuXG4gKlxuICogVEhFIFNQSU5FIFJVTlRJTUVTIEFSRSBQUk9WSURFRCBCWSBFU09URVJJQyBTT0ZUV0FSRSBMTEMgXCJBUyBJU1wiIEFORCBBTllcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEVTT1RFUklDIFNPRlRXQVJFIExMQyBCRSBMSUFCTEUgRk9SIEFOWVxuICogRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbiAqIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUyxcbiAqIEJVU0lORVNTIElOVEVSUlVQVElPTiwgT1IgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFMpIEhPV0VWRVIgQ0FVU0VEIEFORFxuICogT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSEVcbiAqIFNQSU5FIFJVTlRJTUVTLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgeyBCb25lIH0gZnJvbSBcIi4uL0JvbmUuanNcIjtcbmltcG9ydCB7IENvbG9yLCBWZWN0b3IyLCBNYXRoVXRpbHMgfSBmcm9tIFwiLi4vVXRpbHMuanNcIjtcbmltcG9ydCB7IFZlcnRleEF0dGFjaG1lbnQsIEF0dGFjaG1lbnQgfSBmcm9tIFwiLi9BdHRhY2htZW50LmpzXCI7XG5cbi8qKiBBbiBhdHRhY2htZW50IHdoaWNoIGlzIGEgc2luZ2xlIHBvaW50IGFuZCBhIHJvdGF0aW9uLiBUaGlzIGNhbiBiZSB1c2VkIHRvIHNwYXduIHByb2plY3RpbGVzLCBwYXJ0aWNsZXMsIGV0Yy4gQSBib25lIGNhbiBiZVxuICogdXNlZCBpbiBzaW1pbGFyIHdheXMsIGJ1dCBhIFBvaW50QXR0YWNobWVudCBpcyBzbGlnaHRseSBsZXNzIGV4cGVuc2l2ZSB0byBjb21wdXRlIGFuZCBjYW4gYmUgaGlkZGVuLCBzaG93biwgYW5kIHBsYWNlZCBpbiBhXG4gKiBza2luLlxuICpcbiAqIFNlZSBbUG9pbnQgQXR0YWNobWVudHNdKGh0dHA6Ly9lc290ZXJpY3NvZnR3YXJlLmNvbS9zcGluZS1wb2ludC1hdHRhY2htZW50cykgaW4gdGhlIFNwaW5lIFVzZXIgR3VpZGUuICovXG5leHBvcnQgY2xhc3MgUG9pbnRBdHRhY2htZW50IGV4dGVuZHMgVmVydGV4QXR0YWNobWVudCB7XG5cdHg6IG51bWJlciA9IDA7XG5cdHk6IG51bWJlciA9IDA7XG5cdHJvdGF0aW9uOiBudW1iZXIgPSAwO1xuXG5cdC8qKiBUaGUgY29sb3Igb2YgdGhlIHBvaW50IGF0dGFjaG1lbnQgYXMgaXQgd2FzIGluIFNwaW5lLiBBdmFpbGFibGUgb25seSB3aGVuIG5vbmVzc2VudGlhbCBkYXRhIHdhcyBleHBvcnRlZC4gUG9pbnQgYXR0YWNobWVudHNcblx0ICogYXJlIG5vdCB1c3VhbGx5IHJlbmRlcmVkIGF0IHJ1bnRpbWUuICovXG5cdGNvbG9yID0gbmV3IENvbG9yKDAuMzgsIDAuOTQsIDAsIDEpO1xuXG5cdGNvbnN0cnVjdG9yIChuYW1lOiBzdHJpbmcpIHtcblx0XHRzdXBlcihuYW1lKTtcblx0fVxuXG5cdGNvbXB1dGVXb3JsZFBvc2l0aW9uIChib25lOiBCb25lLCBwb2ludDogVmVjdG9yMikge1xuXHRcdHBvaW50LnggPSB0aGlzLnggKiBib25lLmEgKyB0aGlzLnkgKiBib25lLmIgKyBib25lLndvcmxkWDtcblx0XHRwb2ludC55ID0gdGhpcy54ICogYm9uZS5jICsgdGhpcy55ICogYm9uZS5kICsgYm9uZS53b3JsZFk7XG5cdFx0cmV0dXJuIHBvaW50O1xuXHR9XG5cblx0Y29tcHV0ZVdvcmxkUm90YXRpb24gKGJvbmU6IEJvbmUpIHtcblx0XHRjb25zdCByID0gdGhpcy5yb3RhdGlvbiAqIE1hdGhVdGlscy5kZWdSYWQsIGNvcyA9IE1hdGguY29zKHIpLCBzaW4gPSBNYXRoLnNpbihyKTtcblx0XHRjb25zdCB4ID0gY29zICogYm9uZS5hICsgc2luICogYm9uZS5iO1xuXHRcdGNvbnN0IHkgPSBjb3MgKiBib25lLmMgKyBzaW4gKiBib25lLmQ7XG5cdFx0cmV0dXJuIE1hdGhVdGlscy5hdGFuMkRlZyh5LCB4KTtcdFx0XG5cdH1cblxuXHRjb3B5ICgpOiBBdHRhY2htZW50IHtcblx0XHRsZXQgY29weSA9IG5ldyBQb2ludEF0dGFjaG1lbnQodGhpcy5uYW1lKTtcblx0XHRjb3B5LnggPSB0aGlzLng7XG5cdFx0Y29weS55ID0gdGhpcy55O1xuXHRcdGNvcHkucm90YXRpb24gPSB0aGlzLnJvdGF0aW9uO1xuXHRcdGNvcHkuY29sb3Iuc2V0RnJvbUNvbG9yKHRoaXMuY29sb3IpO1xuXHRcdHJldHVybiBjb3B5O1xuXHR9XG59XG4iXX0=", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color, MathUtils, Utils } from \"../Utils.js\";\nimport { Attachment } from \"./Attachment.js\";\n/** An attachment that displays a textured quadrilateral.\n *\n * See [Region attachments](http://esotericsoftware.com/spine-regions) in the Spine User Guide. */\nexport class RegionAttachment extends Attachment {\n    /** The local x translation. */\n    x = 0;\n    /** The local y translation. */\n    y = 0;\n    /** The local scaleX. */\n    scaleX = 1;\n    /** The local scaleY. */\n    scaleY = 1;\n    /** The local rotation. */\n    rotation = 0;\n    /** The width of the region attachment in Spine. */\n    width = 0;\n    /** The height of the region attachment in Spine. */\n    height = 0;\n    /** The color to tint the region attachment. */\n    color = new Color(1, 1, 1, 1);\n    /** The name of the texture region for this attachment. */\n    path;\n    region = null;\n    sequence = null;\n    /** For each of the 4 vertices, a pair of <code>x,y</code> values that is the local position of the vertex.\n     *\n     * See {@link #updateOffset()}. */\n    offset = Utils.newFloatArray(8);\n    uvs = Utils.newFloatArray(8);\n    tempColor = new Color(1, 1, 1, 1);\n    constructor(name, path) {\n        super(name);\n        this.path = path;\n    }\n    /** Calculates the {@link #offset} using the region settings. Must be called after changing region settings. */\n    updateRegion() {\n        if (!this.region)\n            throw new Error(\"Region not set.\");\n        let region = this.region;\n        let uvs = this.uvs;\n        if (region == null) {\n            uvs[0] = 0;\n            uvs[1] = 0;\n            uvs[2] = 0;\n            uvs[3] = 1;\n            uvs[4] = 1;\n            uvs[5] = 1;\n            uvs[6] = 1;\n            uvs[7] = 0;\n            return;\n        }\n        let regionScaleX = this.width / this.region.originalWidth * this.scaleX;\n        let regionScaleY = this.height / this.region.originalHeight * this.scaleY;\n        let localX = -this.width / 2 * this.scaleX + this.region.offsetX * regionScaleX;\n        let localY = -this.height / 2 * this.scaleY + this.region.offsetY * regionScaleY;\n        let localX2 = localX + this.region.width * regionScaleX;\n        let localY2 = localY + this.region.height * regionScaleY;\n        let radians = this.rotation * MathUtils.degRad;\n        let cos = Math.cos(radians);\n        let sin = Math.sin(radians);\n        let x = this.x, y = this.y;\n        let localXCos = localX * cos + x;\n        let localXSin = localX * sin;\n        let localYCos = localY * cos + y;\n        let localYSin = localY * sin;\n        let localX2Cos = localX2 * cos + x;\n        let localX2Sin = localX2 * sin;\n        let localY2Cos = localY2 * cos + y;\n        let localY2Sin = localY2 * sin;\n        let offset = this.offset;\n        offset[0] = localXCos - localYSin;\n        offset[1] = localYCos + localXSin;\n        offset[2] = localXCos - localY2Sin;\n        offset[3] = localY2Cos + localXSin;\n        offset[4] = localX2Cos - localY2Sin;\n        offset[5] = localY2Cos + localX2Sin;\n        offset[6] = localX2Cos - localYSin;\n        offset[7] = localYCos + localX2Sin;\n        if (region.degrees == 90) {\n            uvs[0] = region.u2;\n            uvs[1] = region.v2;\n            uvs[2] = region.u;\n            uvs[3] = region.v2;\n            uvs[4] = region.u;\n            uvs[5] = region.v;\n            uvs[6] = region.u2;\n            uvs[7] = region.v;\n        }\n        else {\n            uvs[0] = region.u;\n            uvs[1] = region.v2;\n            uvs[2] = region.u;\n            uvs[3] = region.v;\n            uvs[4] = region.u2;\n            uvs[5] = region.v;\n            uvs[6] = region.u2;\n            uvs[7] = region.v2;\n        }\n    }\n    /** Transforms the attachment's four vertices to world coordinates. If the attachment has a {@link #sequence}, the region may\n     * be changed.\n     * <p>\n     * See <a href=\"http://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\n     * Runtimes Guide.\n     * @param worldVertices The output world vertices. Must have a length >= <code>offset</code> + 8.\n     * @param offset The <code>worldVertices</code> index to begin writing values.\n     * @param stride The number of <code>worldVertices</code> entries between the value pairs written. */\n    computeWorldVertices(slot, worldVertices, offset, stride) {\n        if (this.sequence != null)\n            this.sequence.apply(slot, this);\n        let bone = slot.bone;\n        let vertexOffset = this.offset;\n        let x = bone.worldX, y = bone.worldY;\n        let a = bone.a, b = bone.b, c = bone.c, d = bone.d;\n        let offsetX = 0, offsetY = 0;\n        offsetX = vertexOffset[0];\n        offsetY = vertexOffset[1];\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // br\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n        offset += stride;\n        offsetX = vertexOffset[2];\n        offsetY = vertexOffset[3];\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // bl\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n        offset += stride;\n        offsetX = vertexOffset[4];\n        offsetY = vertexOffset[5];\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // ul\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n        offset += stride;\n        offsetX = vertexOffset[6];\n        offsetY = vertexOffset[7];\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // ur\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n    }\n    copy() {\n        let copy = new RegionAttachment(this.name, this.path);\n        copy.region = this.region;\n        copy.x = this.x;\n        copy.y = this.y;\n        copy.scaleX = this.scaleX;\n        copy.scaleY = this.scaleY;\n        copy.rotation = this.rotation;\n        copy.width = this.width;\n        copy.height = this.height;\n        Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, 8);\n        Utils.arrayCopy(this.offset, 0, copy.offset, 0, 8);\n        copy.color.setFromColor(this.color);\n        copy.sequence = this.sequence != null ? this.sequence.copy() : null;\n        return copy;\n    }\n    static X1 = 0;\n    static Y1 = 1;\n    static C1R = 2;\n    static C1G = 3;\n    static C1B = 4;\n    static C1A = 5;\n    static U1 = 6;\n    static V1 = 7;\n    static X2 = 8;\n    static Y2 = 9;\n    static C2R = 10;\n    static C2G = 11;\n    static C2B = 12;\n    static C2A = 13;\n    static U2 = 14;\n    static V2 = 15;\n    static X3 = 16;\n    static Y3 = 17;\n    static C3R = 18;\n    static C3G = 19;\n    static C3B = 20;\n    static C3A = 21;\n    static U3 = 22;\n    static V3 = 23;\n    static X4 = 24;\n    static Y4 = 25;\n    static C4R = 26;\n    static C4G = 27;\n    static C4B = 28;\n    static C4A = 29;\n    static U4 = 30;\n    static V4 = 31;\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { BoundingBoxAttachment } from \"./attachments/BoundingBoxAttachment.js\";\nimport { ClippingAttachment } from \"./attachments/ClippingAttachment.js\";\nimport { MeshAttachment } from \"./attachments/MeshAttachment.js\";\nimport { PathAttachment } from \"./attachments/PathAttachment.js\";\nimport { PointAttachment } from \"./attachments/PointAttachment.js\";\nimport { RegionAttachment } from \"./attachments/RegionAttachment.js\";\n/** An {@link AttachmentLoader} that configures attachments using texture regions from an {@link TextureAtlas}.\n *\n * See [Loading skeleton data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the\n * Spine Runtimes Guide. */\nexport class AtlasAttachmentLoader {\n    atlas;\n    constructor(atlas) {\n        this.atlas = atlas;\n    }\n    loadSequence(name, basePath, sequence) {\n        let regions = sequence.regions;\n        for (let i = 0, n = regions.length; i < n; i++) {\n            let path = sequence.getPath(basePath, i);\n            let region = this.atlas.findRegion(path);\n            if (region == null)\n                throw new Error(\"Region not found in atlas: \" + path + \" (sequence: \" + name + \")\");\n            regions[i] = region;\n        }\n    }\n    newRegionAttachment(skin, name, path, sequence) {\n        let attachment = new RegionAttachment(name, path);\n        if (sequence != null) {\n            this.loadSequence(name, path, sequence);\n        }\n        else {\n            let region = this.atlas.findRegion(path);\n            if (!region)\n                throw new Error(\"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\");\n            attachment.region = region;\n        }\n        return attachment;\n    }\n    newMeshAttachment(skin, name, path, sequence) {\n        let attachment = new MeshAttachment(name, path);\n        if (sequence != null) {\n            this.loadSequence(name, path, sequence);\n        }\n        else {\n            let region = this.atlas.findRegion(path);\n            if (!region)\n                throw new Error(\"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\");\n            attachment.region = region;\n        }\n        return attachment;\n    }\n    newBoundingBoxAttachment(skin, name) {\n        return new BoundingBoxAttachment(name);\n    }\n    newPathAttachment(skin, name) {\n        return new PathAttachment(name);\n    }\n    newPointAttachment(skin, name) {\n        return new PointAttachment(name);\n    }\n    newClippingAttachment(skin, name) {\n        return new ClippingAttachment(name);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color } from \"./Utils.js\";\n/** Stores the setup pose for a {@link Bone}. */\nexport class BoneData {\n    /** The index of the bone in {@link Skeleton#getBones()}. */\n    index = 0;\n    /** The name of the bone, which is unique across all bones in the skeleton. */\n    name;\n    /** @returns May be null. */\n    parent = null;\n    /** The bone's length. */\n    length = 0;\n    /** The local x translation. */\n    x = 0;\n    /** The local y translation. */\n    y = 0;\n    /** The local rotation in degrees, counter clockwise. */\n    rotation = 0;\n    /** The local scaleX. */\n    scaleX = 1;\n    /** The local scaleY. */\n    scaleY = 1;\n    /** The local shearX. */\n    shearX = 0;\n    /** The local shearX. */\n    shearY = 0;\n    /** The transform mode for how parent world transforms affect this bone. */\n    inherit = Inherit.Normal;\n    /** When true, {@link Skeleton#updateWorldTransform()} only updates this bone if the {@link Skeleton#skin} contains this\n      * bone.\n      * @see Skin#bones */\n    skinRequired = false;\n    /** The color of the bone as it was in Spine. Available only when nonessential data was exported. Bones are not usually\n     * rendered at runtime. */\n    color = new Color();\n    /** The bone icon as it was in Spine, or null if nonessential data was not exported. */\n    icon;\n    /** False if the bone was hidden in Spine and nonessential data was exported. Does not affect runtime rendering. */\n    visible = false;\n    constructor(index, name, parent) {\n        if (index < 0)\n            throw new Error(\"index must be >= 0.\");\n        if (!name)\n            throw new Error(\"name cannot be null.\");\n        this.index = index;\n        this.name = name;\n        this.parent = parent;\n    }\n}\n/** Determines how a bone inherits world transforms from parent bones. */\nexport var Inherit;\n(function (Inherit) {\n    Inherit[Inherit[\"Normal\"] = 0] = \"Normal\";\n    Inherit[Inherit[\"OnlyTranslation\"] = 1] = \"OnlyTranslation\";\n    Inherit[Inherit[\"NoRotationOrReflection\"] = 2] = \"NoRotationOrReflection\";\n    Inherit[Inherit[\"NoScale\"] = 3] = \"NoScale\";\n    Inherit[Inherit[\"NoScaleOrReflection\"] = 4] = \"NoScaleOrReflection\";\n})(Inherit || (Inherit = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm9uZURhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvQm9uZURhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrRUEyQitFO0FBRS9FLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFbkMsZ0RBQWdEO0FBQ2hELE1BQU0sT0FBTyxRQUFRO0lBQ3BCLDREQUE0RDtJQUM1RCxLQUFLLEdBQVcsQ0FBQyxDQUFDO0lBRWxCLDhFQUE4RTtJQUM5RSxJQUFJLENBQVM7SUFFYiw0QkFBNEI7SUFDNUIsTUFBTSxHQUFvQixJQUFJLENBQUM7SUFFL0IseUJBQXlCO0lBQ3pCLE1BQU0sR0FBVyxDQUFDLENBQUM7SUFFbkIsK0JBQStCO0lBQy9CLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFTiwrQkFBK0I7SUFDL0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVOLHdEQUF3RDtJQUN4RCxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBRWIsd0JBQXdCO0lBQ3hCLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFFWCx3QkFBd0I7SUFDeEIsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUVYLHdCQUF3QjtJQUN4QixNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRVgsd0JBQXdCO0lBQ3hCLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFFWCwyRUFBMkU7SUFDM0UsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFFekI7OzBCQUVzQjtJQUN0QixZQUFZLEdBQUcsS0FBSyxDQUFDO0lBRXJCOzhCQUMwQjtJQUMxQixLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUVwQix1RkFBdUY7SUFDdkYsSUFBSSxDQUFVO0lBRWQsbUhBQW1IO0lBQ25ILE9BQU8sR0FBRyxLQUFLLENBQUM7SUFFaEIsWUFBYSxLQUFhLEVBQUUsSUFBWSxFQUFFLE1BQXVCO1FBQ2hFLElBQUksS0FBSyxHQUFHLENBQUM7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLElBQUk7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdEIsQ0FBQztDQUNEO0FBRUQseUVBQXlFO0FBQ3pFLE1BQU0sQ0FBTixJQUFZLE9BQXlGO0FBQXJHLFdBQVksT0FBTztJQUFHLHlDQUFNLENBQUE7SUFBRSwyREFBZSxDQUFBO0lBQUUseUVBQXNCLENBQUE7SUFBRSwyQ0FBTyxDQUFBO0lBQUUsbUVBQW1CLENBQUE7QUFBQyxDQUFDLEVBQXpGLE9BQU8sS0FBUCxPQUFPLFFBQWtGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogU3BpbmUgUnVudGltZXMgTGljZW5zZSBBZ3JlZW1lbnRcbiAqIExhc3QgdXBkYXRlZCBKdWx5IDI4LCAyMDIzLiBSZXBsYWNlcyBhbGwgcHJpb3IgdmVyc2lvbnMuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLTIwMjMsIEVzb3RlcmljIFNvZnR3YXJlIExMQ1xuICpcbiAqIEludGVncmF0aW9uIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpbnRvIHNvZnR3YXJlIG9yIG90aGVyd2lzZSBjcmVhdGluZ1xuICogZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgaXMgcGVybWl0dGVkIHVuZGVyIHRoZSB0ZXJtcyBhbmRcbiAqIGNvbmRpdGlvbnMgb2YgU2VjdGlvbiAyIG9mIHRoZSBTcGluZSBFZGl0b3IgTGljZW5zZSBBZ3JlZW1lbnQ6XG4gKiBodHRwOi8vZXNvdGVyaWNzb2Z0d2FyZS5jb20vc3BpbmUtZWRpdG9yLWxpY2Vuc2VcbiAqXG4gKiBPdGhlcndpc2UsIGl0IGlzIHBlcm1pdHRlZCB0byBpbnRlZ3JhdGUgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3JcbiAqIG90aGVyd2lzZSBjcmVhdGUgZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgKGNvbGxlY3RpdmVseSxcbiAqIFwiUHJvZHVjdHNcIiksIHByb3ZpZGVkIHRoYXQgZWFjaCB1c2VyIG9mIHRoZSBQcm9kdWN0cyBtdXN0IG9idGFpbiB0aGVpciBvd25cbiAqIFNwaW5lIEVkaXRvciBsaWNlbnNlIGFuZCByZWRpc3RyaWJ1dGlvbiBvZiB0aGUgUHJvZHVjdHMgaW4gYW55IGZvcm0gbXVzdFxuICogaW5jbHVkZSB0aGlzIGxpY2Vuc2UgYW5kIGNvcHlyaWdodCBub3RpY2UuXG4gKlxuICogVEhFIFNQSU5FIFJVTlRJTUVTIEFSRSBQUk9WSURFRCBCWSBFU09URVJJQyBTT0ZUV0FSRSBMTEMgXCJBUyBJU1wiIEFORCBBTllcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEVTT1RFUklDIFNPRlRXQVJFIExMQyBCRSBMSUFCTEUgRk9SIEFOWVxuICogRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbiAqIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUyxcbiAqIEJVU0lORVNTIElOVEVSUlVQVElPTiwgT1IgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFMpIEhPV0VWRVIgQ0FVU0VEIEFORFxuICogT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSEVcbiAqIFNQSU5FIFJVTlRJTUVTLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gXCIuL1V0aWxzLmpzXCI7XG5cbi8qKiBTdG9yZXMgdGhlIHNldHVwIHBvc2UgZm9yIGEge0BsaW5rIEJvbmV9LiAqL1xuZXhwb3J0IGNsYXNzIEJvbmVEYXRhIHtcblx0LyoqIFRoZSBpbmRleCBvZiB0aGUgYm9uZSBpbiB7QGxpbmsgU2tlbGV0b24jZ2V0Qm9uZXMoKX0uICovXG5cdGluZGV4OiBudW1iZXIgPSAwO1xuXG5cdC8qKiBUaGUgbmFtZSBvZiB0aGUgYm9uZSwgd2hpY2ggaXMgdW5pcXVlIGFjcm9zcyBhbGwgYm9uZXMgaW4gdGhlIHNrZWxldG9uLiAqL1xuXHRuYW1lOiBzdHJpbmc7XG5cblx0LyoqIEByZXR1cm5zIE1heSBiZSBudWxsLiAqL1xuXHRwYXJlbnQ6IEJvbmVEYXRhIHwgbnVsbCA9IG51bGw7XG5cblx0LyoqIFRoZSBib25lJ3MgbGVuZ3RoLiAqL1xuXHRsZW5ndGg6IG51bWJlciA9IDA7XG5cblx0LyoqIFRoZSBsb2NhbCB4IHRyYW5zbGF0aW9uLiAqL1xuXHR4ID0gMDtcblxuXHQvKiogVGhlIGxvY2FsIHkgdHJhbnNsYXRpb24uICovXG5cdHkgPSAwO1xuXG5cdC8qKiBUaGUgbG9jYWwgcm90YXRpb24gaW4gZGVncmVlcywgY291bnRlciBjbG9ja3dpc2UuICovXG5cdHJvdGF0aW9uID0gMDtcblxuXHQvKiogVGhlIGxvY2FsIHNjYWxlWC4gKi9cblx0c2NhbGVYID0gMTtcblxuXHQvKiogVGhlIGxvY2FsIHNjYWxlWS4gKi9cblx0c2NhbGVZID0gMTtcblxuXHQvKiogVGhlIGxvY2FsIHNoZWFyWC4gKi9cblx0c2hlYXJYID0gMDtcblxuXHQvKiogVGhlIGxvY2FsIHNoZWFyWC4gKi9cblx0c2hlYXJZID0gMDtcblxuXHQvKiogVGhlIHRyYW5zZm9ybSBtb2RlIGZvciBob3cgcGFyZW50IHdvcmxkIHRyYW5zZm9ybXMgYWZmZWN0IHRoaXMgYm9uZS4gKi9cblx0aW5oZXJpdCA9IEluaGVyaXQuTm9ybWFsO1xuXG5cdC8qKiBXaGVuIHRydWUsIHtAbGluayBTa2VsZXRvbiN1cGRhdGVXb3JsZFRyYW5zZm9ybSgpfSBvbmx5IHVwZGF0ZXMgdGhpcyBib25lIGlmIHRoZSB7QGxpbmsgU2tlbGV0b24jc2tpbn0gY29udGFpbnMgdGhpc1xuXHQgICogYm9uZS5cblx0ICAqIEBzZWUgU2tpbiNib25lcyAqL1xuXHRza2luUmVxdWlyZWQgPSBmYWxzZTtcblxuXHQvKiogVGhlIGNvbG9yIG9mIHRoZSBib25lIGFzIGl0IHdhcyBpbiBTcGluZS4gQXZhaWxhYmxlIG9ubHkgd2hlbiBub25lc3NlbnRpYWwgZGF0YSB3YXMgZXhwb3J0ZWQuIEJvbmVzIGFyZSBub3QgdXN1YWxseVxuXHQgKiByZW5kZXJlZCBhdCBydW50aW1lLiAqL1xuXHRjb2xvciA9IG5ldyBDb2xvcigpO1xuXG5cdC8qKiBUaGUgYm9uZSBpY29uIGFzIGl0IHdhcyBpbiBTcGluZSwgb3IgbnVsbCBpZiBub25lc3NlbnRpYWwgZGF0YSB3YXMgbm90IGV4cG9ydGVkLiAqL1xuXHRpY29uPzogc3RyaW5nO1xuXG5cdC8qKiBGYWxzZSBpZiB0aGUgYm9uZSB3YXMgaGlkZGVuIGluIFNwaW5lIGFuZCBub25lc3NlbnRpYWwgZGF0YSB3YXMgZXhwb3J0ZWQuIERvZXMgbm90IGFmZmVjdCBydW50aW1lIHJlbmRlcmluZy4gKi9cblx0dmlzaWJsZSA9IGZhbHNlO1xuXG5cdGNvbnN0cnVjdG9yIChpbmRleDogbnVtYmVyLCBuYW1lOiBzdHJpbmcsIHBhcmVudDogQm9uZURhdGEgfCBudWxsKSB7XG5cdFx0aWYgKGluZGV4IDwgMCkgdGhyb3cgbmV3IEVycm9yKFwiaW5kZXggbXVzdCBiZSA+PSAwLlwiKTtcblx0XHRpZiAoIW5hbWUpIHRocm93IG5ldyBFcnJvcihcIm5hbWUgY2Fubm90IGJlIG51bGwuXCIpO1xuXHRcdHRoaXMuaW5kZXggPSBpbmRleDtcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXHRcdHRoaXMucGFyZW50ID0gcGFyZW50O1xuXHR9XG59XG5cbi8qKiBEZXRlcm1pbmVzIGhvdyBhIGJvbmUgaW5oZXJpdHMgd29ybGQgdHJhbnNmb3JtcyBmcm9tIHBhcmVudCBib25lcy4gKi9cbmV4cG9ydCBlbnVtIEluaGVyaXQgeyBOb3JtYWwsIE9ubHlUcmFuc2xhdGlvbiwgTm9Sb3RhdGlvbk9yUmVmbGVjdGlvbiwgTm9TY2FsZSwgTm9TY2FsZU9yUmVmbGVjdGlvbiB9XG4iXX0=", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Inherit } from \"./BoneData.js\";\nimport { MathUtils } from \"./Utils.js\";\n/** Stores a bone's current pose.\n *\n * A bone has a local transform which is used to compute its world transform. A bone also has an applied transform, which is a\n * local transform that can be applied to compute the world transform. The local transform and applied transform may differ if a\n * constraint or application code modifies the world transform after it was computed from the local transform. */\nexport class Bone {\n    /** The bone's setup pose data. */\n    data;\n    /** The skeleton this bone belongs to. */\n    skeleton;\n    /** The parent bone, or null if this is the root bone. */\n    parent = null;\n    /** The immediate children of this bone. */\n    children = new Array();\n    /** The local x translation. */\n    x = 0;\n    /** The local y translation. */\n    y = 0;\n    /** The local rotation in degrees, counter clockwise. */\n    rotation = 0;\n    /** The local scaleX. */\n    scaleX = 0;\n    /** The local scaleY. */\n    scaleY = 0;\n    /** The local shearX. */\n    shearX = 0;\n    /** The local shearY. */\n    shearY = 0;\n    /** The applied local x translation. */\n    ax = 0;\n    /** The applied local y translation. */\n    ay = 0;\n    /** The applied local rotation in degrees, counter clockwise. */\n    arotation = 0;\n    /** The applied local scaleX. */\n    ascaleX = 0;\n    /** The applied local scaleY. */\n    ascaleY = 0;\n    /** The applied local shearX. */\n    ashearX = 0;\n    /** The applied local shearY. */\n    ashearY = 0;\n    /** Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called. */\n    a = 0;\n    /** Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called. */\n    b = 0;\n    /** Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called. */\n    c = 0;\n    /** Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called. */\n    d = 0;\n    /** The world X position. If changed, {@link #updateAppliedTransform()} should be called. */\n    worldY = 0;\n    /** The world Y position. If changed, {@link #updateAppliedTransform()} should be called. */\n    worldX = 0;\n    inherit = Inherit.Normal;\n    sorted = false;\n    active = false;\n    /** @param parent May be null. */\n    constructor(data, skeleton, parent) {\n        if (!data)\n            throw new Error(\"data cannot be null.\");\n        if (!skeleton)\n            throw new Error(\"skeleton cannot be null.\");\n        this.data = data;\n        this.skeleton = skeleton;\n        this.parent = parent;\n        this.setToSetupPose();\n    }\n    /** Returns false when the bone has not been computed because {@link BoneData#skinRequired} is true and the\n      * {@link Skeleton#skin active skin} does not {@link Skin#bones contain} this bone. */\n    isActive() {\n        return this.active;\n    }\n    /** Computes the world transform using the parent bone and this bone's local applied transform. */\n    update(physics) {\n        this.updateWorldTransformWith(this.ax, this.ay, this.arotation, this.ascaleX, this.ascaleY, this.ashearX, this.ashearY);\n    }\n    /** Computes the world transform using the parent bone and this bone's local transform.\n     *\n     * See {@link #updateWorldTransformWith()}. */\n    updateWorldTransform() {\n        this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\n    }\n    /** Computes the world transform using the parent bone and the specified local transform. The applied transform is set to the\n     * specified local transform. Child bones are not updated.\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide. */\n    updateWorldTransformWith(x, y, rotation, scaleX, scaleY, shearX, shearY) {\n        this.ax = x;\n        this.ay = y;\n        this.arotation = rotation;\n        this.ascaleX = scaleX;\n        this.ascaleY = scaleY;\n        this.ashearX = shearX;\n        this.ashearY = shearY;\n        let parent = this.parent;\n        if (!parent) { // Root bone.\n            let skeleton = this.skeleton;\n            const sx = skeleton.scaleX, sy = skeleton.scaleY;\n            const rx = (rotation + shearX) * MathUtils.degRad;\n            const ry = (rotation + 90 + shearY) * MathUtils.degRad;\n            this.a = Math.cos(rx) * scaleX * sx;\n            this.b = Math.cos(ry) * scaleY * sx;\n            this.c = Math.sin(rx) * scaleX * sy;\n            this.d = Math.sin(ry) * scaleY * sy;\n            this.worldX = x * sx + skeleton.x;\n            this.worldY = y * sy + skeleton.y;\n            return;\n        }\n        let pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;\n        this.worldX = pa * x + pb * y + parent.worldX;\n        this.worldY = pc * x + pd * y + parent.worldY;\n        switch (this.inherit) {\n            case Inherit.Normal: {\n                const rx = (rotation + shearX) * MathUtils.degRad;\n                const ry = (rotation + 90 + shearY) * MathUtils.degRad;\n                const la = Math.cos(rx) * scaleX;\n                const lb = Math.cos(ry) * scaleY;\n                const lc = Math.sin(rx) * scaleX;\n                const ld = Math.sin(ry) * scaleY;\n                this.a = pa * la + pb * lc;\n                this.b = pa * lb + pb * ld;\n                this.c = pc * la + pd * lc;\n                this.d = pc * lb + pd * ld;\n                return;\n            }\n            case Inherit.OnlyTranslation: {\n                const rx = (rotation + shearX) * MathUtils.degRad;\n                const ry = (rotation + 90 + shearY) * MathUtils.degRad;\n                this.a = Math.cos(rx) * scaleX;\n                this.b = Math.cos(ry) * scaleY;\n                this.c = Math.sin(rx) * scaleX;\n                this.d = Math.sin(ry) * scaleY;\n                break;\n            }\n            case Inherit.NoRotationOrReflection: {\n                let sx = 1 / this.skeleton.scaleX, sy = 1 / this.skeleton.scaleY;\n                pa *= sx;\n                pc *= sy;\n                let s = pa * pa + pc * pc;\n                let prx = 0;\n                if (s > 0.0001) {\n                    s = Math.abs(pa * pd * sy - pb * sx * pc) / s;\n                    pb = pc * s;\n                    pd = pa * s;\n                    prx = Math.atan2(pc, pa) * MathUtils.radDeg;\n                }\n                else {\n                    pa = 0;\n                    pc = 0;\n                    prx = 90 - Math.atan2(pd, pb) * MathUtils.radDeg;\n                }\n                const rx = (rotation + shearX - prx) * MathUtils.degRad;\n                const ry = (rotation + shearY - prx + 90) * MathUtils.degRad;\n                const la = Math.cos(rx) * scaleX;\n                const lb = Math.cos(ry) * scaleY;\n                const lc = Math.sin(rx) * scaleX;\n                const ld = Math.sin(ry) * scaleY;\n                this.a = pa * la - pb * lc;\n                this.b = pa * lb - pb * ld;\n                this.c = pc * la + pd * lc;\n                this.d = pc * lb + pd * ld;\n                break;\n            }\n            case Inherit.NoScale:\n            case Inherit.NoScaleOrReflection: {\n                rotation *= MathUtils.degRad;\n                const cos = Math.cos(rotation), sin = Math.sin(rotation);\n                let za = (pa * cos + pb * sin) / this.skeleton.scaleX;\n                let zc = (pc * cos + pd * sin) / this.skeleton.scaleY;\n                let s = Math.sqrt(za * za + zc * zc);\n                if (s > 0.00001)\n                    s = 1 / s;\n                za *= s;\n                zc *= s;\n                s = Math.sqrt(za * za + zc * zc);\n                if (this.inherit == Inherit.NoScale\n                    && (pa * pd - pb * pc < 0) != (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0))\n                    s = -s;\n                rotation = Math.PI / 2 + Math.atan2(zc, za);\n                const zb = Math.cos(rotation) * s;\n                const zd = Math.sin(rotation) * s;\n                shearX *= MathUtils.degRad;\n                shearY = (90 + shearY) * MathUtils.degRad;\n                const la = Math.cos(shearX) * scaleX;\n                const lb = Math.cos(shearY) * scaleY;\n                const lc = Math.sin(shearX) * scaleX;\n                const ld = Math.sin(shearY) * scaleY;\n                this.a = za * la + zb * lc;\n                this.b = za * lb + zb * ld;\n                this.c = zc * la + zd * lc;\n                this.d = zc * lb + zd * ld;\n                break;\n            }\n        }\n        this.a *= this.skeleton.scaleX;\n        this.b *= this.skeleton.scaleX;\n        this.c *= this.skeleton.scaleY;\n        this.d *= this.skeleton.scaleY;\n    }\n    /** Sets this bone's local transform to the setup pose. */\n    setToSetupPose() {\n        let data = this.data;\n        this.x = data.x;\n        this.y = data.y;\n        this.rotation = data.rotation;\n        this.scaleX = data.scaleX;\n        this.scaleY = data.scaleY;\n        this.shearX = data.shearX;\n        this.shearY = data.shearY;\n        this.inherit = data.inherit;\n    }\n    /** Computes the applied transform values from the world transform.\n     *\n     * If the world transform is modified (by a constraint, {@link #rotateWorld(float)}, etc) then this method should be called so\n     * the applied transform matches the world transform. The applied transform may be needed by other code (eg to apply other\n     * constraints).\n     *\n     * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. The applied transform after\n     * calling this method is equivalent to the local transform used to compute the world transform, but may not be identical. */\n    updateAppliedTransform() {\n        let parent = this.parent;\n        if (!parent) {\n            this.ax = this.worldX - this.skeleton.x;\n            this.ay = this.worldY - this.skeleton.y;\n            this.arotation = Math.atan2(this.c, this.a) * MathUtils.radDeg;\n            this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c);\n            this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d);\n            this.ashearX = 0;\n            this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * MathUtils.radDeg;\n            return;\n        }\n        let pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;\n        let pid = 1 / (pa * pd - pb * pc);\n        let ia = pd * pid, ib = pb * pid, ic = pc * pid, id = pa * pid;\n        let dx = this.worldX - parent.worldX, dy = this.worldY - parent.worldY;\n        this.ax = (dx * ia - dy * ib);\n        this.ay = (dy * id - dx * ic);\n        let ra, rb, rc, rd;\n        if (this.inherit == Inherit.OnlyTranslation) {\n            ra = this.a;\n            rb = this.b;\n            rc = this.c;\n            rd = this.d;\n        }\n        else {\n            switch (this.inherit) {\n                case Inherit.NoRotationOrReflection: {\n                    let s = Math.abs(pa * pd - pb * pc) / (pa * pa + pc * pc);\n                    pb = -pc * this.skeleton.scaleX * s / this.skeleton.scaleY;\n                    pd = pa * this.skeleton.scaleY * s / this.skeleton.scaleX;\n                    pid = 1 / (pa * pd - pb * pc);\n                    ia = pd * pid;\n                    ib = pb * pid;\n                    break;\n                }\n                case Inherit.NoScale:\n                case Inherit.NoScaleOrReflection:\n                    let cos = MathUtils.cosDeg(this.rotation), sin = MathUtils.sinDeg(this.rotation);\n                    pa = (pa * cos + pb * sin) / this.skeleton.scaleX;\n                    pc = (pc * cos + pd * sin) / this.skeleton.scaleY;\n                    let s = Math.sqrt(pa * pa + pc * pc);\n                    if (s > 0.00001)\n                        s = 1 / s;\n                    pa *= s;\n                    pc *= s;\n                    s = Math.sqrt(pa * pa + pc * pc);\n                    if (this.inherit == Inherit.NoScale && pid < 0 != (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0))\n                        s = -s;\n                    let r = MathUtils.PI / 2 + Math.atan2(pc, pa);\n                    pb = Math.cos(r) * s;\n                    pd = Math.sin(r) * s;\n                    pid = 1 / (pa * pd - pb * pc);\n                    ia = pd * pid;\n                    ib = pb * pid;\n                    ic = pc * pid;\n                    id = pa * pid;\n            }\n            ra = ia * this.a - ib * this.c;\n            rb = ia * this.b - ib * this.d;\n            rc = id * this.c - ic * this.a;\n            rd = id * this.d - ic * this.b;\n        }\n        this.ashearX = 0;\n        this.ascaleX = Math.sqrt(ra * ra + rc * rc);\n        if (this.ascaleX > 0.0001) {\n            let det = ra * rd - rb * rc;\n            this.ascaleY = det / this.ascaleX;\n            this.ashearY = -Math.atan2(ra * rb + rc * rd, det) * MathUtils.radDeg;\n            this.arotation = Math.atan2(rc, ra) * MathUtils.radDeg;\n        }\n        else {\n            this.ascaleX = 0;\n            this.ascaleY = Math.sqrt(rb * rb + rd * rd);\n            this.ashearY = 0;\n            this.arotation = 90 - Math.atan2(rd, rb) * MathUtils.radDeg;\n        }\n    }\n    /** The world rotation for the X axis, calculated using {@link #a} and {@link #c}. */\n    getWorldRotationX() {\n        return Math.atan2(this.c, this.a) * MathUtils.radDeg;\n    }\n    /** The world rotation for the Y axis, calculated using {@link #b} and {@link #d}. */\n    getWorldRotationY() {\n        return Math.atan2(this.d, this.b) * MathUtils.radDeg;\n    }\n    /** The magnitude (always positive) of the world scale X, calculated using {@link #a} and {@link #c}. */\n    getWorldScaleX() {\n        return Math.sqrt(this.a * this.a + this.c * this.c);\n    }\n    /** The magnitude (always positive) of the world scale Y, calculated using {@link #b} and {@link #d}. */\n    getWorldScaleY() {\n        return Math.sqrt(this.b * this.b + this.d * this.d);\n    }\n    /** Transforms a point from world coordinates to the bone's local coordinates. */\n    worldToLocal(world) {\n        let invDet = 1 / (this.a * this.d - this.b * this.c);\n        let x = world.x - this.worldX, y = world.y - this.worldY;\n        world.x = x * this.d * invDet - y * this.b * invDet;\n        world.y = y * this.a * invDet - x * this.c * invDet;\n        return world;\n    }\n    /** Transforms a point from the bone's local coordinates to world coordinates. */\n    localToWorld(local) {\n        let x = local.x, y = local.y;\n        local.x = x * this.a + y * this.b + this.worldX;\n        local.y = x * this.c + y * this.d + this.worldY;\n        return local;\n    }\n    /** Transforms a point from world coordinates to the parent bone's local coordinates. */\n    worldToParent(world) {\n        if (world == null)\n            throw new Error(\"world cannot be null.\");\n        return this.parent == null ? world : this.parent.worldToLocal(world);\n    }\n    /** Transforms a point from the parent bone's coordinates to world coordinates. */\n    parentToWorld(world) {\n        if (world == null)\n            throw new Error(\"world cannot be null.\");\n        return this.parent == null ? world : this.parent.localToWorld(world);\n    }\n    /** Transforms a world rotation to a local rotation. */\n    worldToLocalRotation(worldRotation) {\n        let sin = MathUtils.sinDeg(worldRotation), cos = MathUtils.cosDeg(worldRotation);\n        return Math.atan2(this.a * sin - this.c * cos, this.d * cos - this.b * sin) * MathUtils.radDeg + this.rotation - this.shearX;\n    }\n    /** Transforms a local rotation to a world rotation. */\n    localToWorldRotation(localRotation) {\n        localRotation -= this.rotation - this.shearX;\n        let sin = MathUtils.sinDeg(localRotation), cos = MathUtils.cosDeg(localRotation);\n        return Math.atan2(cos * this.c + sin * this.d, cos * this.a + sin * this.b) * MathUtils.radDeg;\n    }\n    /** Rotates the world transform the specified amount.\n     * <p>\n     * After changes are made to the world transform, {@link #updateAppliedTransform()} should be called and\n     * {@link #update(Physics)} will need to be called on any child bones, recursively. */\n    rotateWorld(degrees) {\n        degrees *= MathUtils.degRad;\n        const sin = Math.sin(degrees), cos = Math.cos(degrees);\n        const ra = this.a, rb = this.b;\n        this.a = cos * ra - sin * this.c;\n        this.b = cos * rb - sin * this.d;\n        this.c = sin * ra + cos * this.c;\n        this.d = sin * rb + cos * this.d;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n/** The base class for all constraint datas. */\nexport class ConstraintData {\n    name;\n    order;\n    skinRequired;\n    constructor(name, order, skinRequired) {\n        this.name = name;\n        this.order = order;\n        this.skinRequired = skinRequired;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uc3RyYWludERhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvQ29uc3RyYWludERhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrRUEyQitFO0FBRS9FLCtDQUErQztBQUMvQyxNQUFNLE9BQWdCLGNBQWM7SUFDZjtJQUFxQjtJQUFzQjtJQUEvRCxZQUFvQixJQUFZLEVBQVMsS0FBYSxFQUFTLFlBQXFCO1FBQWhFLFNBQUksR0FBSixJQUFJLENBQVE7UUFBUyxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQVMsaUJBQVksR0FBWixZQUFZLENBQVM7SUFBSSxDQUFDO0NBQ3pGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogU3BpbmUgUnVudGltZXMgTGljZW5zZSBBZ3JlZW1lbnRcbiAqIExhc3QgdXBkYXRlZCBKdWx5IDI4LCAyMDIzLiBSZXBsYWNlcyBhbGwgcHJpb3IgdmVyc2lvbnMuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLTIwMjMsIEVzb3RlcmljIFNvZnR3YXJlIExMQ1xuICpcbiAqIEludGVncmF0aW9uIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpbnRvIHNvZnR3YXJlIG9yIG90aGVyd2lzZSBjcmVhdGluZ1xuICogZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgaXMgcGVybWl0dGVkIHVuZGVyIHRoZSB0ZXJtcyBhbmRcbiAqIGNvbmRpdGlvbnMgb2YgU2VjdGlvbiAyIG9mIHRoZSBTcGluZSBFZGl0b3IgTGljZW5zZSBBZ3JlZW1lbnQ6XG4gKiBodHRwOi8vZXNvdGVyaWNzb2Z0d2FyZS5jb20vc3BpbmUtZWRpdG9yLWxpY2Vuc2VcbiAqXG4gKiBPdGhlcndpc2UsIGl0IGlzIHBlcm1pdHRlZCB0byBpbnRlZ3JhdGUgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3JcbiAqIG90aGVyd2lzZSBjcmVhdGUgZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgKGNvbGxlY3RpdmVseSxcbiAqIFwiUHJvZHVjdHNcIiksIHByb3ZpZGVkIHRoYXQgZWFjaCB1c2VyIG9mIHRoZSBQcm9kdWN0cyBtdXN0IG9idGFpbiB0aGVpciBvd25cbiAqIFNwaW5lIEVkaXRvciBsaWNlbnNlIGFuZCByZWRpc3RyaWJ1dGlvbiBvZiB0aGUgUHJvZHVjdHMgaW4gYW55IGZvcm0gbXVzdFxuICogaW5jbHVkZSB0aGlzIGxpY2Vuc2UgYW5kIGNvcHlyaWdodCBub3RpY2UuXG4gKlxuICogVEhFIFNQSU5FIFJVTlRJTUVTIEFSRSBQUk9WSURFRCBCWSBFU09URVJJQyBTT0ZUV0FSRSBMTEMgXCJBUyBJU1wiIEFORCBBTllcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEVTT1RFUklDIFNPRlRXQVJFIExMQyBCRSBMSUFCTEUgRk9SIEFOWVxuICogRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbiAqIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUyxcbiAqIEJVU0lORVNTIElOVEVSUlVQVElPTiwgT1IgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFMpIEhPV0VWRVIgQ0FVU0VEIEFORFxuICogT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSEVcbiAqIFNQSU5FIFJVTlRJTUVTLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKiogVGhlIGJhc2UgY2xhc3MgZm9yIGFsbCBjb25zdHJhaW50IGRhdGFzLiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbnN0cmFpbnREYXRhIHtcblx0Y29uc3RydWN0b3IgKHB1YmxpYyBuYW1lOiBzdHJpbmcsIHB1YmxpYyBvcmRlcjogbnVtYmVyLCBwdWJsaWMgc2tpblJlcXVpcmVkOiBib29sZWFuKSB7IH1cbn1cbiJdfQ==", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n/** Stores the current pose values for an {@link Event}.\n *\n * See Timeline {@link Timeline#apply()},\n * AnimationStateListener {@link AnimationStateListener#event()}, and\n * [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide. */\nexport class Event {\n    data;\n    intValue = 0;\n    floatValue = 0;\n    stringValue = null;\n    time = 0;\n    volume = 0;\n    balance = 0;\n    constructor(time, data) {\n        if (!data)\n            throw new Error(\"data cannot be null.\");\n        this.time = time;\n        this.data = data;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvRXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrRUEyQitFO0FBSS9FOzs7O2lGQUlpRjtBQUNqRixNQUFNLE9BQU8sS0FBSztJQUNqQixJQUFJLENBQVk7SUFDaEIsUUFBUSxHQUFXLENBQUMsQ0FBQztJQUNyQixVQUFVLEdBQVcsQ0FBQyxDQUFDO0lBQ3ZCLFdBQVcsR0FBa0IsSUFBSSxDQUFDO0lBQ2xDLElBQUksR0FBVyxDQUFDLENBQUM7SUFDakIsTUFBTSxHQUFXLENBQUMsQ0FBQztJQUNuQixPQUFPLEdBQVcsQ0FBQyxDQUFDO0lBRXBCLFlBQWEsSUFBWSxFQUFFLElBQWU7UUFDekMsSUFBSSxDQUFDLElBQUk7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbEIsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogU3BpbmUgUnVudGltZXMgTGljZW5zZSBBZ3JlZW1lbnRcbiAqIExhc3QgdXBkYXRlZCBKdWx5IDI4LCAyMDIzLiBSZXBsYWNlcyBhbGwgcHJpb3IgdmVyc2lvbnMuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLTIwMjMsIEVzb3RlcmljIFNvZnR3YXJlIExMQ1xuICpcbiAqIEludGVncmF0aW9uIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpbnRvIHNvZnR3YXJlIG9yIG90aGVyd2lzZSBjcmVhdGluZ1xuICogZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgaXMgcGVybWl0dGVkIHVuZGVyIHRoZSB0ZXJtcyBhbmRcbiAqIGNvbmRpdGlvbnMgb2YgU2VjdGlvbiAyIG9mIHRoZSBTcGluZSBFZGl0b3IgTGljZW5zZSBBZ3JlZW1lbnQ6XG4gKiBodHRwOi8vZXNvdGVyaWNzb2Z0d2FyZS5jb20vc3BpbmUtZWRpdG9yLWxpY2Vuc2VcbiAqXG4gKiBPdGhlcndpc2UsIGl0IGlzIHBlcm1pdHRlZCB0byBpbnRlZ3JhdGUgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3JcbiAqIG90aGVyd2lzZSBjcmVhdGUgZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgKGNvbGxlY3RpdmVseSxcbiAqIFwiUHJvZHVjdHNcIiksIHByb3ZpZGVkIHRoYXQgZWFjaCB1c2VyIG9mIHRoZSBQcm9kdWN0cyBtdXN0IG9idGFpbiB0aGVpciBvd25cbiAqIFNwaW5lIEVkaXRvciBsaWNlbnNlIGFuZCByZWRpc3RyaWJ1dGlvbiBvZiB0aGUgUHJvZHVjdHMgaW4gYW55IGZvcm0gbXVzdFxuICogaW5jbHVkZSB0aGlzIGxpY2Vuc2UgYW5kIGNvcHlyaWdodCBub3RpY2UuXG4gKlxuICogVEhFIFNQSU5FIFJVTlRJTUVTIEFSRSBQUk9WSURFRCBCWSBFU09URVJJQyBTT0ZUV0FSRSBMTEMgXCJBUyBJU1wiIEFORCBBTllcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEVTT1RFUklDIFNPRlRXQVJFIExMQyBCRSBMSUFCTEUgRk9SIEFOWVxuICogRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbiAqIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUyxcbiAqIEJVU0lORVNTIElOVEVSUlVQVElPTiwgT1IgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFMpIEhPV0VWRVIgQ0FVU0VEIEFORFxuICogT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSEVcbiAqIFNQSU5FIFJVTlRJTUVTLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgeyBFdmVudERhdGEgfSBmcm9tIFwiLi9FdmVudERhdGEuanNcIjtcblxuLyoqIFN0b3JlcyB0aGUgY3VycmVudCBwb3NlIHZhbHVlcyBmb3IgYW4ge0BsaW5rIEV2ZW50fS5cbiAqXG4gKiBTZWUgVGltZWxpbmUge0BsaW5rIFRpbWVsaW5lI2FwcGx5KCl9LFxuICogQW5pbWF0aW9uU3RhdGVMaXN0ZW5lciB7QGxpbmsgQW5pbWF0aW9uU3RhdGVMaXN0ZW5lciNldmVudCgpfSwgYW5kXG4gKiBbRXZlbnRzXShodHRwOi8vZXNvdGVyaWNzb2Z0d2FyZS5jb20vc3BpbmUtZXZlbnRzKSBpbiB0aGUgU3BpbmUgVXNlciBHdWlkZS4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudCB7XG5cdGRhdGE6IEV2ZW50RGF0YTtcblx0aW50VmFsdWU6IG51bWJlciA9IDA7XG5cdGZsb2F0VmFsdWU6IG51bWJlciA9IDA7XG5cdHN0cmluZ1ZhbHVlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblx0dGltZTogbnVtYmVyID0gMDtcblx0dm9sdW1lOiBudW1iZXIgPSAwO1xuXHRiYWxhbmNlOiBudW1iZXIgPSAwO1xuXG5cdGNvbnN0cnVjdG9yICh0aW1lOiBudW1iZXIsIGRhdGE6IEV2ZW50RGF0YSkge1xuXHRcdGlmICghZGF0YSkgdGhyb3cgbmV3IEVycm9yKFwiZGF0YSBjYW5ub3QgYmUgbnVsbC5cIik7XG5cdFx0dGhpcy50aW1lID0gdGltZTtcblx0XHR0aGlzLmRhdGEgPSBkYXRhO1xuXHR9XG59XG4iXX0=", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n/** Stores the setup pose values for an {@link Event}.\n *\n * See [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide. */\nexport class EventData {\n    name;\n    intValue = 0;\n    floatValue = 0;\n    stringValue = null;\n    audioPath = null;\n    volume = 0;\n    balance = 0;\n    constructor(name) {\n        this.name = name;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnREYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0V2ZW50RGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytFQTJCK0U7QUFFL0U7O3FGQUVxRjtBQUNyRixNQUFNLE9BQU8sU0FBUztJQUNyQixJQUFJLENBQVM7SUFDYixRQUFRLEdBQVcsQ0FBQyxDQUFDO0lBQ3JCLFVBQVUsR0FBVyxDQUFDLENBQUM7SUFDdkIsV0FBVyxHQUFrQixJQUFJLENBQUM7SUFDbEMsU0FBUyxHQUFrQixJQUFJLENBQUM7SUFDaEMsTUFBTSxHQUFXLENBQUMsQ0FBQztJQUNuQixPQUFPLEdBQVcsQ0FBQyxDQUFDO0lBRXBCLFlBQWEsSUFBWTtRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNsQixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBTcGluZSBSdW50aW1lcyBMaWNlbnNlIEFncmVlbWVudFxuICogTGFzdCB1cGRhdGVkIEp1bHkgMjgsIDIwMjMuIFJlcGxhY2VzIGFsbCBwcmlvciB2ZXJzaW9ucy5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAyMywgRXNvdGVyaWMgU29mdHdhcmUgTExDXG4gKlxuICogSW50ZWdyYXRpb24gb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3Igb3RoZXJ3aXNlIGNyZWF0aW5nXG4gKiBkZXJpdmF0aXZlIHdvcmtzIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpcyBwZXJtaXR0ZWQgdW5kZXIgdGhlIHRlcm1zIGFuZFxuICogY29uZGl0aW9ucyBvZiBTZWN0aW9uIDIgb2YgdGhlIFNwaW5lIEVkaXRvciBMaWNlbnNlIEFncmVlbWVudDpcbiAqIGh0dHA6Ly9lc290ZXJpY3NvZnR3YXJlLmNvbS9zcGluZS1lZGl0b3ItbGljZW5zZVxuICpcbiAqIE90aGVyd2lzZSwgaXQgaXMgcGVybWl0dGVkIHRvIGludGVncmF0ZSB0aGUgU3BpbmUgUnVudGltZXMgaW50byBzb2Z0d2FyZSBvclxuICogb3RoZXJ3aXNlIGNyZWF0ZSBkZXJpdmF0aXZlIHdvcmtzIG9mIHRoZSBTcGluZSBSdW50aW1lcyAoY29sbGVjdGl2ZWx5LFxuICogXCJQcm9kdWN0c1wiKSwgcHJvdmlkZWQgdGhhdCBlYWNoIHVzZXIgb2YgdGhlIFByb2R1Y3RzIG11c3Qgb2J0YWluIHRoZWlyIG93blxuICogU3BpbmUgRWRpdG9yIGxpY2Vuc2UgYW5kIHJlZGlzdHJpYnV0aW9uIG9mIHRoZSBQcm9kdWN0cyBpbiBhbnkgZm9ybSBtdXN0XG4gKiBpbmNsdWRlIHRoaXMgbGljZW5zZSBhbmQgY29weXJpZ2h0IG5vdGljZS5cbiAqXG4gKiBUSEUgU1BJTkUgUlVOVElNRVMgQVJFIFBST1ZJREVEIEJZIEVTT1RFUklDIFNPRlRXQVJFIExMQyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgRVNPVEVSSUMgU09GVFdBUkUgTExDIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTLFxuICogQlVTSU5FU1MgSU5URVJSVVBUSU9OLCBPUiBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUykgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRIRVxuICogU1BJTkUgUlVOVElNRVMsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKiBTdG9yZXMgdGhlIHNldHVwIHBvc2UgdmFsdWVzIGZvciBhbiB7QGxpbmsgRXZlbnR9LlxuICpcbiAqIFNlZSBbRXZlbnRzXShodHRwOi8vZXNvdGVyaWNzb2Z0d2FyZS5jb20vc3BpbmUtZXZlbnRzKSBpbiB0aGUgU3BpbmUgVXNlciBHdWlkZS4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudERhdGEge1xuXHRuYW1lOiBzdHJpbmc7XG5cdGludFZhbHVlOiBudW1iZXIgPSAwO1xuXHRmbG9hdFZhbHVlOiBudW1iZXIgPSAwO1xuXHRzdHJpbmdWYWx1ZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cdGF1ZGlvUGF0aDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cdHZvbHVtZTogbnVtYmVyID0gMDtcblx0YmFsYW5jZTogbnVtYmVyID0gMDtcblxuXHRjb25zdHJ1Y3RvciAobmFtZTogc3RyaW5nKSB7XG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0fVxufVxuIl19", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Inherit } from \"./BoneData.js\";\nimport { MathUtils } from \"./Utils.js\";\n/** Stores the current pose for an IK constraint. An IK constraint adjusts the rotation of 1 or 2 constrained bones so the tip of\n * the last bone is as close to the target bone as possible.\n *\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide. */\nexport class IkConstraint {\n    /** The IK constraint's setup pose data. */\n    data;\n    /** The bones that will be modified by this IK constraint. */\n    bones;\n    /** The bone that is the IK target. */\n    target;\n    /** Controls the bend direction of the IK bones, either 1 or -1. */\n    bendDirection = 0;\n    /** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */\n    compress = false;\n    /** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\n     * and the parent bone has local nonuniform scale, stretch is not applied. */\n    stretch = false;\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */\n    mix = 1;\n    /** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */\n    softness = 0;\n    active = false;\n    constructor(data, skeleton) {\n        if (!data)\n            throw new Error(\"data cannot be null.\");\n        if (!skeleton)\n            throw new Error(\"skeleton cannot be null.\");\n        this.data = data;\n        this.bones = new Array();\n        for (let i = 0; i < data.bones.length; i++) {\n            let bone = skeleton.findBone(data.bones[i].name);\n            if (!bone)\n                throw new Error(`Couldn't find bone ${data.bones[i].name}`);\n            this.bones.push(bone);\n        }\n        let target = skeleton.findBone(data.target.name);\n        if (!target)\n            throw new Error(`Couldn't find bone ${data.target.name}`);\n        this.target = target;\n        this.mix = data.mix;\n        this.softness = data.softness;\n        this.bendDirection = data.bendDirection;\n        this.compress = data.compress;\n        this.stretch = data.stretch;\n    }\n    isActive() {\n        return this.active;\n    }\n    setToSetupPose() {\n        const data = this.data;\n        this.mix = data.mix;\n        this.softness = data.softness;\n        this.bendDirection = data.bendDirection;\n        this.compress = data.compress;\n        this.stretch = data.stretch;\n    }\n    update(physics) {\n        if (this.mix == 0)\n            return;\n        let target = this.target;\n        let bones = this.bones;\n        switch (bones.length) {\n            case 1:\n                this.apply1(bones[0], target.worldX, target.worldY, this.compress, this.stretch, this.data.uniform, this.mix);\n                break;\n            case 2:\n                this.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.stretch, this.data.uniform, this.softness, this.mix);\n                break;\n        }\n    }\n    /** Applies 1 bone IK. The target is specified in the world coordinate system. */\n    apply1(bone, targetX, targetY, compress, stretch, uniform, alpha) {\n        let p = bone.parent;\n        if (!p)\n            throw new Error(\"IK bone must have parent.\");\n        let pa = p.a, pb = p.b, pc = p.c, pd = p.d;\n        let rotationIK = -bone.ashearX - bone.arotation, tx = 0, ty = 0;\n        switch (bone.inherit) {\n            case Inherit.OnlyTranslation:\n                tx = (targetX - bone.worldX) * MathUtils.signum(bone.skeleton.scaleX);\n                ty = (targetY - bone.worldY) * MathUtils.signum(bone.skeleton.scaleY);\n                break;\n            case Inherit.NoRotationOrReflection:\n                let s = Math.abs(pa * pd - pb * pc) / Math.max(0.0001, pa * pa + pc * pc);\n                let sa = pa / bone.skeleton.scaleX;\n                let sc = pc / bone.skeleton.scaleY;\n                pb = -sc * s * bone.skeleton.scaleX;\n                pd = sa * s * bone.skeleton.scaleY;\n                rotationIK += Math.atan2(sc, sa) * MathUtils.radDeg;\n            // Fall through\n            default:\n                let x = targetX - p.worldX, y = targetY - p.worldY;\n                let d = pa * pd - pb * pc;\n                if (Math.abs(d) <= 0.0001) {\n                    tx = 0;\n                    ty = 0;\n                }\n                else {\n                    tx = (x * pd - y * pb) / d - bone.ax;\n                    ty = (y * pa - x * pc) / d - bone.ay;\n                }\n        }\n        rotationIK += Math.atan2(ty, tx) * MathUtils.radDeg;\n        if (bone.ascaleX < 0)\n            rotationIK += 180;\n        if (rotationIK > 180)\n            rotationIK -= 360;\n        else if (rotationIK < -180)\n            rotationIK += 360;\n        let sx = bone.ascaleX, sy = bone.ascaleY;\n        if (compress || stretch) {\n            switch (bone.inherit) {\n                case Inherit.NoScale:\n                case Inherit.NoScaleOrReflection:\n                    tx = targetX - bone.worldX;\n                    ty = targetY - bone.worldY;\n            }\n            const b = bone.data.length * sx;\n            if (b > 0.0001) {\n                const dd = tx * tx + ty * ty;\n                if ((compress && dd < b * b) || (stretch && dd > b * b)) {\n                    const s = (Math.sqrt(dd) / b - 1) * alpha + 1;\n                    sx *= s;\n                    if (uniform)\n                        sy *= s;\n                }\n            }\n        }\n        bone.updateWorldTransformWith(bone.ax, bone.ay, bone.arotation + rotationIK * alpha, sx, sy, bone.ashearX, bone.ashearY);\n    }\n    /** Applies 2 bone IK. The target is specified in the world coordinate system.\n     * @param child A direct descendant of the parent bone. */\n    apply2(parent, child, targetX, targetY, bendDir, stretch, uniform, softness, alpha) {\n        if (parent.inherit != Inherit.Normal || child.inherit != Inherit.Normal)\n            return;\n        let px = parent.ax, py = parent.ay, psx = parent.ascaleX, psy = parent.ascaleY, sx = psx, sy = psy, csx = child.ascaleX;\n        let os1 = 0, os2 = 0, s2 = 0;\n        if (psx < 0) {\n            psx = -psx;\n            os1 = 180;\n            s2 = -1;\n        }\n        else {\n            os1 = 0;\n            s2 = 1;\n        }\n        if (psy < 0) {\n            psy = -psy;\n            s2 = -s2;\n        }\n        if (csx < 0) {\n            csx = -csx;\n            os2 = 180;\n        }\n        else\n            os2 = 0;\n        let cx = child.ax, cy = 0, cwx = 0, cwy = 0, a = parent.a, b = parent.b, c = parent.c, d = parent.d;\n        let u = Math.abs(psx - psy) <= 0.0001;\n        if (!u || stretch) {\n            cy = 0;\n            cwx = a * cx + parent.worldX;\n            cwy = c * cx + parent.worldY;\n        }\n        else {\n            cy = child.ay;\n            cwx = a * cx + b * cy + parent.worldX;\n            cwy = c * cx + d * cy + parent.worldY;\n        }\n        let pp = parent.parent;\n        if (!pp)\n            throw new Error(\"IK parent must itself have a parent.\");\n        a = pp.a;\n        b = pp.b;\n        c = pp.c;\n        d = pp.d;\n        let id = a * d - b * c, x = cwx - pp.worldX, y = cwy - pp.worldY;\n        id = Math.abs(id) <= 0.0001 ? 0 : 1 / id;\n        let dx = (x * d - y * b) * id - px, dy = (y * a - x * c) * id - py;\n        let l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1, a2;\n        if (l1 < 0.0001) {\n            this.apply1(parent, targetX, targetY, false, stretch, false, alpha);\n            child.updateWorldTransformWith(cx, cy, 0, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\n            return;\n        }\n        x = targetX - pp.worldX;\n        y = targetY - pp.worldY;\n        let tx = (x * d - y * b) * id - px, ty = (y * a - x * c) * id - py;\n        let dd = tx * tx + ty * ty;\n        if (softness != 0) {\n            softness *= psx * (csx + 1) * 0.5;\n            let td = Math.sqrt(dd), sd = td - l1 - l2 * psx + softness;\n            if (sd > 0) {\n                let p = Math.min(1, sd / (softness * 2)) - 1;\n                p = (sd - softness * (1 - p * p)) / td;\n                tx -= p * tx;\n                ty -= p * ty;\n                dd = tx * tx + ty * ty;\n            }\n        }\n        outer: if (u) {\n            l2 *= psx;\n            let cos = (dd - l1 * l1 - l2 * l2) / (2 * l1 * l2);\n            if (cos < -1) {\n                cos = -1;\n                a2 = Math.PI * bendDir;\n            }\n            else if (cos > 1) {\n                cos = 1;\n                a2 = 0;\n                if (stretch) {\n                    a = (Math.sqrt(dd) / (l1 + l2) - 1) * alpha + 1;\n                    sx *= a;\n                    if (uniform)\n                        sy *= a;\n                }\n            }\n            else\n                a2 = Math.acos(cos) * bendDir;\n            a = l1 + l2 * cos;\n            b = l2 * Math.sin(a2);\n            a1 = Math.atan2(ty * a - tx * b, tx * a + ty * b);\n        }\n        else {\n            a = psx * l2;\n            b = psy * l2;\n            let aa = a * a, bb = b * b, ta = Math.atan2(ty, tx);\n            c = bb * l1 * l1 + aa * dd - aa * bb;\n            let c1 = -2 * bb * l1, c2 = bb - aa;\n            d = c1 * c1 - 4 * c2 * c;\n            if (d >= 0) {\n                let q = Math.sqrt(d);\n                if (c1 < 0)\n                    q = -q;\n                q = -(c1 + q) * 0.5;\n                let r0 = q / c2, r1 = c / q;\n                let r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;\n                r0 = dd - r * r;\n                if (r0 >= 0) {\n                    y = Math.sqrt(r0) * bendDir;\n                    a1 = ta - Math.atan2(y, r);\n                    a2 = Math.atan2(y / psy, (r - l1) / psx);\n                    break outer;\n                }\n            }\n            let minAngle = MathUtils.PI, minX = l1 - a, minDist = minX * minX, minY = 0;\n            let maxAngle = 0, maxX = l1 + a, maxDist = maxX * maxX, maxY = 0;\n            c = -a * l1 / (aa - bb);\n            if (c >= -1 && c <= 1) {\n                c = Math.acos(c);\n                x = a * Math.cos(c) + l1;\n                y = b * Math.sin(c);\n                d = x * x + y * y;\n                if (d < minDist) {\n                    minAngle = c;\n                    minDist = d;\n                    minX = x;\n                    minY = y;\n                }\n                if (d > maxDist) {\n                    maxAngle = c;\n                    maxDist = d;\n                    maxX = x;\n                    maxY = y;\n                }\n            }\n            if (dd <= (minDist + maxDist) * 0.5) {\n                a1 = ta - Math.atan2(minY * bendDir, minX);\n                a2 = minAngle * bendDir;\n            }\n            else {\n                a1 = ta - Math.atan2(maxY * bendDir, maxX);\n                a2 = maxAngle * bendDir;\n            }\n        }\n        let os = Math.atan2(cy, cx) * s2;\n        let rotation = parent.arotation;\n        a1 = (a1 - os) * MathUtils.radDeg + os1 - rotation;\n        if (a1 > 180)\n            a1 -= 360;\n        else if (a1 < -180) //\n            a1 += 360;\n        parent.updateWorldTransformWith(px, py, rotation + a1 * alpha, sx, sy, 0, 0);\n        rotation = child.arotation;\n        a2 = ((a2 + os) * MathUtils.radDeg - child.ashearX) * s2 + os2 - rotation;\n        if (a2 > 180)\n            a2 -= 360;\n        else if (a2 < -180) //\n            a2 += 360;\n        child.updateWorldTransformWith(cx, cy, rotation + a2 * alpha, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { ConstraintData } from \"./ConstraintData.js\";\n/** Stores the setup pose for an {@link IkConstraint}.\n * <p>\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide. */\nexport class IkConstraintData extends ConstraintData {\n    /** The bones that are constrained by this IK constraint. */\n    bones = new Array();\n    /** The bone that is the IK target. */\n    _target = null;\n    set target(boneData) { this._target = boneData; }\n    get target() {\n        if (!this._target)\n            throw new Error(\"BoneData not set.\");\n        else\n            return this._target;\n    }\n    /** Controls the bend direction of the IK bones, either 1 or -1. */\n    bendDirection = 0;\n    /** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */\n    compress = false;\n    /** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\n     * and the parent bone has local nonuniform scale, stretch is not applied. */\n    stretch = false;\n    /** When true, only a single bone is being constrained, and {@link #getCompress()} or {@link #getStretch()} is used, the bone\n     * is scaled on both the X and Y axes. */\n    uniform = false;\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */\n    mix = 0;\n    /** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */\n    softness = 0;\n    constructor(name) {\n        super(name, 0, false);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSWtDb25zdHJhaW50RGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9Ja0NvbnN0cmFpbnREYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0VBMkIrRTtBQUcvRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHckQ7O3FHQUVxRztBQUNyRyxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsY0FBYztJQUNuRCw0REFBNEQ7SUFDNUQsS0FBSyxHQUFHLElBQUksS0FBSyxFQUFZLENBQUM7SUFFOUIsc0NBQXNDO0lBQzlCLE9BQU8sR0FBb0IsSUFBSSxDQUFDO0lBQ3hDLElBQVcsTUFBTSxDQUFFLFFBQWtCLElBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ25FLElBQVcsTUFBTTtRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUE7O1lBQ2xELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUMxQixDQUFDO0lBRUQsbUVBQW1FO0lBQ25FLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFFbEIseUhBQXlIO0lBQ3pILFFBQVEsR0FBRyxLQUFLLENBQUM7SUFFakI7aUZBQzZFO0lBQzdFLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFFaEI7NkNBQ3lDO0lBQ3pDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFFaEIsb0dBQW9HO0lBQ3BHLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFFUixpR0FBaUc7SUFDakcsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUViLFlBQWEsSUFBWTtRQUN4QixLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBTcGluZSBSdW50aW1lcyBMaWNlbnNlIEFncmVlbWVudFxuICogTGFzdCB1cGRhdGVkIEp1bHkgMjgsIDIwMjMuIFJlcGxhY2VzIGFsbCBwcmlvciB2ZXJzaW9ucy5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAyMywgRXNvdGVyaWMgU29mdHdhcmUgTExDXG4gKlxuICogSW50ZWdyYXRpb24gb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3Igb3RoZXJ3aXNlIGNyZWF0aW5nXG4gKiBkZXJpdmF0aXZlIHdvcmtzIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpcyBwZXJtaXR0ZWQgdW5kZXIgdGhlIHRlcm1zIGFuZFxuICogY29uZGl0aW9ucyBvZiBTZWN0aW9uIDIgb2YgdGhlIFNwaW5lIEVkaXRvciBMaWNlbnNlIEFncmVlbWVudDpcbiAqIGh0dHA6Ly9lc290ZXJpY3NvZnR3YXJlLmNvbS9zcGluZS1lZGl0b3ItbGljZW5zZVxuICpcbiAqIE90aGVyd2lzZSwgaXQgaXMgcGVybWl0dGVkIHRvIGludGVncmF0ZSB0aGUgU3BpbmUgUnVudGltZXMgaW50byBzb2Z0d2FyZSBvclxuICogb3RoZXJ3aXNlIGNyZWF0ZSBkZXJpdmF0aXZlIHdvcmtzIG9mIHRoZSBTcGluZSBSdW50aW1lcyAoY29sbGVjdGl2ZWx5LFxuICogXCJQcm9kdWN0c1wiKSwgcHJvdmlkZWQgdGhhdCBlYWNoIHVzZXIgb2YgdGhlIFByb2R1Y3RzIG11c3Qgb2J0YWluIHRoZWlyIG93blxuICogU3BpbmUgRWRpdG9yIGxpY2Vuc2UgYW5kIHJlZGlzdHJpYnV0aW9uIG9mIHRoZSBQcm9kdWN0cyBpbiBhbnkgZm9ybSBtdXN0XG4gKiBpbmNsdWRlIHRoaXMgbGljZW5zZSBhbmQgY29weXJpZ2h0IG5vdGljZS5cbiAqXG4gKiBUSEUgU1BJTkUgUlVOVElNRVMgQVJFIFBST1ZJREVEIEJZIEVTT1RFUklDIFNPRlRXQVJFIExMQyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgRVNPVEVSSUMgU09GVFdBUkUgTExDIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTLFxuICogQlVTSU5FU1MgSU5URVJSVVBUSU9OLCBPUiBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUykgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRIRVxuICogU1BJTkUgUlVOVElNRVMsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7IEJvbmVEYXRhIH0gZnJvbSBcIi4vQm9uZURhdGEuanNcIjtcbmltcG9ydCB7IENvbnN0cmFpbnREYXRhIH0gZnJvbSBcIi4vQ29uc3RyYWludERhdGEuanNcIjtcblxuXG4vKiogU3RvcmVzIHRoZSBzZXR1cCBwb3NlIGZvciBhbiB7QGxpbmsgSWtDb25zdHJhaW50fS5cbiAqIDxwPlxuICogU2VlIFtJSyBjb25zdHJhaW50c10oaHR0cDovL2Vzb3Rlcmljc29mdHdhcmUuY29tL3NwaW5lLWlrLWNvbnN0cmFpbnRzKSBpbiB0aGUgU3BpbmUgVXNlciBHdWlkZS4gKi9cbmV4cG9ydCBjbGFzcyBJa0NvbnN0cmFpbnREYXRhIGV4dGVuZHMgQ29uc3RyYWludERhdGEge1xuXHQvKiogVGhlIGJvbmVzIHRoYXQgYXJlIGNvbnN0cmFpbmVkIGJ5IHRoaXMgSUsgY29uc3RyYWludC4gKi9cblx0Ym9uZXMgPSBuZXcgQXJyYXk8Qm9uZURhdGE+KCk7XG5cblx0LyoqIFRoZSBib25lIHRoYXQgaXMgdGhlIElLIHRhcmdldC4gKi9cblx0cHJpdmF0ZSBfdGFyZ2V0OiBCb25lRGF0YSB8IG51bGwgPSBudWxsO1xuXHRwdWJsaWMgc2V0IHRhcmdldCAoYm9uZURhdGE6IEJvbmVEYXRhKSB7IHRoaXMuX3RhcmdldCA9IGJvbmVEYXRhOyB9XG5cdHB1YmxpYyBnZXQgdGFyZ2V0ICgpIHtcblx0XHRpZiAoIXRoaXMuX3RhcmdldCkgdGhyb3cgbmV3IEVycm9yKFwiQm9uZURhdGEgbm90IHNldC5cIilcblx0XHRlbHNlIHJldHVybiB0aGlzLl90YXJnZXQ7XG5cdH1cblxuXHQvKiogQ29udHJvbHMgdGhlIGJlbmQgZGlyZWN0aW9uIG9mIHRoZSBJSyBib25lcywgZWl0aGVyIDEgb3IgLTEuICovXG5cdGJlbmREaXJlY3Rpb24gPSAwO1xuXG5cdC8qKiBXaGVuIHRydWUgYW5kIG9ubHkgYSBzaW5nbGUgYm9uZSBpcyBiZWluZyBjb25zdHJhaW5lZCwgaWYgdGhlIHRhcmdldCBpcyB0b28gY2xvc2UsIHRoZSBib25lIGlzIHNjYWxlZCB0byByZWFjaCBpdC4gKi9cblx0Y29tcHJlc3MgPSBmYWxzZTtcblxuXHQvKiogV2hlbiB0cnVlLCBpZiB0aGUgdGFyZ2V0IGlzIG91dCBvZiByYW5nZSwgdGhlIHBhcmVudCBib25lIGlzIHNjYWxlZCB0byByZWFjaCBpdC4gSWYgbW9yZSB0aGFuIG9uZSBib25lIGlzIGJlaW5nIGNvbnN0cmFpbmVkXG5cdCAqIGFuZCB0aGUgcGFyZW50IGJvbmUgaGFzIGxvY2FsIG5vbnVuaWZvcm0gc2NhbGUsIHN0cmV0Y2ggaXMgbm90IGFwcGxpZWQuICovXG5cdHN0cmV0Y2ggPSBmYWxzZTtcblxuXHQvKiogV2hlbiB0cnVlLCBvbmx5IGEgc2luZ2xlIGJvbmUgaXMgYmVpbmcgY29uc3RyYWluZWQsIGFuZCB7QGxpbmsgI2dldENvbXByZXNzKCl9IG9yIHtAbGluayAjZ2V0U3RyZXRjaCgpfSBpcyB1c2VkLCB0aGUgYm9uZVxuXHQgKiBpcyBzY2FsZWQgb24gYm90aCB0aGUgWCBhbmQgWSBheGVzLiAqL1xuXHR1bmlmb3JtID0gZmFsc2U7XG5cblx0LyoqIEEgcGVyY2VudGFnZSAoMC0xKSB0aGF0IGNvbnRyb2xzIHRoZSBtaXggYmV0d2VlbiB0aGUgY29uc3RyYWluZWQgYW5kIHVuY29uc3RyYWluZWQgcm90YXRpb25zLiAqL1xuXHRtaXggPSAwO1xuXG5cdC8qKiBGb3IgdHdvIGJvbmUgSUssIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBtYXhpbXVtIHJlYWNoIG9mIHRoZSBib25lcyB0aGF0IHJvdGF0aW9uIHdpbGwgc2xvdy4gKi9cblx0c29mdG5lc3MgPSAwO1xuXG5cdGNvbnN0cnVjdG9yIChuYW1lOiBzdHJpbmcpIHtcblx0XHRzdXBlcihuYW1lLCAwLCBmYWxzZSk7XG5cdH1cbn1cbiJdfQ==", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { ConstraintData } from \"./ConstraintData.js\";\n/** Stores the setup pose for a {@link PathConstraint}.\n *\n * See [path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide. */\nexport class PathConstraintData extends ConstraintData {\n    /** The bones that will be modified by this path constraint. */\n    bones = new Array();\n    /** The slot whose path attachment will be used to constrained the bones. */\n    _target = null;\n    set target(slotData) { this._target = slotData; }\n    get target() {\n        if (!this._target)\n            throw new Error(\"SlotData not set.\");\n        else\n            return this._target;\n    }\n    /** The mode for positioning the first bone on the path. */\n    positionMode = PositionMode.Fixed;\n    /** The mode for positioning the bones after the first bone on the path. */\n    spacingMode = SpacingMode.Fixed;\n    /** The mode for adjusting the rotation of the bones. */\n    rotateMode = RotateMode.Chain;\n    /** An offset added to the constrained bone rotation. */\n    offsetRotation = 0;\n    /** The position along the path. */\n    position = 0;\n    /** The spacing between bones. */\n    spacing = 0;\n    mixRotate = 0;\n    mixX = 0;\n    mixY = 0;\n    constructor(name) {\n        super(name, 0, false);\n    }\n}\n/** Controls how the first bone is positioned along the path.\n *\n * See [position](http://esotericsoftware.com/spine-path-constraints#Position) in the Spine User Guide. */\nexport var PositionMode;\n(function (PositionMode) {\n    PositionMode[PositionMode[\"Fixed\"] = 0] = \"Fixed\";\n    PositionMode[PositionMode[\"Percent\"] = 1] = \"Percent\";\n})(PositionMode || (PositionMode = {}));\n/** Controls how bones after the first bone are positioned along the path.\n *\n * See [spacing](http://esotericsoftware.com/spine-path-constraints#Spacing) in the Spine User Guide. */\nexport var SpacingMode;\n(function (SpacingMode) {\n    SpacingMode[SpacingMode[\"Length\"] = 0] = \"Length\";\n    SpacingMode[SpacingMode[\"Fixed\"] = 1] = \"Fixed\";\n    SpacingMode[SpacingMode[\"Percent\"] = 2] = \"Percent\";\n    SpacingMode[SpacingMode[\"Proportional\"] = 3] = \"Proportional\";\n})(SpacingMode || (SpacingMode = {}));\n/** Controls how bones are rotated, translated, and scaled to match the path.\n *\n * See [rotate mix](http://esotericsoftware.com/spine-path-constraints#Rotate-mix) in the Spine User Guide. */\nexport var RotateMode;\n(function (RotateMode) {\n    RotateMode[RotateMode[\"Tangent\"] = 0] = \"Tangent\";\n    RotateMode[RotateMode[\"Chain\"] = 1] = \"Chain\";\n    RotateMode[RotateMode[\"ChainScale\"] = 2] = \"ChainScale\";\n})(RotateMode || (RotateMode = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGF0aENvbnN0cmFpbnREYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1BhdGhDb25zdHJhaW50RGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytFQTJCK0U7QUFHL0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBSXJEOzt5R0FFeUc7QUFDekcsTUFBTSxPQUFPLGtCQUFtQixTQUFRLGNBQWM7SUFFckQsK0RBQStEO0lBQy9ELEtBQUssR0FBRyxJQUFJLEtBQUssRUFBWSxDQUFDO0lBRTlCLDRFQUE0RTtJQUNwRSxPQUFPLEdBQW9CLElBQUksQ0FBQztJQUN4QyxJQUFXLE1BQU0sQ0FBRSxRQUFrQixJQUFJLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNuRSxJQUFXLE1BQU07UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBOztZQUNsRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDMUIsQ0FBQztJQUVELDJEQUEyRDtJQUMzRCxZQUFZLEdBQWlCLFlBQVksQ0FBQyxLQUFLLENBQUM7SUFFaEQsMkVBQTJFO0lBQzNFLFdBQVcsR0FBZ0IsV0FBVyxDQUFDLEtBQUssQ0FBQztJQUU3Qyx3REFBd0Q7SUFDeEQsVUFBVSxHQUFlLFVBQVUsQ0FBQyxLQUFLLENBQUM7SUFFMUMsd0RBQXdEO0lBQ3hELGNBQWMsR0FBVyxDQUFDLENBQUM7SUFFM0IsbUNBQW1DO0lBQ25DLFFBQVEsR0FBVyxDQUFDLENBQUM7SUFFckIsaUNBQWlDO0lBQ2pDLE9BQU8sR0FBVyxDQUFDLENBQUM7SUFFcEIsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLElBQUksR0FBRyxDQUFDLENBQUM7SUFDVCxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBRVQsWUFBYSxJQUFZO1FBQ3hCLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Q0FDRDtBQUVEOzswR0FFMEc7QUFDMUcsTUFBTSxDQUFOLElBQVksWUFBK0I7QUFBM0MsV0FBWSxZQUFZO0lBQUcsaURBQUssQ0FBQTtJQUFFLHFEQUFPLENBQUE7QUFBQyxDQUFDLEVBQS9CLFlBQVksS0FBWixZQUFZLFFBQW1CO0FBRTNDOzt3R0FFd0c7QUFDeEcsTUFBTSxDQUFOLElBQVksV0FBb0Q7QUFBaEUsV0FBWSxXQUFXO0lBQUcsaURBQU0sQ0FBQTtJQUFFLCtDQUFLLENBQUE7SUFBRSxtREFBTyxDQUFBO0lBQUUsNkRBQVksQ0FBQTtBQUFDLENBQUMsRUFBcEQsV0FBVyxLQUFYLFdBQVcsUUFBeUM7QUFFaEU7OzhHQUU4RztBQUM5RyxNQUFNLENBQU4sSUFBWSxVQUF5QztBQUFyRCxXQUFZLFVBQVU7SUFBRyxpREFBTyxDQUFBO0lBQUUsNkNBQUssQ0FBQTtJQUFFLHVEQUFVLENBQUE7QUFBQyxDQUFDLEVBQXpDLFVBQVUsS0FBVixVQUFVLFFBQStCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogU3BpbmUgUnVudGltZXMgTGljZW5zZSBBZ3JlZW1lbnRcbiAqIExhc3QgdXBkYXRlZCBKdWx5IDI4LCAyMDIzLiBSZXBsYWNlcyBhbGwgcHJpb3IgdmVyc2lvbnMuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLTIwMjMsIEVzb3RlcmljIFNvZnR3YXJlIExMQ1xuICpcbiAqIEludGVncmF0aW9uIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpbnRvIHNvZnR3YXJlIG9yIG90aGVyd2lzZSBjcmVhdGluZ1xuICogZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgaXMgcGVybWl0dGVkIHVuZGVyIHRoZSB0ZXJtcyBhbmRcbiAqIGNvbmRpdGlvbnMgb2YgU2VjdGlvbiAyIG9mIHRoZSBTcGluZSBFZGl0b3IgTGljZW5zZSBBZ3JlZW1lbnQ6XG4gKiBodHRwOi8vZXNvdGVyaWNzb2Z0d2FyZS5jb20vc3BpbmUtZWRpdG9yLWxpY2Vuc2VcbiAqXG4gKiBPdGhlcndpc2UsIGl0IGlzIHBlcm1pdHRlZCB0byBpbnRlZ3JhdGUgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3JcbiAqIG90aGVyd2lzZSBjcmVhdGUgZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgKGNvbGxlY3RpdmVseSxcbiAqIFwiUHJvZHVjdHNcIiksIHByb3ZpZGVkIHRoYXQgZWFjaCB1c2VyIG9mIHRoZSBQcm9kdWN0cyBtdXN0IG9idGFpbiB0aGVpciBvd25cbiAqIFNwaW5lIEVkaXRvciBsaWNlbnNlIGFuZCByZWRpc3RyaWJ1dGlvbiBvZiB0aGUgUHJvZHVjdHMgaW4gYW55IGZvcm0gbXVzdFxuICogaW5jbHVkZSB0aGlzIGxpY2Vuc2UgYW5kIGNvcHlyaWdodCBub3RpY2UuXG4gKlxuICogVEhFIFNQSU5FIFJVTlRJTUVTIEFSRSBQUk9WSURFRCBCWSBFU09URVJJQyBTT0ZUV0FSRSBMTEMgXCJBUyBJU1wiIEFORCBBTllcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEVTT1RFUklDIFNPRlRXQVJFIExMQyBCRSBMSUFCTEUgRk9SIEFOWVxuICogRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbiAqIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUyxcbiAqIEJVU0lORVNTIElOVEVSUlVQVElPTiwgT1IgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFMpIEhPV0VWRVIgQ0FVU0VEIEFORFxuICogT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSEVcbiAqIFNQSU5FIFJVTlRJTUVTLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgeyBCb25lRGF0YSB9IGZyb20gXCIuL0JvbmVEYXRhLmpzXCI7XG5pbXBvcnQgeyBDb25zdHJhaW50RGF0YSB9IGZyb20gXCIuL0NvbnN0cmFpbnREYXRhLmpzXCI7XG5pbXBvcnQgeyBTbG90RGF0YSB9IGZyb20gXCIuL1Nsb3REYXRhLmpzXCI7XG5cblxuLyoqIFN0b3JlcyB0aGUgc2V0dXAgcG9zZSBmb3IgYSB7QGxpbmsgUGF0aENvbnN0cmFpbnR9LlxuICpcbiAqIFNlZSBbcGF0aCBjb25zdHJhaW50c10oaHR0cDovL2Vzb3Rlcmljc29mdHdhcmUuY29tL3NwaW5lLXBhdGgtY29uc3RyYWludHMpIGluIHRoZSBTcGluZSBVc2VyIEd1aWRlLiAqL1xuZXhwb3J0IGNsYXNzIFBhdGhDb25zdHJhaW50RGF0YSBleHRlbmRzIENvbnN0cmFpbnREYXRhIHtcblxuXHQvKiogVGhlIGJvbmVzIHRoYXQgd2lsbCBiZSBtb2RpZmllZCBieSB0aGlzIHBhdGggY29uc3RyYWludC4gKi9cblx0Ym9uZXMgPSBuZXcgQXJyYXk8Qm9uZURhdGE+KCk7XG5cblx0LyoqIFRoZSBzbG90IHdob3NlIHBhdGggYXR0YWNobWVudCB3aWxsIGJlIHVzZWQgdG8gY29uc3RyYWluZWQgdGhlIGJvbmVzLiAqL1xuXHRwcml2YXRlIF90YXJnZXQ6IFNsb3REYXRhIHwgbnVsbCA9IG51bGw7XG5cdHB1YmxpYyBzZXQgdGFyZ2V0IChzbG90RGF0YTogU2xvdERhdGEpIHsgdGhpcy5fdGFyZ2V0ID0gc2xvdERhdGE7IH1cblx0cHVibGljIGdldCB0YXJnZXQgKCkge1xuXHRcdGlmICghdGhpcy5fdGFyZ2V0KSB0aHJvdyBuZXcgRXJyb3IoXCJTbG90RGF0YSBub3Qgc2V0LlwiKVxuXHRcdGVsc2UgcmV0dXJuIHRoaXMuX3RhcmdldDtcblx0fVxuXG5cdC8qKiBUaGUgbW9kZSBmb3IgcG9zaXRpb25pbmcgdGhlIGZpcnN0IGJvbmUgb24gdGhlIHBhdGguICovXG5cdHBvc2l0aW9uTW9kZTogUG9zaXRpb25Nb2RlID0gUG9zaXRpb25Nb2RlLkZpeGVkO1xuXG5cdC8qKiBUaGUgbW9kZSBmb3IgcG9zaXRpb25pbmcgdGhlIGJvbmVzIGFmdGVyIHRoZSBmaXJzdCBib25lIG9uIHRoZSBwYXRoLiAqL1xuXHRzcGFjaW5nTW9kZTogU3BhY2luZ01vZGUgPSBTcGFjaW5nTW9kZS5GaXhlZDtcblxuXHQvKiogVGhlIG1vZGUgZm9yIGFkanVzdGluZyB0aGUgcm90YXRpb24gb2YgdGhlIGJvbmVzLiAqL1xuXHRyb3RhdGVNb2RlOiBSb3RhdGVNb2RlID0gUm90YXRlTW9kZS5DaGFpbjtcblxuXHQvKiogQW4gb2Zmc2V0IGFkZGVkIHRvIHRoZSBjb25zdHJhaW5lZCBib25lIHJvdGF0aW9uLiAqL1xuXHRvZmZzZXRSb3RhdGlvbjogbnVtYmVyID0gMDtcblxuXHQvKiogVGhlIHBvc2l0aW9uIGFsb25nIHRoZSBwYXRoLiAqL1xuXHRwb3NpdGlvbjogbnVtYmVyID0gMDtcblxuXHQvKiogVGhlIHNwYWNpbmcgYmV0d2VlbiBib25lcy4gKi9cblx0c3BhY2luZzogbnVtYmVyID0gMDtcblxuXHRtaXhSb3RhdGUgPSAwO1xuXHRtaXhYID0gMDtcblx0bWl4WSA9IDA7XG5cblx0Y29uc3RydWN0b3IgKG5hbWU6IHN0cmluZykge1xuXHRcdHN1cGVyKG5hbWUsIDAsIGZhbHNlKTtcblx0fVxufVxuXG4vKiogQ29udHJvbHMgaG93IHRoZSBmaXJzdCBib25lIGlzIHBvc2l0aW9uZWQgYWxvbmcgdGhlIHBhdGguXG4gKlxuICogU2VlIFtwb3NpdGlvbl0oaHR0cDovL2Vzb3Rlcmljc29mdHdhcmUuY29tL3NwaW5lLXBhdGgtY29uc3RyYWludHMjUG9zaXRpb24pIGluIHRoZSBTcGluZSBVc2VyIEd1aWRlLiAqL1xuZXhwb3J0IGVudW0gUG9zaXRpb25Nb2RlIHsgRml4ZWQsIFBlcmNlbnQgfVxuXG4vKiogQ29udHJvbHMgaG93IGJvbmVzIGFmdGVyIHRoZSBmaXJzdCBib25lIGFyZSBwb3NpdGlvbmVkIGFsb25nIHRoZSBwYXRoLlxuICpcbiAqIFNlZSBbc3BhY2luZ10oaHR0cDovL2Vzb3Rlcmljc29mdHdhcmUuY29tL3NwaW5lLXBhdGgtY29uc3RyYWludHMjU3BhY2luZykgaW4gdGhlIFNwaW5lIFVzZXIgR3VpZGUuICovXG5leHBvcnQgZW51bSBTcGFjaW5nTW9kZSB7IExlbmd0aCwgRml4ZWQsIFBlcmNlbnQsIFByb3BvcnRpb25hbCB9XG5cbi8qKiBDb250cm9scyBob3cgYm9uZXMgYXJlIHJvdGF0ZWQsIHRyYW5zbGF0ZWQsIGFuZCBzY2FsZWQgdG8gbWF0Y2ggdGhlIHBhdGguXG4gKlxuICogU2VlIFtyb3RhdGUgbWl4XShodHRwOi8vZXNvdGVyaWNzb2Z0d2FyZS5jb20vc3BpbmUtcGF0aC1jb25zdHJhaW50cyNSb3RhdGUtbWl4KSBpbiB0aGUgU3BpbmUgVXNlciBHdWlkZS4gKi9cbmV4cG9ydCBlbnVtIFJvdGF0ZU1vZGUgeyBUYW5nZW50LCBDaGFpbiwgQ2hhaW5TY2FsZSB9XG4iXX0=", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { PathAttachment } from \"./attachments/PathAttachment.js\";\nimport { RotateMode, SpacingMode, PositionMode } from \"./PathConstraintData.js\";\nimport { Utils, MathUtils } from \"./Utils.js\";\n/** Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the\n * constrained bones so they follow a {@link PathAttachment}.\n *\n * See [Path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide. */\nexport class PathConstraint {\n    static NONE = -1;\n    static BEFORE = -2;\n    static AFTER = -3;\n    static epsilon = 0.00001;\n    /** The path constraint's setup pose data. */\n    data;\n    /** The bones that will be modified by this path constraint. */\n    bones;\n    /** The slot whose path attachment will be used to constrained the bones. */\n    target;\n    /** The position along the path. */\n    position = 0;\n    /** The spacing between bones. */\n    spacing = 0;\n    mixRotate = 0;\n    mixX = 0;\n    mixY = 0;\n    spaces = new Array();\n    positions = new Array();\n    world = new Array();\n    curves = new Array();\n    lengths = new Array();\n    segments = new Array();\n    active = false;\n    constructor(data, skeleton) {\n        if (!data)\n            throw new Error(\"data cannot be null.\");\n        if (!skeleton)\n            throw new Error(\"skeleton cannot be null.\");\n        this.data = data;\n        this.bones = new Array();\n        for (let i = 0, n = data.bones.length; i < n; i++) {\n            let bone = skeleton.findBone(data.bones[i].name);\n            if (!bone)\n                throw new Error(`Couldn't find bone ${data.bones[i].name}.`);\n            this.bones.push(bone);\n        }\n        let target = skeleton.findSlot(data.target.name);\n        if (!target)\n            throw new Error(`Couldn't find target bone ${data.target.name}`);\n        this.target = target;\n        this.position = data.position;\n        this.spacing = data.spacing;\n        this.mixRotate = data.mixRotate;\n        this.mixX = data.mixX;\n        this.mixY = data.mixY;\n    }\n    isActive() {\n        return this.active;\n    }\n    setToSetupPose() {\n        const data = this.data;\n        this.position = data.position;\n        this.spacing = data.spacing;\n        this.mixRotate = data.mixRotate;\n        this.mixX = data.mixX;\n        this.mixY = data.mixY;\n    }\n    update(physics) {\n        let attachment = this.target.getAttachment();\n        if (!(attachment instanceof PathAttachment))\n            return;\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY;\n        if (mixRotate == 0 && mixX == 0 && mixY == 0)\n            return;\n        let data = this.data;\n        let tangents = data.rotateMode == RotateMode.Tangent, scale = data.rotateMode == RotateMode.ChainScale;\n        let bones = this.bones;\n        let boneCount = bones.length, spacesCount = tangents ? boneCount : boneCount + 1;\n        let spaces = Utils.setArraySize(this.spaces, spacesCount), lengths = scale ? this.lengths = Utils.setArraySize(this.lengths, boneCount) : [];\n        let spacing = this.spacing;\n        switch (data.spacingMode) {\n            case SpacingMode.Percent:\n                if (scale) {\n                    for (let i = 0, n = spacesCount - 1; i < n; i++) {\n                        let bone = bones[i];\n                        let setupLength = bone.data.length;\n                        let x = setupLength * bone.a, y = setupLength * bone.c;\n                        lengths[i] = Math.sqrt(x * x + y * y);\n                    }\n                }\n                Utils.arrayFill(spaces, 1, spacesCount, spacing);\n                break;\n            case SpacingMode.Proportional:\n                let sum = 0;\n                for (let i = 0, n = spacesCount - 1; i < n;) {\n                    let bone = bones[i];\n                    let setupLength = bone.data.length;\n                    if (setupLength < PathConstraint.epsilon) {\n                        if (scale)\n                            lengths[i] = 0;\n                        spaces[++i] = spacing;\n                    }\n                    else {\n                        let x = setupLength * bone.a, y = setupLength * bone.c;\n                        let length = Math.sqrt(x * x + y * y);\n                        if (scale)\n                            lengths[i] = length;\n                        spaces[++i] = length;\n                        sum += length;\n                    }\n                }\n                if (sum > 0) {\n                    sum = spacesCount / sum * spacing;\n                    for (let i = 1; i < spacesCount; i++)\n                        spaces[i] *= sum;\n                }\n                break;\n            default:\n                let lengthSpacing = data.spacingMode == SpacingMode.Length;\n                for (let i = 0, n = spacesCount - 1; i < n;) {\n                    let bone = bones[i];\n                    let setupLength = bone.data.length;\n                    if (setupLength < PathConstraint.epsilon) {\n                        if (scale)\n                            lengths[i] = 0;\n                        spaces[++i] = spacing;\n                    }\n                    else {\n                        let x = setupLength * bone.a, y = setupLength * bone.c;\n                        let length = Math.sqrt(x * x + y * y);\n                        if (scale)\n                            lengths[i] = length;\n                        spaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length / setupLength;\n                    }\n                }\n        }\n        let positions = this.computeWorldPositions(attachment, spacesCount, tangents);\n        let boneX = positions[0], boneY = positions[1], offsetRotation = data.offsetRotation;\n        let tip = false;\n        if (offsetRotation == 0)\n            tip = data.rotateMode == RotateMode.Chain;\n        else {\n            tip = false;\n            let p = this.target.bone;\n            offsetRotation *= p.a * p.d - p.b * p.c > 0 ? MathUtils.degRad : -MathUtils.degRad;\n        }\n        for (let i = 0, p = 3; i < boneCount; i++, p += 3) {\n            let bone = bones[i];\n            bone.worldX += (boneX - bone.worldX) * mixX;\n            bone.worldY += (boneY - bone.worldY) * mixY;\n            let x = positions[p], y = positions[p + 1], dx = x - boneX, dy = y - boneY;\n            if (scale) {\n                let length = lengths[i];\n                if (length != 0) {\n                    let s = (Math.sqrt(dx * dx + dy * dy) / length - 1) * mixRotate + 1;\n                    bone.a *= s;\n                    bone.c *= s;\n                }\n            }\n            boneX = x;\n            boneY = y;\n            if (mixRotate > 0) {\n                let a = bone.a, b = bone.b, c = bone.c, d = bone.d, r = 0, cos = 0, sin = 0;\n                if (tangents)\n                    r = positions[p - 1];\n                else if (spaces[i + 1] == 0)\n                    r = positions[p + 2];\n                else\n                    r = Math.atan2(dy, dx);\n                r -= Math.atan2(c, a);\n                if (tip) {\n                    cos = Math.cos(r);\n                    sin = Math.sin(r);\n                    let length = bone.data.length;\n                    boneX += (length * (cos * a - sin * c) - dx) * mixRotate;\n                    boneY += (length * (sin * a + cos * c) - dy) * mixRotate;\n                }\n                else {\n                    r += offsetRotation;\n                }\n                if (r > MathUtils.PI)\n                    r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI) //\n                    r += MathUtils.PI2;\n                r *= mixRotate;\n                cos = Math.cos(r);\n                sin = Math.sin(r);\n                bone.a = cos * a - sin * c;\n                bone.b = cos * b - sin * d;\n                bone.c = sin * a + cos * c;\n                bone.d = sin * b + cos * d;\n            }\n            bone.updateAppliedTransform();\n        }\n    }\n    computeWorldPositions(path, spacesCount, tangents) {\n        let target = this.target;\n        let position = this.position;\n        let spaces = this.spaces, out = Utils.setArraySize(this.positions, spacesCount * 3 + 2), world = this.world;\n        let closed = path.closed;\n        let verticesLength = path.worldVerticesLength, curveCount = verticesLength / 6, prevCurve = PathConstraint.NONE;\n        if (!path.constantSpeed) {\n            let lengths = path.lengths;\n            curveCount -= closed ? 1 : 2;\n            let pathLength = lengths[curveCount];\n            if (this.data.positionMode == PositionMode.Percent)\n                position *= pathLength;\n            let multiplier;\n            switch (this.data.spacingMode) {\n                case SpacingMode.Percent:\n                    multiplier = pathLength;\n                    break;\n                case SpacingMode.Proportional:\n                    multiplier = pathLength / spacesCount;\n                    break;\n                default:\n                    multiplier = 1;\n            }\n            world = Utils.setArraySize(this.world, 8);\n            for (let i = 0, o = 0, curve = 0; i < spacesCount; i++, o += 3) {\n                let space = spaces[i] * multiplier;\n                position += space;\n                let p = position;\n                if (closed) {\n                    p %= pathLength;\n                    if (p < 0)\n                        p += pathLength;\n                    curve = 0;\n                }\n                else if (p < 0) {\n                    if (prevCurve != PathConstraint.BEFORE) {\n                        prevCurve = PathConstraint.BEFORE;\n                        path.computeWorldVertices(target, 2, 4, world, 0, 2);\n                    }\n                    this.addBeforePosition(p, world, 0, out, o);\n                    continue;\n                }\n                else if (p > pathLength) {\n                    if (prevCurve != PathConstraint.AFTER) {\n                        prevCurve = PathConstraint.AFTER;\n                        path.computeWorldVertices(target, verticesLength - 6, 4, world, 0, 2);\n                    }\n                    this.addAfterPosition(p - pathLength, world, 0, out, o);\n                    continue;\n                }\n                // Determine curve containing position.\n                for (;; curve++) {\n                    let length = lengths[curve];\n                    if (p > length)\n                        continue;\n                    if (curve == 0)\n                        p /= length;\n                    else {\n                        let prev = lengths[curve - 1];\n                        p = (p - prev) / (length - prev);\n                    }\n                    break;\n                }\n                if (curve != prevCurve) {\n                    prevCurve = curve;\n                    if (closed && curve == curveCount) {\n                        path.computeWorldVertices(target, verticesLength - 4, 4, world, 0, 2);\n                        path.computeWorldVertices(target, 0, 4, world, 4, 2);\n                    }\n                    else\n                        path.computeWorldVertices(target, curve * 6 + 2, 8, world, 0, 2);\n                }\n                this.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o, tangents || (i > 0 && space == 0));\n            }\n            return out;\n        }\n        // World vertices.\n        if (closed) {\n            verticesLength += 2;\n            world = Utils.setArraySize(this.world, verticesLength);\n            path.computeWorldVertices(target, 2, verticesLength - 4, world, 0, 2);\n            path.computeWorldVertices(target, 0, 2, world, verticesLength - 4, 2);\n            world[verticesLength - 2] = world[0];\n            world[verticesLength - 1] = world[1];\n        }\n        else {\n            curveCount--;\n            verticesLength -= 4;\n            world = Utils.setArraySize(this.world, verticesLength);\n            path.computeWorldVertices(target, 2, verticesLength, world, 0, 2);\n        }\n        // Curve lengths.\n        let curves = Utils.setArraySize(this.curves, curveCount);\n        let pathLength = 0;\n        let x1 = world[0], y1 = world[1], cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, x2 = 0, y2 = 0;\n        let tmpx = 0, tmpy = 0, dddfx = 0, dddfy = 0, ddfx = 0, ddfy = 0, dfx = 0, dfy = 0;\n        for (let i = 0, w = 2; i < curveCount; i++, w += 6) {\n            cx1 = world[w];\n            cy1 = world[w + 1];\n            cx2 = world[w + 2];\n            cy2 = world[w + 3];\n            x2 = world[w + 4];\n            y2 = world[w + 5];\n            tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;\n            tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;\n            dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;\n            dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;\n            ddfx = tmpx * 2 + dddfx;\n            ddfy = tmpy * 2 + dddfy;\n            dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;\n            dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n            dfx += ddfx;\n            dfy += ddfy;\n            ddfx += dddfx;\n            ddfy += dddfy;\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n            dfx += ddfx;\n            dfy += ddfy;\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n            dfx += ddfx + dddfx;\n            dfy += ddfy + dddfy;\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n            curves[i] = pathLength;\n            x1 = x2;\n            y1 = y2;\n        }\n        if (this.data.positionMode == PositionMode.Percent)\n            position *= pathLength;\n        let multiplier;\n        switch (this.data.spacingMode) {\n            case SpacingMode.Percent:\n                multiplier = pathLength;\n                break;\n            case SpacingMode.Proportional:\n                multiplier = pathLength / spacesCount;\n                break;\n            default:\n                multiplier = 1;\n        }\n        let segments = this.segments;\n        let curveLength = 0;\n        for (let i = 0, o = 0, curve = 0, segment = 0; i < spacesCount; i++, o += 3) {\n            let space = spaces[i] * multiplier;\n            position += space;\n            let p = position;\n            if (closed) {\n                p %= pathLength;\n                if (p < 0)\n                    p += pathLength;\n                curve = 0;\n            }\n            else if (p < 0) {\n                this.addBeforePosition(p, world, 0, out, o);\n                continue;\n            }\n            else if (p > pathLength) {\n                this.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);\n                continue;\n            }\n            // Determine curve containing position.\n            for (;; curve++) {\n                let length = curves[curve];\n                if (p > length)\n                    continue;\n                if (curve == 0)\n                    p /= length;\n                else {\n                    let prev = curves[curve - 1];\n                    p = (p - prev) / (length - prev);\n                }\n                break;\n            }\n            // Curve segment lengths.\n            if (curve != prevCurve) {\n                prevCurve = curve;\n                let ii = curve * 6;\n                x1 = world[ii];\n                y1 = world[ii + 1];\n                cx1 = world[ii + 2];\n                cy1 = world[ii + 3];\n                cx2 = world[ii + 4];\n                cy2 = world[ii + 5];\n                x2 = world[ii + 6];\n                y2 = world[ii + 7];\n                tmpx = (x1 - cx1 * 2 + cx2) * 0.03;\n                tmpy = (y1 - cy1 * 2 + cy2) * 0.03;\n                dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;\n                dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;\n                ddfx = tmpx * 2 + dddfx;\n                ddfy = tmpy * 2 + dddfy;\n                dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;\n                dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;\n                curveLength = Math.sqrt(dfx * dfx + dfy * dfy);\n                segments[0] = curveLength;\n                for (ii = 1; ii < 8; ii++) {\n                    dfx += ddfx;\n                    dfy += ddfy;\n                    ddfx += dddfx;\n                    ddfy += dddfy;\n                    curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                    segments[ii] = curveLength;\n                }\n                dfx += ddfx;\n                dfy += ddfy;\n                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                segments[8] = curveLength;\n                dfx += ddfx + dddfx;\n                dfy += ddfy + dddfy;\n                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                segments[9] = curveLength;\n                segment = 0;\n            }\n            // Weight by segment length.\n            p *= curveLength;\n            for (;; segment++) {\n                let length = segments[segment];\n                if (p > length)\n                    continue;\n                if (segment == 0)\n                    p /= length;\n                else {\n                    let prev = segments[segment - 1];\n                    p = segment + (p - prev) / (length - prev);\n                }\n                break;\n            }\n            this.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || (i > 0 && space == 0));\n        }\n        return out;\n    }\n    addBeforePosition(p, temp, i, out, o) {\n        let x1 = temp[i], y1 = temp[i + 1], dx = temp[i + 2] - x1, dy = temp[i + 3] - y1, r = Math.atan2(dy, dx);\n        out[o] = x1 + p * Math.cos(r);\n        out[o + 1] = y1 + p * Math.sin(r);\n        out[o + 2] = r;\n    }\n    addAfterPosition(p, temp, i, out, o) {\n        let x1 = temp[i + 2], y1 = temp[i + 3], dx = x1 - temp[i], dy = y1 - temp[i + 1], r = Math.atan2(dy, dx);\n        out[o] = x1 + p * Math.cos(r);\n        out[o + 1] = y1 + p * Math.sin(r);\n        out[o + 2] = r;\n    }\n    addCurvePosition(p, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents) {\n        if (p == 0 || isNaN(p)) {\n            out[o] = x1;\n            out[o + 1] = y1;\n            out[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\n            return;\n        }\n        let tt = p * p, ttt = tt * p, u = 1 - p, uu = u * u, uuu = uu * u;\n        let ut = u * p, ut3 = ut * 3, uut3 = u * ut3, utt3 = ut3 * p;\n        let x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt, y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;\n        out[o] = x;\n        out[o + 1] = y;\n        if (tangents) {\n            if (p < 0.001)\n                out[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\n            else\n                out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Physics, Skeleton } from \"./Skeleton.js\";\nimport { MathUtils } from \"./Utils.js\";\n/** Stores the current pose for a physics constraint. A physics constraint applies physics to bones.\n * <p>\n * See <a href=\"http://esotericsoftware.com/spine-physics-constraints\">Physics constraints</a> in the Spine User Guide. */\nexport class PhysicsConstraint {\n    data;\n    _bone = null;\n    /** The bone constrained by this physics constraint. */\n    set bone(bone) { this._bone = bone; }\n    get bone() {\n        if (!this._bone)\n            throw new Error(\"Bone not set.\");\n        else\n            return this._bone;\n    }\n    inertia = 0;\n    strength = 0;\n    damping = 0;\n    massInverse = 0;\n    wind = 0;\n    gravity = 0;\n    mix = 0;\n    _reset = true;\n    ux = 0;\n    uy = 0;\n    cx = 0;\n    cy = 0;\n    tx = 0;\n    ty = 0;\n    xOffset = 0;\n    xVelocity = 0;\n    yOffset = 0;\n    yVelocity = 0;\n    rotateOffset = 0;\n    rotateVelocity = 0;\n    scaleOffset = 0;\n    scaleVelocity = 0;\n    active = false;\n    skeleton;\n    remaining = 0;\n    lastTime = 0;\n    constructor(data, skeleton) {\n        this.data = data;\n        this.skeleton = skeleton;\n        this.bone = skeleton.bones[data.bone.index];\n        this.inertia = data.inertia;\n        this.strength = data.strength;\n        this.damping = data.damping;\n        this.massInverse = data.massInverse;\n        this.wind = data.wind;\n        this.gravity = data.gravity;\n        this.mix = data.mix;\n    }\n    reset() {\n        this.remaining = 0;\n        this.lastTime = this.skeleton.time;\n        this._reset = true;\n        this.xOffset = 0;\n        this.xVelocity = 0;\n        this.yOffset = 0;\n        this.yVelocity = 0;\n        this.rotateOffset = 0;\n        this.rotateVelocity = 0;\n        this.scaleOffset = 0;\n        this.scaleVelocity = 0;\n    }\n    setToSetupPose() {\n        const data = this.data;\n        this.inertia = data.inertia;\n        this.strength = data.strength;\n        this.damping = data.damping;\n        this.massInverse = data.massInverse;\n        this.wind = data.wind;\n        this.gravity = data.gravity;\n        this.mix = data.mix;\n    }\n    isActive() {\n        return this.active;\n    }\n    /** Applies the constraint to the constrained bones. */\n    update(physics) {\n        const mix = this.mix;\n        if (mix == 0)\n            return;\n        const x = this.data.x > 0, y = this.data.y > 0, rotateOrShearX = this.data.rotate > 0 || this.data.shearX > 0, scaleX = this.data.scaleX > 0;\n        const bone = this.bone;\n        const l = bone.data.length;\n        switch (physics) {\n            case Physics.none:\n                return;\n            case Physics.reset:\n                this.reset();\n            // Fall through.\n            case Physics.update:\n                const skeleton = this.skeleton;\n                const delta = Math.max(this.skeleton.time - this.lastTime, 0);\n                this.remaining += delta;\n                this.lastTime = skeleton.time;\n                const bx = bone.worldX, by = bone.worldY;\n                if (this._reset) {\n                    this._reset = false;\n                    this.ux = bx;\n                    this.uy = by;\n                }\n                else {\n                    let a = this.remaining, i = this.inertia, t = this.data.step, f = this.skeleton.data.referenceScale, d = -1;\n                    let qx = this.data.limit * delta, qy = qx * Math.abs(skeleton.scaleY);\n                    qx *= Math.abs(skeleton.scaleX);\n                    if (x || y) {\n                        if (x) {\n                            const u = (this.ux - bx) * i;\n                            this.xOffset += u > qx ? qx : u < -qx ? -qx : u;\n                            this.ux = bx;\n                        }\n                        if (y) {\n                            const u = (this.uy - by) * i;\n                            this.yOffset += u > qy ? qy : u < -qy ? -qy : u;\n                            this.uy = by;\n                        }\n                        if (a >= t) {\n                            d = Math.pow(this.damping, 60 * t);\n                            const m = this.massInverse * t, e = this.strength, w = this.wind * f, g = (Skeleton.yDown ? -this.gravity : this.gravity) * f;\n                            do {\n                                if (x) {\n                                    this.xVelocity += (w - this.xOffset * e) * m;\n                                    this.xOffset += this.xVelocity * t;\n                                    this.xVelocity *= d;\n                                }\n                                if (y) {\n                                    this.yVelocity -= (g + this.yOffset * e) * m;\n                                    this.yOffset += this.yVelocity * t;\n                                    this.yVelocity *= d;\n                                }\n                                a -= t;\n                            } while (a >= t);\n                        }\n                        if (x)\n                            bone.worldX += this.xOffset * mix * this.data.x;\n                        if (y)\n                            bone.worldY += this.yOffset * mix * this.data.y;\n                    }\n                    if (rotateOrShearX || scaleX) {\n                        let ca = Math.atan2(bone.c, bone.a), c = 0, s = 0, mr = 0;\n                        let dx = this.cx - bone.worldX, dy = this.cy - bone.worldY;\n                        if (dx > qx)\n                            dx = qx;\n                        else if (dx < -qx) //\n                            dx = -qx;\n                        if (dy > qy)\n                            dy = qy;\n                        else if (dy < -qy) //\n                            dy = -qy;\n                        if (rotateOrShearX) {\n                            mr = (this.data.rotate + this.data.shearX) * mix;\n                            let r = Math.atan2(dy + this.ty, dx + this.tx) - ca - this.rotateOffset * mr;\n                            this.rotateOffset += (r - Math.ceil(r * MathUtils.invPI2 - 0.5) * MathUtils.PI2) * i;\n                            r = this.rotateOffset * mr + ca;\n                            c = Math.cos(r);\n                            s = Math.sin(r);\n                            if (scaleX) {\n                                r = l * bone.getWorldScaleX();\n                                if (r > 0)\n                                    this.scaleOffset += (dx * c + dy * s) * i / r;\n                            }\n                        }\n                        else {\n                            c = Math.cos(ca);\n                            s = Math.sin(ca);\n                            const r = l * bone.getWorldScaleX();\n                            if (r > 0)\n                                this.scaleOffset += (dx * c + dy * s) * i / r;\n                        }\n                        a = this.remaining;\n                        if (a >= t) {\n                            if (d == -1)\n                                d = Math.pow(this.damping, 60 * t);\n                            const m = this.massInverse * t, e = this.strength, w = this.wind, g = (Skeleton.yDown ? -this.gravity : this.gravity), h = l / f;\n                            while (true) {\n                                a -= t;\n                                if (scaleX) {\n                                    this.scaleVelocity += (w * c - g * s - this.scaleOffset * e) * m;\n                                    this.scaleOffset += this.scaleVelocity * t;\n                                    this.scaleVelocity *= d;\n                                }\n                                if (rotateOrShearX) {\n                                    this.rotateVelocity -= ((w * s + g * c) * h + this.rotateOffset * e) * m;\n                                    this.rotateOffset += this.rotateVelocity * t;\n                                    this.rotateVelocity *= d;\n                                    if (a < t)\n                                        break;\n                                    const r = this.rotateOffset * mr + ca;\n                                    c = Math.cos(r);\n                                    s = Math.sin(r);\n                                }\n                                else if (a < t) //\n                                    break;\n                            }\n                        }\n                    }\n                    this.remaining = a;\n                }\n                this.cx = bone.worldX;\n                this.cy = bone.worldY;\n                break;\n            case Physics.pose:\n                if (x)\n                    bone.worldX += this.xOffset * mix * this.data.x;\n                if (y)\n                    bone.worldY += this.yOffset * mix * this.data.y;\n        }\n        if (rotateOrShearX) {\n            let o = this.rotateOffset * mix, s = 0, c = 0, a = 0;\n            if (this.data.shearX > 0) {\n                let r = 0;\n                if (this.data.rotate > 0) {\n                    r = o * this.data.rotate;\n                    s = Math.sin(r);\n                    c = Math.cos(r);\n                    a = bone.b;\n                    bone.b = c * a - s * bone.d;\n                    bone.d = s * a + c * bone.d;\n                }\n                r += o * this.data.shearX;\n                s = Math.sin(r);\n                c = Math.cos(r);\n                a = bone.a;\n                bone.a = c * a - s * bone.c;\n                bone.c = s * a + c * bone.c;\n            }\n            else {\n                o *= this.data.rotate;\n                s = Math.sin(o);\n                c = Math.cos(o);\n                a = bone.a;\n                bone.a = c * a - s * bone.c;\n                bone.c = s * a + c * bone.c;\n                a = bone.b;\n                bone.b = c * a - s * bone.d;\n                bone.d = s * a + c * bone.d;\n            }\n        }\n        if (scaleX) {\n            const s = 1 + this.scaleOffset * mix * this.data.scaleX;\n            bone.a *= s;\n            bone.c *= s;\n        }\n        if (physics != Physics.pose) {\n            this.tx = l * bone.a;\n            this.ty = l * bone.c;\n        }\n        bone.updateAppliedTransform();\n    }\n    /** Translates the physics constraint so next {@link #update(Physics)} forces are applied as if the bone moved an additional\n     * amount in world space. */\n    translate(x, y) {\n        this.ux -= x;\n        this.uy -= y;\n        this.cx -= x;\n        this.cy -= y;\n    }\n    /** Rotates the physics constraint so next {@link #update(Physics)} forces are applied as if the bone rotated around the\n     * specified point in world space. */\n    rotate(x, y, degrees) {\n        const r = degrees * MathUtils.degRad, cos = Math.cos(r), sin = Math.sin(r);\n        const dx = this.cx - x, dy = this.cy - y;\n        this.translate(dx * cos - dy * sin - dx, dx * sin + dy * cos - dy);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { VertexAttachment } from \"./attachments/Attachment.js\";\nimport { Color } from \"./Utils.js\";\n/** Stores a slot's current pose. Slots organize attachments for {@link Skeleton#drawOrder} purposes and provide a place to store\n * state for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared\n * across multiple skeletons. */\nexport class Slot {\n    /** The slot's setup pose data. */\n    data;\n    /** The bone this slot belongs to. */\n    bone;\n    /** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\n     * color tinting. */\n    color;\n    /** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\n     * color's alpha is not used. */\n    darkColor = null;\n    attachment = null;\n    attachmentState = 0;\n    /** The index of the texture region to display when the slot's attachment has a {@link Sequence}. -1 represents the\n     * {@link Sequence#getSetupIndex()}. */\n    sequenceIndex = -1;\n    /** Values to deform the slot's attachment. For an unweighted mesh, the entries are local positions for each vertex. For a\n     * weighted mesh, the entries are an offset for each vertex which will be added to the mesh's local vertex positions.\n     *\n     * See {@link VertexAttachment#computeWorldVertices()} and {@link DeformTimeline}. */\n    deform = new Array();\n    constructor(data, bone) {\n        if (!data)\n            throw new Error(\"data cannot be null.\");\n        if (!bone)\n            throw new Error(\"bone cannot be null.\");\n        this.data = data;\n        this.bone = bone;\n        this.color = new Color();\n        this.darkColor = !data.darkColor ? null : new Color();\n        this.setToSetupPose();\n    }\n    /** The skeleton this slot belongs to. */\n    getSkeleton() {\n        return this.bone.skeleton;\n    }\n    /** The current attachment for the slot, or null if the slot has no attachment. */\n    getAttachment() {\n        return this.attachment;\n    }\n    /** Sets the slot's attachment and, if the attachment changed, resets {@link #sequenceIndex} and clears the {@link #deform}.\n     * The deform is not cleared if the old attachment has the same {@link VertexAttachment#getTimelineAttachment()} as the\n     * specified attachment. */\n    setAttachment(attachment) {\n        if (this.attachment == attachment)\n            return;\n        if (!(attachment instanceof VertexAttachment) || !(this.attachment instanceof VertexAttachment)\n            || attachment.timelineAttachment != this.attachment.timelineAttachment) {\n            this.deform.length = 0;\n        }\n        this.attachment = attachment;\n        this.sequenceIndex = -1;\n    }\n    /** Sets this slot to the setup pose. */\n    setToSetupPose() {\n        this.color.setFromColor(this.data.color);\n        if (this.darkColor)\n            this.darkColor.setFromColor(this.data.darkColor);\n        if (!this.data.attachmentName)\n            this.attachment = null;\n        else {\n            this.attachment = null;\n            this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Vector2, MathUtils } from \"./Utils.js\";\n/** Stores the current pose for a transform constraint. A transform constraint adjusts the world transform of the constrained\n * bones to match that of the target bone.\n *\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide. */\nexport class TransformConstraint {\n    /** The transform constraint's setup pose data. */\n    data;\n    /** The bones that will be modified by this transform constraint. */\n    bones;\n    /** The target bone whose world transform will be copied to the constrained bones. */\n    target;\n    mixRotate = 0;\n    mixX = 0;\n    mixY = 0;\n    mixScaleX = 0;\n    mixScaleY = 0;\n    mixShearY = 0;\n    temp = new Vector2();\n    active = false;\n    constructor(data, skeleton) {\n        if (!data)\n            throw new Error(\"data cannot be null.\");\n        if (!skeleton)\n            throw new Error(\"skeleton cannot be null.\");\n        this.data = data;\n        this.bones = new Array();\n        for (let i = 0; i < data.bones.length; i++) {\n            let bone = skeleton.findBone(data.bones[i].name);\n            if (!bone)\n                throw new Error(`Couldn't find bone ${data.bones[i].name}.`);\n            this.bones.push(bone);\n        }\n        let target = skeleton.findBone(data.target.name);\n        if (!target)\n            throw new Error(`Couldn't find target bone ${data.target.name}.`);\n        this.target = target;\n        this.mixRotate = data.mixRotate;\n        this.mixX = data.mixX;\n        this.mixY = data.mixY;\n        this.mixScaleX = data.mixScaleX;\n        this.mixScaleY = data.mixScaleY;\n        this.mixShearY = data.mixShearY;\n    }\n    isActive() {\n        return this.active;\n    }\n    setToSetupPose() {\n        const data = this.data;\n        this.mixRotate = data.mixRotate;\n        this.mixX = data.mixX;\n        this.mixY = data.mixY;\n        this.mixScaleX = data.mixScaleX;\n        this.mixScaleY = data.mixScaleY;\n        this.mixShearY = data.mixShearY;\n    }\n    update(physics) {\n        if (this.mixRotate == 0 && this.mixX == 0 && this.mixY == 0 && this.mixScaleX == 0 && this.mixScaleY == 0 && this.mixShearY == 0)\n            return;\n        if (this.data.local) {\n            if (this.data.relative)\n                this.applyRelativeLocal();\n            else\n                this.applyAbsoluteLocal();\n        }\n        else {\n            if (this.data.relative)\n                this.applyRelativeWorld();\n            else\n                this.applyAbsoluteWorld();\n        }\n    }\n    applyAbsoluteWorld() {\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX, mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n        let translate = mixX != 0 || mixY != 0;\n        let target = this.target;\n        let ta = target.a, tb = target.b, tc = target.c, td = target.d;\n        let degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\n        let offsetRotation = this.data.offsetRotation * degRadReflect;\n        let offsetShearY = this.data.offsetShearY * degRadReflect;\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            if (mixRotate != 0) {\n                let a = bone.a, b = bone.b, c = bone.c, d = bone.d;\n                let r = Math.atan2(tc, ta) - Math.atan2(c, a) + offsetRotation;\n                if (r > MathUtils.PI)\n                    r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI) //\n                    r += MathUtils.PI2;\n                r *= mixRotate;\n                let cos = Math.cos(r), sin = Math.sin(r);\n                bone.a = cos * a - sin * c;\n                bone.b = cos * b - sin * d;\n                bone.c = sin * a + cos * c;\n                bone.d = sin * b + cos * d;\n            }\n            if (translate) {\n                let temp = this.temp;\n                target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\n                bone.worldX += (temp.x - bone.worldX) * mixX;\n                bone.worldY += (temp.y - bone.worldY) * mixY;\n            }\n            if (mixScaleX != 0) {\n                let s = Math.sqrt(bone.a * bone.a + bone.c * bone.c);\n                if (s != 0)\n                    s = (s + (Math.sqrt(ta * ta + tc * tc) - s + this.data.offsetScaleX) * mixScaleX) / s;\n                bone.a *= s;\n                bone.c *= s;\n            }\n            if (mixScaleY != 0) {\n                let s = Math.sqrt(bone.b * bone.b + bone.d * bone.d);\n                if (s != 0)\n                    s = (s + (Math.sqrt(tb * tb + td * td) - s + this.data.offsetScaleY) * mixScaleY) / s;\n                bone.b *= s;\n                bone.d *= s;\n            }\n            if (mixShearY > 0) {\n                let b = bone.b, d = bone.d;\n                let by = Math.atan2(d, b);\n                let r = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(bone.c, bone.a));\n                if (r > MathUtils.PI)\n                    r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI) //\n                    r += MathUtils.PI2;\n                r = by + (r + offsetShearY) * mixShearY;\n                let s = Math.sqrt(b * b + d * d);\n                bone.b = Math.cos(r) * s;\n                bone.d = Math.sin(r) * s;\n            }\n            bone.updateAppliedTransform();\n        }\n    }\n    applyRelativeWorld() {\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX, mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n        let translate = mixX != 0 || mixY != 0;\n        let target = this.target;\n        let ta = target.a, tb = target.b, tc = target.c, td = target.d;\n        let degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\n        let offsetRotation = this.data.offsetRotation * degRadReflect, offsetShearY = this.data.offsetShearY * degRadReflect;\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            if (mixRotate != 0) {\n                let a = bone.a, b = bone.b, c = bone.c, d = bone.d;\n                let r = Math.atan2(tc, ta) + offsetRotation;\n                if (r > MathUtils.PI)\n                    r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI) //\n                    r += MathUtils.PI2;\n                r *= mixRotate;\n                let cos = Math.cos(r), sin = Math.sin(r);\n                bone.a = cos * a - sin * c;\n                bone.b = cos * b - sin * d;\n                bone.c = sin * a + cos * c;\n                bone.d = sin * b + cos * d;\n            }\n            if (translate) {\n                let temp = this.temp;\n                target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\n                bone.worldX += temp.x * mixX;\n                bone.worldY += temp.y * mixY;\n            }\n            if (mixScaleX != 0) {\n                let s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX) * mixScaleX + 1;\n                bone.a *= s;\n                bone.c *= s;\n            }\n            if (mixScaleY != 0) {\n                let s = (Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY) * mixScaleY + 1;\n                bone.b *= s;\n                bone.d *= s;\n            }\n            if (mixShearY > 0) {\n                let r = Math.atan2(td, tb) - Math.atan2(tc, ta);\n                if (r > MathUtils.PI)\n                    r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI) //\n                    r += MathUtils.PI2;\n                let b = bone.b, d = bone.d;\n                r = Math.atan2(d, b) + (r - MathUtils.PI / 2 + offsetShearY) * mixShearY;\n                let s = Math.sqrt(b * b + d * d);\n                bone.b = Math.cos(r) * s;\n                bone.d = Math.sin(r) * s;\n            }\n            bone.updateAppliedTransform();\n        }\n    }\n    applyAbsoluteLocal() {\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX, mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n        let target = this.target;\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            let rotation = bone.arotation;\n            if (mixRotate != 0)\n                rotation += (target.arotation - rotation + this.data.offsetRotation) * mixRotate;\n            let x = bone.ax, y = bone.ay;\n            x += (target.ax - x + this.data.offsetX) * mixX;\n            y += (target.ay - y + this.data.offsetY) * mixY;\n            let scaleX = bone.ascaleX, scaleY = bone.ascaleY;\n            if (mixScaleX != 0 && scaleX != 0)\n                scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * mixScaleX) / scaleX;\n            if (mixScaleY != 0 && scaleY != 0)\n                scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * mixScaleY) / scaleY;\n            let shearY = bone.ashearY;\n            if (mixShearY != 0)\n                shearY += (target.ashearY - shearY + this.data.offsetShearY) * mixShearY;\n            bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\n        }\n    }\n    applyRelativeLocal() {\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX, mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n        let target = this.target;\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            let rotation = bone.arotation + (target.arotation + this.data.offsetRotation) * mixRotate;\n            let x = bone.ax + (target.ax + this.data.offsetX) * mixX;\n            let y = bone.ay + (target.ay + this.data.offsetY) * mixY;\n            let scaleX = bone.ascaleX * (((target.ascaleX - 1 + this.data.offsetScaleX) * mixScaleX) + 1);\n            let scaleY = bone.ascaleY * (((target.ascaleY - 1 + this.data.offsetScaleY) * mixScaleY) + 1);\n            let shearY = bone.ashearY + (target.ashearY + this.data.offsetShearY) * mixShearY;\n            bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { ClippingAttachment } from \"./attachments/ClippingAttachment.js\";\nimport { MeshAttachment } from \"./attachments/MeshAttachment.js\";\nimport { PathAttachment } from \"./attachments/PathAttachment.js\";\nimport { RegionAttachment } from \"./attachments/RegionAttachment.js\";\nimport { Bone } from \"./Bone.js\";\nimport { IkConstraint } from \"./IkConstraint.js\";\nimport { PathConstraint } from \"./PathConstraint.js\";\nimport { PhysicsConstraint } from \"./PhysicsConstraint.js\";\nimport { Slot } from \"./Slot.js\";\nimport { TransformConstraint } from \"./TransformConstraint.js\";\nimport { Color, Utils, MathUtils, Vector2 } from \"./Utils.js\";\n/** Stores the current pose for a skeleton.\n *\n * See [Instance objects](http://esotericsoftware.com/spine-runtime-architecture#Instance-objects) in the Spine Runtimes Guide. */\nexport class Skeleton {\n    static quadTriangles = [0, 1, 2, 2, 3, 0];\n    static yDown = false;\n    /** The skeleton's setup pose data. */\n    data;\n    /** The skeleton's bones, sorted parent first. The root bone is always the first bone. */\n    bones;\n    /** The skeleton's slots in the setup pose draw order. */\n    slots;\n    /** The skeleton's slots in the order they should be drawn. The returned array may be modified to change the draw order. */\n    drawOrder;\n    /** The skeleton's IK constraints. */\n    ikConstraints;\n    /** The skeleton's transform constraints. */\n    transformConstraints;\n    /** The skeleton's path constraints. */\n    pathConstraints;\n    /** The skeleton's physics constraints. */\n    physicsConstraints;\n    /** The list of bones and constraints, sorted in the order they should be updated, as computed by {@link #updateCache()}. */\n    _updateCache = new Array();\n    /** The skeleton's current skin. May be null. */\n    skin = null;\n    /** The color to tint all the skeleton's attachments. */\n    color;\n    /** Scales the entire skeleton on the X axis. This affects all bones, even if the bone's transform mode disallows scale\n      * inheritance. */\n    scaleX = 1;\n    /** Scales the entire skeleton on the Y axis. This affects all bones, even if the bone's transform mode disallows scale\n      * inheritance. */\n    _scaleY = 1;\n    get scaleY() {\n        return Skeleton.yDown ? -this._scaleY : this._scaleY;\n    }\n    set scaleY(scaleY) {\n        this._scaleY = scaleY;\n    }\n    /** Sets the skeleton X position, which is added to the root bone worldX position. */\n    x = 0;\n    /** Sets the skeleton Y position, which is added to the root bone worldY position. */\n    y = 0;\n    /** Returns the skeleton's time. This is used for time-based manipulations, such as {@link PhysicsConstraint}.\n     * <p>\n     * See {@link #update(float)}. */\n    time = 0;\n    constructor(data) {\n        if (!data)\n            throw new Error(\"data cannot be null.\");\n        this.data = data;\n        this.bones = new Array();\n        for (let i = 0; i < data.bones.length; i++) {\n            let boneData = data.bones[i];\n            let bone;\n            if (!boneData.parent)\n                bone = new Bone(boneData, this, null);\n            else {\n                let parent = this.bones[boneData.parent.index];\n                bone = new Bone(boneData, this, parent);\n                parent.children.push(bone);\n            }\n            this.bones.push(bone);\n        }\n        this.slots = new Array();\n        this.drawOrder = new Array();\n        for (let i = 0; i < data.slots.length; i++) {\n            let slotData = data.slots[i];\n            let bone = this.bones[slotData.boneData.index];\n            let slot = new Slot(slotData, bone);\n            this.slots.push(slot);\n            this.drawOrder.push(slot);\n        }\n        this.ikConstraints = new Array();\n        for (let i = 0; i < data.ikConstraints.length; i++) {\n            let ikConstraintData = data.ikConstraints[i];\n            this.ikConstraints.push(new IkConstraint(ikConstraintData, this));\n        }\n        this.transformConstraints = new Array();\n        for (let i = 0; i < data.transformConstraints.length; i++) {\n            let transformConstraintData = data.transformConstraints[i];\n            this.transformConstraints.push(new TransformConstraint(transformConstraintData, this));\n        }\n        this.pathConstraints = new Array();\n        for (let i = 0; i < data.pathConstraints.length; i++) {\n            let pathConstraintData = data.pathConstraints[i];\n            this.pathConstraints.push(new PathConstraint(pathConstraintData, this));\n        }\n        this.physicsConstraints = new Array();\n        for (let i = 0; i < data.physicsConstraints.length; i++) {\n            let physicsConstraintData = data.physicsConstraints[i];\n            this.physicsConstraints.push(new PhysicsConstraint(physicsConstraintData, this));\n        }\n        this.color = new Color(1, 1, 1, 1);\n        this.updateCache();\n    }\n    /** Caches information about bones and constraints. Must be called if the {@link #getSkin()} is modified or if bones,\n     * constraints, or weighted path attachments are added or removed. */\n    updateCache() {\n        let updateCache = this._updateCache;\n        updateCache.length = 0;\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            bone.sorted = bone.data.skinRequired;\n            bone.active = !bone.sorted;\n        }\n        if (this.skin) {\n            let skinBones = this.skin.bones;\n            for (let i = 0, n = this.skin.bones.length; i < n; i++) {\n                let bone = this.bones[skinBones[i].index];\n                do {\n                    bone.sorted = false;\n                    bone.active = true;\n                    bone = bone.parent;\n                } while (bone);\n            }\n        }\n        // IK first, lowest hierarchy depth first.\n        let ikConstraints = this.ikConstraints;\n        let transformConstraints = this.transformConstraints;\n        let pathConstraints = this.pathConstraints;\n        let physicsConstraints = this.physicsConstraints;\n        let ikCount = ikConstraints.length, transformCount = transformConstraints.length, pathCount = pathConstraints.length, physicsCount = this.physicsConstraints.length;\n        let constraintCount = ikCount + transformCount + pathCount + physicsCount;\n        outer: for (let i = 0; i < constraintCount; i++) {\n            for (let ii = 0; ii < ikCount; ii++) {\n                let constraint = ikConstraints[ii];\n                if (constraint.data.order == i) {\n                    this.sortIkConstraint(constraint);\n                    continue outer;\n                }\n            }\n            for (let ii = 0; ii < transformCount; ii++) {\n                let constraint = transformConstraints[ii];\n                if (constraint.data.order == i) {\n                    this.sortTransformConstraint(constraint);\n                    continue outer;\n                }\n            }\n            for (let ii = 0; ii < pathCount; ii++) {\n                let constraint = pathConstraints[ii];\n                if (constraint.data.order == i) {\n                    this.sortPathConstraint(constraint);\n                    continue outer;\n                }\n            }\n            for (let ii = 0; ii < physicsCount; ii++) {\n                const constraint = physicsConstraints[ii];\n                if (constraint.data.order == i) {\n                    this.sortPhysicsConstraint(constraint);\n                    continue outer;\n                }\n            }\n        }\n        for (let i = 0, n = bones.length; i < n; i++)\n            this.sortBone(bones[i]);\n    }\n    sortIkConstraint(constraint) {\n        constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\n        if (!constraint.active)\n            return;\n        let target = constraint.target;\n        this.sortBone(target);\n        let constrained = constraint.bones;\n        let parent = constrained[0];\n        this.sortBone(parent);\n        if (constrained.length == 1) {\n            this._updateCache.push(constraint);\n            this.sortReset(parent.children);\n        }\n        else {\n            let child = constrained[constrained.length - 1];\n            this.sortBone(child);\n            this._updateCache.push(constraint);\n            this.sortReset(parent.children);\n            child.sorted = true;\n        }\n    }\n    sortPathConstraint(constraint) {\n        constraint.active = constraint.target.bone.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\n        if (!constraint.active)\n            return;\n        let slot = constraint.target;\n        let slotIndex = slot.data.index;\n        let slotBone = slot.bone;\n        if (this.skin)\n            this.sortPathConstraintAttachment(this.skin, slotIndex, slotBone);\n        if (this.data.defaultSkin && this.data.defaultSkin != this.skin)\n            this.sortPathConstraintAttachment(this.data.defaultSkin, slotIndex, slotBone);\n        for (let i = 0, n = this.data.skins.length; i < n; i++)\n            this.sortPathConstraintAttachment(this.data.skins[i], slotIndex, slotBone);\n        let attachment = slot.getAttachment();\n        if (attachment instanceof PathAttachment)\n            this.sortPathConstraintAttachmentWith(attachment, slotBone);\n        let constrained = constraint.bones;\n        let boneCount = constrained.length;\n        for (let i = 0; i < boneCount; i++)\n            this.sortBone(constrained[i]);\n        this._updateCache.push(constraint);\n        for (let i = 0; i < boneCount; i++)\n            this.sortReset(constrained[i].children);\n        for (let i = 0; i < boneCount; i++)\n            constrained[i].sorted = true;\n    }\n    sortTransformConstraint(constraint) {\n        constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\n        if (!constraint.active)\n            return;\n        this.sortBone(constraint.target);\n        let constrained = constraint.bones;\n        let boneCount = constrained.length;\n        if (constraint.data.local) {\n            for (let i = 0; i < boneCount; i++) {\n                let child = constrained[i];\n                this.sortBone(child.parent);\n                this.sortBone(child);\n            }\n        }\n        else {\n            for (let i = 0; i < boneCount; i++) {\n                this.sortBone(constrained[i]);\n            }\n        }\n        this._updateCache.push(constraint);\n        for (let i = 0; i < boneCount; i++)\n            this.sortReset(constrained[i].children);\n        for (let i = 0; i < boneCount; i++)\n            constrained[i].sorted = true;\n    }\n    sortPathConstraintAttachment(skin, slotIndex, slotBone) {\n        let attachments = skin.attachments[slotIndex];\n        if (!attachments)\n            return;\n        for (let key in attachments) {\n            this.sortPathConstraintAttachmentWith(attachments[key], slotBone);\n        }\n    }\n    sortPathConstraintAttachmentWith(attachment, slotBone) {\n        if (!(attachment instanceof PathAttachment))\n            return;\n        let pathBones = attachment.bones;\n        if (!pathBones)\n            this.sortBone(slotBone);\n        else {\n            let bones = this.bones;\n            for (let i = 0, n = pathBones.length; i < n;) {\n                let nn = pathBones[i++];\n                nn += i;\n                while (i < nn)\n                    this.sortBone(bones[pathBones[i++]]);\n            }\n        }\n    }\n    sortPhysicsConstraint(constraint) {\n        const bone = constraint.bone;\n        constraint.active = bone.active && (!constraint.data.skinRequired || (this.skin != null && Utils.contains(this.skin.constraints, constraint.data, true)));\n        if (!constraint.active)\n            return;\n        this.sortBone(bone);\n        this._updateCache.push(constraint);\n        this.sortReset(bone.children);\n        bone.sorted = true;\n    }\n    sortBone(bone) {\n        if (!bone)\n            return;\n        if (bone.sorted)\n            return;\n        let parent = bone.parent;\n        if (parent)\n            this.sortBone(parent);\n        bone.sorted = true;\n        this._updateCache.push(bone);\n    }\n    sortReset(bones) {\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            if (!bone.active)\n                continue;\n            if (bone.sorted)\n                this.sortReset(bone.children);\n            bone.sorted = false;\n        }\n    }\n    /** Updates the world transform for each bone and applies all constraints.\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide. */\n    updateWorldTransform(physics) {\n        if (physics === undefined || physics === null)\n            throw new Error(\"physics is undefined\");\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            bone.ax = bone.x;\n            bone.ay = bone.y;\n            bone.arotation = bone.rotation;\n            bone.ascaleX = bone.scaleX;\n            bone.ascaleY = bone.scaleY;\n            bone.ashearX = bone.shearX;\n            bone.ashearY = bone.shearY;\n        }\n        let updateCache = this._updateCache;\n        for (let i = 0, n = updateCache.length; i < n; i++)\n            updateCache[i].update(physics);\n    }\n    updateWorldTransformWith(physics, parent) {\n        // Apply the parent bone transform to the root bone. The root bone always inherits scale, rotation and reflection.\n        let rootBone = this.getRootBone();\n        if (!rootBone)\n            throw new Error(\"Root bone must not be null.\");\n        let pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;\n        rootBone.worldX = pa * this.x + pb * this.y + parent.worldX;\n        rootBone.worldY = pc * this.x + pd * this.y + parent.worldY;\n        const rx = (rootBone.rotation + rootBone.shearX) * MathUtils.degRad;\n        const ry = (rootBone.rotation + 90 + rootBone.shearY) * MathUtils.degRad;\n        const la = Math.cos(rx) * rootBone.scaleX;\n        const lb = Math.cos(ry) * rootBone.scaleY;\n        const lc = Math.sin(rx) * rootBone.scaleX;\n        const ld = Math.sin(ry) * rootBone.scaleY;\n        rootBone.a = (pa * la + pb * lc) * this.scaleX;\n        rootBone.b = (pa * lb + pb * ld) * this.scaleX;\n        rootBone.c = (pc * la + pd * lc) * this.scaleY;\n        rootBone.d = (pc * lb + pd * ld) * this.scaleY;\n        // Update everything except root bone.\n        let updateCache = this._updateCache;\n        for (let i = 0, n = updateCache.length; i < n; i++) {\n            let updatable = updateCache[i];\n            if (updatable != rootBone)\n                updatable.update(physics);\n        }\n    }\n    /** Sets the bones, constraints, and slots to their setup pose values. */\n    setToSetupPose() {\n        this.setBonesToSetupPose();\n        this.setSlotsToSetupPose();\n    }\n    /** Sets the bones and constraints to their setup pose values. */\n    setBonesToSetupPose() {\n        for (const bone of this.bones)\n            bone.setToSetupPose();\n        for (const constraint of this.ikConstraints)\n            constraint.setToSetupPose();\n        for (const constraint of this.transformConstraints)\n            constraint.setToSetupPose();\n        for (const constraint of this.pathConstraints)\n            constraint.setToSetupPose();\n        for (const constraint of this.physicsConstraints)\n            constraint.setToSetupPose();\n    }\n    /** Sets the slots and draw order to their setup pose values. */\n    setSlotsToSetupPose() {\n        let slots = this.slots;\n        Utils.arrayCopy(slots, 0, this.drawOrder, 0, slots.length);\n        for (let i = 0, n = slots.length; i < n; i++)\n            slots[i].setToSetupPose();\n    }\n    /** @returns May return null. */\n    getRootBone() {\n        if (this.bones.length == 0)\n            return null;\n        return this.bones[0];\n    }\n    /** @returns May be null. */\n    findBone(boneName) {\n        if (!boneName)\n            throw new Error(\"boneName cannot be null.\");\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            if (bone.data.name == boneName)\n                return bone;\n        }\n        return null;\n    }\n    /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\n     * repeatedly.\n     * @returns May be null. */\n    findSlot(slotName) {\n        if (!slotName)\n            throw new Error(\"slotName cannot be null.\");\n        let slots = this.slots;\n        for (let i = 0, n = slots.length; i < n; i++) {\n            let slot = slots[i];\n            if (slot.data.name == slotName)\n                return slot;\n        }\n        return null;\n    }\n    /** Sets a skin by name.\n     *\n     * See {@link #setSkin()}. */\n    setSkinByName(skinName) {\n        let skin = this.data.findSkin(skinName);\n        if (!skin)\n            throw new Error(\"Skin not found: \" + skinName);\n        this.setSkin(skin);\n    }\n    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#defaultSkin default skin}. If the\n     * skin is changed, {@link #updateCache()} is called.\n     *\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\n     * old skin, each slot's setup mode attachment is attached from the new skin.\n     *\n     * After changing the skin, the visible attachments can be reset to those attached in the setup pose by calling\n     * {@link #setSlotsToSetupPose()}. Also, often {@link AnimationState#apply()} is called before the next time the\n     * skeleton is rendered to allow any attachment keys in the current animation(s) to hide or show attachments from the new skin.\n     * @param newSkin May be null. */\n    setSkin(newSkin) {\n        if (newSkin == this.skin)\n            return;\n        if (newSkin) {\n            if (this.skin)\n                newSkin.attachAll(this, this.skin);\n            else {\n                let slots = this.slots;\n                for (let i = 0, n = slots.length; i < n; i++) {\n                    let slot = slots[i];\n                    let name = slot.data.attachmentName;\n                    if (name) {\n                        let attachment = newSkin.getAttachment(i, name);\n                        if (attachment)\n                            slot.setAttachment(attachment);\n                    }\n                }\n            }\n        }\n        this.skin = newSkin;\n        this.updateCache();\n    }\n    /** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot name and attachment\n     * name.\n     *\n     * See {@link #getAttachment()}.\n     * @returns May be null. */\n    getAttachmentByName(slotName, attachmentName) {\n        let slot = this.data.findSlot(slotName);\n        if (!slot)\n            throw new Error(`Can't find slot with name ${slotName}`);\n        return this.getAttachment(slot.index, attachmentName);\n    }\n    /** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot index and\n     * attachment name. First the skin is checked and if the attachment was not found, the default skin is checked.\n     *\n     * See [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide.\n     * @returns May be null. */\n    getAttachment(slotIndex, attachmentName) {\n        if (!attachmentName)\n            throw new Error(\"attachmentName cannot be null.\");\n        if (this.skin) {\n            let attachment = this.skin.getAttachment(slotIndex, attachmentName);\n            if (attachment)\n                return attachment;\n        }\n        if (this.data.defaultSkin)\n            return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\n        return null;\n    }\n    /** A convenience method to set an attachment by finding the slot with {@link #findSlot()}, finding the attachment with\n     * {@link #getAttachment()}, then setting the slot's {@link Slot#attachment}.\n     * @param attachmentName May be null to clear the slot's attachment. */\n    setAttachment(slotName, attachmentName) {\n        if (!slotName)\n            throw new Error(\"slotName cannot be null.\");\n        let slots = this.slots;\n        for (let i = 0, n = slots.length; i < n; i++) {\n            let slot = slots[i];\n            if (slot.data.name == slotName) {\n                let attachment = null;\n                if (attachmentName) {\n                    attachment = this.getAttachment(i, attachmentName);\n                    if (!attachment)\n                        throw new Error(\"Attachment not found: \" + attachmentName + \", for slot: \" + slotName);\n                }\n                slot.setAttachment(attachment);\n                return;\n            }\n        }\n        throw new Error(\"Slot not found: \" + slotName);\n    }\n    /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\n     * than to call it repeatedly.\n     * @return May be null. */\n    findIkConstraint(constraintName) {\n        if (!constraintName)\n            throw new Error(\"constraintName cannot be null.\");\n        return this.ikConstraints.find((constraint) => constraint.data.name == constraintName) ?? null;\n    }\n    /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\n     * this method than to call it repeatedly.\n     * @return May be null. */\n    findTransformConstraint(constraintName) {\n        if (!constraintName)\n            throw new Error(\"constraintName cannot be null.\");\n        return this.transformConstraints.find((constraint) => constraint.data.name == constraintName) ?? null;\n    }\n    /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\n     * than to call it repeatedly.\n     * @return May be null. */\n    findPathConstraint(constraintName) {\n        if (!constraintName)\n            throw new Error(\"constraintName cannot be null.\");\n        return this.pathConstraints.find((constraint) => constraint.data.name == constraintName) ?? null;\n    }\n    /** Finds a physics constraint by comparing each physics constraint's name. It is more efficient to cache the results of this\n     * method than to call it repeatedly. */\n    findPhysicsConstraint(constraintName) {\n        if (constraintName == null)\n            throw new Error(\"constraintName cannot be null.\");\n        return this.physicsConstraints.find((constraint) => constraint.data.name == constraintName) ?? null;\n    }\n    /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose as `{ x: number, y: number, width: number, height: number }`.\n     * Note that this method will create temporary objects which can add to garbage collection pressure. Use `getBounds()` if garbage collection is a concern. */\n    getBoundsRect() {\n        let offset = new Vector2();\n        let size = new Vector2();\n        this.getBounds(offset, size);\n        return { x: offset.x, y: offset.y, width: size.x, height: size.y };\n    }\n    /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.\n     * @param offset An output value, the distance from the skeleton origin to the bottom left corner of the AABB.\n     * @param size An output value, the width and height of the AABB.\n     * @param temp Working memory to temporarily store attachments' computed world vertices.\n     * @param clipper {@link SkeletonClipping} to use. If <code>null</code>, no clipping is applied. */\n    getBounds(offset, size, temp = new Array(2), clipper = null) {\n        if (!offset)\n            throw new Error(\"offset cannot be null.\");\n        if (!size)\n            throw new Error(\"size cannot be null.\");\n        let drawOrder = this.drawOrder;\n        let minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\n        for (let i = 0, n = drawOrder.length; i < n; i++) {\n            let slot = drawOrder[i];\n            if (!slot.bone.active)\n                continue;\n            let verticesLength = 0;\n            let vertices = null;\n            let triangles = null;\n            let attachment = slot.getAttachment();\n            if (attachment instanceof RegionAttachment) {\n                verticesLength = 8;\n                vertices = Utils.setArraySize(temp, verticesLength, 0);\n                attachment.computeWorldVertices(slot, vertices, 0, 2);\n                triangles = Skeleton.quadTriangles;\n            }\n            else if (attachment instanceof MeshAttachment) {\n                let mesh = attachment;\n                verticesLength = mesh.worldVerticesLength;\n                vertices = Utils.setArraySize(temp, verticesLength, 0);\n                mesh.computeWorldVertices(slot, 0, verticesLength, vertices, 0, 2);\n                triangles = mesh.triangles;\n            }\n            else if (attachment instanceof ClippingAttachment && clipper != null) {\n                clipper.clipStart(slot, attachment);\n                continue;\n            }\n            if (vertices && triangles) {\n                if (clipper != null && clipper.isClipping()) {\n                    clipper.clipTriangles(vertices, triangles, triangles.length);\n                    vertices = clipper.clippedVertices;\n                    verticesLength = clipper.clippedVertices.length;\n                }\n                for (let ii = 0, nn = vertices.length; ii < nn; ii += 2) {\n                    let x = vertices[ii], y = vertices[ii + 1];\n                    minX = Math.min(minX, x);\n                    minY = Math.min(minY, y);\n                    maxX = Math.max(maxX, x);\n                    maxY = Math.max(maxY, y);\n                }\n            }\n            if (clipper != null)\n                clipper.clipEndWithSlot(slot);\n        }\n        if (clipper != null)\n            clipper.clipEnd();\n        offset.set(minX, minY);\n        size.set(maxX - minX, maxY - minY);\n    }\n    /** Increments the skeleton's {@link #time}. */\n    update(delta) {\n        this.time += delta;\n    }\n    physicsTranslate(x, y) {\n        const physicsConstraints = this.physicsConstraints;\n        for (let i = 0, n = physicsConstraints.length; i < n; i++)\n            physicsConstraints[i].translate(x, y);\n    }\n    /** Calls {@link PhysicsConstraint#rotate(float, float, float)} for each physics constraint. */\n    physicsRotate(x, y, degrees) {\n        const physicsConstraints = this.physicsConstraints;\n        for (let i = 0, n = physicsConstraints.length; i < n; i++)\n            physicsConstraints[i].rotate(x, y, degrees);\n    }\n}\n/** Determines how physics and other non-deterministic updates are applied. */\nexport var Physics;\n(function (Physics) {\n    /** Physics are not updated or applied. */\n    Physics[Physics[\"none\"] = 0] = \"none\";\n    /** Physics are reset to the current pose. */\n    Physics[Physics[\"reset\"] = 1] = \"reset\";\n    /** Physics are updated and the pose from physics is applied. */\n    Physics[Physics[\"update\"] = 2] = \"update\";\n    /** Physics are not updated but the pose from physics is applied. */\n    Physics[Physics[\"pose\"] = 3] = \"pose\";\n})(Physics || (Physics = {}));\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { ConstraintData } from \"./ConstraintData.js\";\n/** Stores the setup pose for a {@link PhysicsConstraint}.\n * <p>\n * See <a href=\"http://esotericsoftware.com/spine-physics-constraints\">Physics constraints</a> in the Spine User Guide. */\nexport class PhysicsConstraintData extends ConstraintData {\n    _bone = null;\n    /** The bone constrained by this physics constraint. */\n    set bone(boneData) { this._bone = boneData; }\n    get bone() {\n        if (!this._bone)\n            throw new Error(\"BoneData not set.\");\n        else\n            return this._bone;\n    }\n    x = 0;\n    y = 0;\n    rotate = 0;\n    scaleX = 0;\n    shearX = 0;\n    limit = 0;\n    step = 0;\n    inertia = 0;\n    strength = 0;\n    damping = 0;\n    massInverse = 0;\n    wind = 0;\n    gravity = 0;\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained poses. */\n    mix = 0;\n    inertiaGlobal = false;\n    strengthGlobal = false;\n    dampingGlobal = false;\n    massGlobal = false;\n    windGlobal = false;\n    gravityGlobal = false;\n    mixGlobal = false;\n    constructor(name) {\n        super(name, 0, false);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGh5c2ljc0NvbnN0cmFpbnREYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1BoeXNpY3NDb25zdHJhaW50RGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytFQTJCK0U7QUFHL0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBR3JEOzswSEFFMEg7QUFDMUgsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGNBQWM7SUFDaEQsS0FBSyxHQUFvQixJQUFJLENBQUM7SUFDdEMsdURBQXVEO0lBQ3ZELElBQVcsSUFBSSxDQUFFLFFBQWtCLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQy9ELElBQVcsSUFBSTtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTs7WUFDaEQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNOLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDWCxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNYLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDVixJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ1QsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNaLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDYixPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ1osV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQixJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ1QsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNaLGdHQUFnRztJQUNoRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ1IsYUFBYSxHQUFHLEtBQUssQ0FBQztJQUN0QixjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLGFBQWEsR0FBRyxLQUFLLENBQUM7SUFDdEIsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUNuQixVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQ25CLGFBQWEsR0FBRyxLQUFLLENBQUM7SUFDdEIsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUVsQixZQUFhLElBQVk7UUFDeEIsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogU3BpbmUgUnVudGltZXMgTGljZW5zZSBBZ3JlZW1lbnRcbiAqIExhc3QgdXBkYXRlZCBKdWx5IDI4LCAyMDIzLiBSZXBsYWNlcyBhbGwgcHJpb3IgdmVyc2lvbnMuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLTIwMjMsIEVzb3RlcmljIFNvZnR3YXJlIExMQ1xuICpcbiAqIEludGVncmF0aW9uIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpbnRvIHNvZnR3YXJlIG9yIG90aGVyd2lzZSBjcmVhdGluZ1xuICogZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgaXMgcGVybWl0dGVkIHVuZGVyIHRoZSB0ZXJtcyBhbmRcbiAqIGNvbmRpdGlvbnMgb2YgU2VjdGlvbiAyIG9mIHRoZSBTcGluZSBFZGl0b3IgTGljZW5zZSBBZ3JlZW1lbnQ6XG4gKiBodHRwOi8vZXNvdGVyaWNzb2Z0d2FyZS5jb20vc3BpbmUtZWRpdG9yLWxpY2Vuc2VcbiAqXG4gKiBPdGhlcndpc2UsIGl0IGlzIHBlcm1pdHRlZCB0byBpbnRlZ3JhdGUgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3JcbiAqIG90aGVyd2lzZSBjcmVhdGUgZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgKGNvbGxlY3RpdmVseSxcbiAqIFwiUHJvZHVjdHNcIiksIHByb3ZpZGVkIHRoYXQgZWFjaCB1c2VyIG9mIHRoZSBQcm9kdWN0cyBtdXN0IG9idGFpbiB0aGVpciBvd25cbiAqIFNwaW5lIEVkaXRvciBsaWNlbnNlIGFuZCByZWRpc3RyaWJ1dGlvbiBvZiB0aGUgUHJvZHVjdHMgaW4gYW55IGZvcm0gbXVzdFxuICogaW5jbHVkZSB0aGlzIGxpY2Vuc2UgYW5kIGNvcHlyaWdodCBub3RpY2UuXG4gKlxuICogVEhFIFNQSU5FIFJVTlRJTUVTIEFSRSBQUk9WSURFRCBCWSBFU09URVJJQyBTT0ZUV0FSRSBMTEMgXCJBUyBJU1wiIEFORCBBTllcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEVTT1RFUklDIFNPRlRXQVJFIExMQyBCRSBMSUFCTEUgRk9SIEFOWVxuICogRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbiAqIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUyxcbiAqIEJVU0lORVNTIElOVEVSUlVQVElPTiwgT1IgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFMpIEhPV0VWRVIgQ0FVU0VEIEFORFxuICogT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSEVcbiAqIFNQSU5FIFJVTlRJTUVTLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgeyBCb25lRGF0YSB9IGZyb20gXCIuL0JvbmVEYXRhLmpzXCI7XG5pbXBvcnQgeyBDb25zdHJhaW50RGF0YSB9IGZyb20gXCIuL0NvbnN0cmFpbnREYXRhLmpzXCI7XG5cblxuLyoqIFN0b3JlcyB0aGUgc2V0dXAgcG9zZSBmb3IgYSB7QGxpbmsgUGh5c2ljc0NvbnN0cmFpbnR9LlxuICogPHA+XG4gKiBTZWUgPGEgaHJlZj1cImh0dHA6Ly9lc290ZXJpY3NvZnR3YXJlLmNvbS9zcGluZS1waHlzaWNzLWNvbnN0cmFpbnRzXCI+UGh5c2ljcyBjb25zdHJhaW50czwvYT4gaW4gdGhlIFNwaW5lIFVzZXIgR3VpZGUuICovXG5leHBvcnQgY2xhc3MgUGh5c2ljc0NvbnN0cmFpbnREYXRhIGV4dGVuZHMgQ29uc3RyYWludERhdGEge1xuXHRwcml2YXRlIF9ib25lOiBCb25lRGF0YSB8IG51bGwgPSBudWxsO1xuXHQvKiogVGhlIGJvbmUgY29uc3RyYWluZWQgYnkgdGhpcyBwaHlzaWNzIGNvbnN0cmFpbnQuICovXG5cdHB1YmxpYyBzZXQgYm9uZSAoYm9uZURhdGE6IEJvbmVEYXRhKSB7IHRoaXMuX2JvbmUgPSBib25lRGF0YTsgfVxuXHRwdWJsaWMgZ2V0IGJvbmUgKCkge1xuXHRcdGlmICghdGhpcy5fYm9uZSkgdGhyb3cgbmV3IEVycm9yKFwiQm9uZURhdGEgbm90IHNldC5cIilcblx0XHRlbHNlIHJldHVybiB0aGlzLl9ib25lO1xuXHR9XG5cblx0eCA9IDA7XG5cdHkgPSAwO1xuXHRyb3RhdGUgPSAwO1xuXHRzY2FsZVggPSAwO1xuXHRzaGVhclggPSAwO1xuXHRsaW1pdCA9IDA7XG5cdHN0ZXAgPSAwO1xuXHRpbmVydGlhID0gMDtcblx0c3RyZW5ndGggPSAwO1xuXHRkYW1waW5nID0gMDtcblx0bWFzc0ludmVyc2UgPSAwO1xuXHR3aW5kID0gMDtcblx0Z3Jhdml0eSA9IDA7XG5cdC8qKiBBIHBlcmNlbnRhZ2UgKDAtMSkgdGhhdCBjb250cm9scyB0aGUgbWl4IGJldHdlZW4gdGhlIGNvbnN0cmFpbmVkIGFuZCB1bmNvbnN0cmFpbmVkIHBvc2VzLiAqL1xuXHRtaXggPSAwO1xuXHRpbmVydGlhR2xvYmFsID0gZmFsc2U7XG5cdHN0cmVuZ3RoR2xvYmFsID0gZmFsc2U7XG5cdGRhbXBpbmdHbG9iYWwgPSBmYWxzZTtcblx0bWFzc0dsb2JhbCA9IGZhbHNlO1xuXHR3aW5kR2xvYmFsID0gZmFsc2U7XG5cdGdyYXZpdHlHbG9iYWwgPSBmYWxzZTtcblx0bWl4R2xvYmFsID0gZmFsc2U7XG5cblx0Y29uc3RydWN0b3IgKG5hbWU6IHN0cmluZykge1xuXHRcdHN1cGVyKG5hbWUsIDAsIGZhbHNlKTtcblx0fVxufVxuIl19", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n/** Stores the setup pose and all of the stateless data for a skeleton.\n *\n * See [Data objects](http://esotericsoftware.com/spine-runtime-architecture#Data-objects) in the Spine Runtimes\n * Guide. */\nexport class SkeletonData {\n    /** The skeleton's name, which by default is the name of the skeleton data file, if possible. May be null. */\n    name = null;\n    /** The skeleton's bones, sorted parent first. The root bone is always the first bone. */\n    bones = new Array(); // Ordered parents first.\n    /** The skeleton's slots in the setup pose draw order. */\n    slots = new Array(); // Setup pose draw order.\n    skins = new Array();\n    /** The skeleton's default skin. By default this skin contains all attachments that were not in a skin in Spine.\n     *\n     * See {@link Skeleton#getAttachmentByName()}.\n     * May be null. */\n    defaultSkin = null;\n    /** The skeleton's events. */\n    events = new Array();\n    /** The skeleton's animations. */\n    animations = new Array();\n    /** The skeleton's IK constraints. */\n    ikConstraints = new Array();\n    /** The skeleton's transform constraints. */\n    transformConstraints = new Array();\n    /** The skeleton's path constraints. */\n    pathConstraints = new Array();\n    /** The skeleton's physics constraints. */\n    physicsConstraints = new Array();\n    /** The X coordinate of the skeleton's axis aligned bounding box in the setup pose. */\n    x = 0;\n    /** The Y coordinate of the skeleton's axis aligned bounding box in the setup pose. */\n    y = 0;\n    /** The width of the skeleton's axis aligned bounding box in the setup pose. */\n    width = 0;\n    /** The height of the skeleton's axis aligned bounding box in the setup pose. */\n    height = 0;\n    /** Baseline scale factor for applying distance-dependent effects on non-scalable properties, such as angle or scale. Default\n     * is 100. */\n    referenceScale = 100;\n    /** The Spine version used to export the skeleton data, or null. */\n    version = null;\n    /** The skeleton data hash. This value will change if any of the skeleton data has changed. May be null. */\n    hash = null;\n    // Nonessential\n    /** The dopesheet FPS in Spine. Available only when nonessential data was exported. */\n    fps = 0;\n    /** The path to the images directory as defined in Spine. Available only when nonessential data was exported. May be null. */\n    imagesPath = null;\n    /** The path to the audio directory as defined in Spine. Available only when nonessential data was exported. May be null. */\n    audioPath = null;\n    /** Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */\n    findBone(boneName) {\n        if (!boneName)\n            throw new Error(\"boneName cannot be null.\");\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            if (bone.name == boneName)\n                return bone;\n        }\n        return null;\n    }\n    /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */\n    findSlot(slotName) {\n        if (!slotName)\n            throw new Error(\"slotName cannot be null.\");\n        let slots = this.slots;\n        for (let i = 0, n = slots.length; i < n; i++) {\n            let slot = slots[i];\n            if (slot.name == slotName)\n                return slot;\n        }\n        return null;\n    }\n    /** Finds a skin by comparing each skin's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */\n    findSkin(skinName) {\n        if (!skinName)\n            throw new Error(\"skinName cannot be null.\");\n        let skins = this.skins;\n        for (let i = 0, n = skins.length; i < n; i++) {\n            let skin = skins[i];\n            if (skin.name == skinName)\n                return skin;\n        }\n        return null;\n    }\n    /** Finds an event by comparing each events's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */\n    findEvent(eventDataName) {\n        if (!eventDataName)\n            throw new Error(\"eventDataName cannot be null.\");\n        let events = this.events;\n        for (let i = 0, n = events.length; i < n; i++) {\n            let event = events[i];\n            if (event.name == eventDataName)\n                return event;\n        }\n        return null;\n    }\n    /** Finds an animation by comparing each animation's name. It is more efficient to cache the results of this method than to\n     * call it multiple times.\n     * @returns May be null. */\n    findAnimation(animationName) {\n        if (!animationName)\n            throw new Error(\"animationName cannot be null.\");\n        let animations = this.animations;\n        for (let i = 0, n = animations.length; i < n; i++) {\n            let animation = animations[i];\n            if (animation.name == animationName)\n                return animation;\n        }\n        return null;\n    }\n    /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\n     * than to call it multiple times.\n     * @return May be null. */\n    findIkConstraint(constraintName) {\n        if (!constraintName)\n            throw new Error(\"constraintName cannot be null.\");\n        const ikConstraints = this.ikConstraints;\n        for (let i = 0, n = ikConstraints.length; i < n; i++) {\n            const constraint = ikConstraints[i];\n            if (constraint.name == constraintName)\n                return constraint;\n        }\n        return null;\n    }\n    /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\n     * this method than to call it multiple times.\n     * @return May be null. */\n    findTransformConstraint(constraintName) {\n        if (!constraintName)\n            throw new Error(\"constraintName cannot be null.\");\n        const transformConstraints = this.transformConstraints;\n        for (let i = 0, n = transformConstraints.length; i < n; i++) {\n            const constraint = transformConstraints[i];\n            if (constraint.name == constraintName)\n                return constraint;\n        }\n        return null;\n    }\n    /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\n     * than to call it multiple times.\n     * @return May be null. */\n    findPathConstraint(constraintName) {\n        if (!constraintName)\n            throw new Error(\"constraintName cannot be null.\");\n        const pathConstraints = this.pathConstraints;\n        for (let i = 0, n = pathConstraints.length; i < n; i++) {\n            const constraint = pathConstraints[i];\n            if (constraint.name == constraintName)\n                return constraint;\n        }\n        return null;\n    }\n    /** Finds a physics constraint by comparing each physics constraint's name. It is more efficient to cache the results of this method\n     * than to call it multiple times.\n     * @return May be null. */\n    findPhysicsConstraint(constraintName) {\n        if (!constraintName)\n            throw new Error(\"constraintName cannot be null.\");\n        const physicsConstraints = this.physicsConstraints;\n        for (let i = 0, n = physicsConstraints.length; i < n; i++) {\n            const constraint = physicsConstraints[i];\n            if (constraint.name == constraintName)\n                return constraint;\n        }\n        return null;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { MeshAttachment } from \"./attachments/MeshAttachment.js\";\nimport { Color } from \"./Utils.js\";\n/** Stores an entry in the skin consisting of the slot index, name, and attachment **/\nexport class SkinEntry {\n    slotIndex;\n    name;\n    attachment;\n    constructor(slotIndex = 0, name, attachment) {\n        this.slotIndex = slotIndex;\n        this.name = name;\n        this.attachment = attachment;\n    }\n}\n/** Stores attachments by slot index and attachment name.\n *\n * See SkeletonData {@link SkeletonData#defaultSkin}, Skeleton {@link Skeleton#skin}, and\n * [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide. */\nexport class Skin {\n    /** The skin's name, which is unique across all skins in the skeleton. */\n    name;\n    attachments = new Array();\n    bones = Array();\n    constraints = new Array();\n    /** The color of the skin as it was in Spine, or a default color if nonessential data was not exported. */\n    color = new Color(0.99607843, 0.61960787, 0.30980393, 1); // fe9e4fff\n    constructor(name) {\n        if (!name)\n            throw new Error(\"name cannot be null.\");\n        this.name = name;\n    }\n    /** Adds an attachment to the skin for the specified slot index and name. */\n    setAttachment(slotIndex, name, attachment) {\n        if (!attachment)\n            throw new Error(\"attachment cannot be null.\");\n        let attachments = this.attachments;\n        if (slotIndex >= attachments.length)\n            attachments.length = slotIndex + 1;\n        if (!attachments[slotIndex])\n            attachments[slotIndex] = {};\n        attachments[slotIndex][name] = attachment;\n    }\n    /** Adds all attachments, bones, and constraints from the specified skin to this skin. */\n    addSkin(skin) {\n        for (let i = 0; i < skin.bones.length; i++) {\n            let bone = skin.bones[i];\n            let contained = false;\n            for (let ii = 0; ii < this.bones.length; ii++) {\n                if (this.bones[ii] == bone) {\n                    contained = true;\n                    break;\n                }\n            }\n            if (!contained)\n                this.bones.push(bone);\n        }\n        for (let i = 0; i < skin.constraints.length; i++) {\n            let constraint = skin.constraints[i];\n            let contained = false;\n            for (let ii = 0; ii < this.constraints.length; ii++) {\n                if (this.constraints[ii] == constraint) {\n                    contained = true;\n                    break;\n                }\n            }\n            if (!contained)\n                this.constraints.push(constraint);\n        }\n        let attachments = skin.getAttachments();\n        for (let i = 0; i < attachments.length; i++) {\n            var attachment = attachments[i];\n            this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n        }\n    }\n    /** Adds all bones and constraints and copies of all attachments from the specified skin to this skin. Mesh attachments are not\n     * copied, instead a new linked mesh is created. The attachment copies can be modified without affecting the originals. */\n    copySkin(skin) {\n        for (let i = 0; i < skin.bones.length; i++) {\n            let bone = skin.bones[i];\n            let contained = false;\n            for (let ii = 0; ii < this.bones.length; ii++) {\n                if (this.bones[ii] == bone) {\n                    contained = true;\n                    break;\n                }\n            }\n            if (!contained)\n                this.bones.push(bone);\n        }\n        for (let i = 0; i < skin.constraints.length; i++) {\n            let constraint = skin.constraints[i];\n            let contained = false;\n            for (let ii = 0; ii < this.constraints.length; ii++) {\n                if (this.constraints[ii] == constraint) {\n                    contained = true;\n                    break;\n                }\n            }\n            if (!contained)\n                this.constraints.push(constraint);\n        }\n        let attachments = skin.getAttachments();\n        for (let i = 0; i < attachments.length; i++) {\n            var attachment = attachments[i];\n            if (!attachment.attachment)\n                continue;\n            if (attachment.attachment instanceof MeshAttachment) {\n                attachment.attachment = attachment.attachment.newLinkedMesh();\n                this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n            }\n            else {\n                attachment.attachment = attachment.attachment.copy();\n                this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n            }\n        }\n    }\n    /** Returns the attachment for the specified slot index and name, or null. */\n    getAttachment(slotIndex, name) {\n        let dictionary = this.attachments[slotIndex];\n        return dictionary ? dictionary[name] : null;\n    }\n    /** Removes the attachment in the skin for the specified slot index and name, if any. */\n    removeAttachment(slotIndex, name) {\n        let dictionary = this.attachments[slotIndex];\n        if (dictionary)\n            delete dictionary[name];\n    }\n    /** Returns all attachments in this skin. */\n    getAttachments() {\n        let entries = new Array();\n        for (var i = 0; i < this.attachments.length; i++) {\n            let slotAttachments = this.attachments[i];\n            if (slotAttachments) {\n                for (let name in slotAttachments) {\n                    let attachment = slotAttachments[name];\n                    if (attachment)\n                        entries.push(new SkinEntry(i, name, attachment));\n                }\n            }\n        }\n        return entries;\n    }\n    /** Returns all attachments in this skin for the specified slot index. */\n    getAttachmentsForSlot(slotIndex, attachments) {\n        let slotAttachments = this.attachments[slotIndex];\n        if (slotAttachments) {\n            for (let name in slotAttachments) {\n                let attachment = slotAttachments[name];\n                if (attachment)\n                    attachments.push(new SkinEntry(slotIndex, name, attachment));\n            }\n        }\n    }\n    /** Clears all attachments, bones, and constraints. */\n    clear() {\n        this.attachments.length = 0;\n        this.bones.length = 0;\n        this.constraints.length = 0;\n    }\n    /** Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached. */\n    attachAll(skeleton, oldSkin) {\n        let slotIndex = 0;\n        for (let i = 0; i < skeleton.slots.length; i++) {\n            let slot = skeleton.slots[i];\n            let slotAttachment = slot.getAttachment();\n            if (slotAttachment && slotIndex < oldSkin.attachments.length) {\n                let dictionary = oldSkin.attachments[slotIndex];\n                for (let key in dictionary) {\n                    let skinAttachment = dictionary[key];\n                    if (slotAttachment == skinAttachment) {\n                        let attachment = this.getAttachment(slotIndex, key);\n                        if (attachment)\n                            slot.setAttachment(attachment);\n                        break;\n                    }\n                }\n            }\n            slotIndex++;\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color } from \"./Utils.js\";\n/** Stores the setup pose for a {@link Slot}. */\nexport class SlotData {\n    /** The index of the slot in {@link Skeleton#getSlots()}. */\n    index = 0;\n    /** The name of the slot, which is unique across all slots in the skeleton. */\n    name;\n    /** The bone this slot belongs to. */\n    boneData;\n    /** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\n     * color tinting. */\n    color = new Color(1, 1, 1, 1);\n    /** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\n     * color's alpha is not used. */\n    darkColor = null;\n    /** The name of the attachment that is visible for this slot in the setup pose, or null if no attachment is visible. */\n    attachmentName = null;\n    /** The blend mode for drawing the slot's attachment. */\n    blendMode = BlendMode.Normal;\n    /** False if the slot was hidden in Spine and nonessential data was exported. Does not affect runtime rendering. */\n    visible = true;\n    constructor(index, name, boneData) {\n        if (index < 0)\n            throw new Error(\"index must be >= 0.\");\n        if (!name)\n            throw new Error(\"name cannot be null.\");\n        if (!boneData)\n            throw new Error(\"boneData cannot be null.\");\n        this.index = index;\n        this.name = name;\n        this.boneData = boneData;\n    }\n}\n/** Determines how images are blended with existing pixels when drawn. */\nexport var BlendMode;\n(function (BlendMode) {\n    BlendMode[BlendMode[\"Normal\"] = 0] = \"Normal\";\n    BlendMode[BlendMode[\"Additive\"] = 1] = \"Additive\";\n    BlendMode[BlendMode[\"Multiply\"] = 2] = \"Multiply\";\n    BlendMode[BlendMode[\"Screen\"] = 3] = \"Screen\";\n})(BlendMode || (BlendMode = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2xvdERhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvU2xvdERhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrRUEyQitFO0FBRy9FLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFbkMsZ0RBQWdEO0FBQ2hELE1BQU0sT0FBTyxRQUFRO0lBQ3BCLDREQUE0RDtJQUM1RCxLQUFLLEdBQVcsQ0FBQyxDQUFDO0lBRWxCLDhFQUE4RTtJQUM5RSxJQUFJLENBQVM7SUFFYixxQ0FBcUM7SUFDckMsUUFBUSxDQUFXO0lBRW5CO3dCQUNvQjtJQUNwQixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFOUI7b0NBQ2dDO0lBQ2hDLFNBQVMsR0FBaUIsSUFBSSxDQUFDO0lBRS9CLHVIQUF1SDtJQUN2SCxjQUFjLEdBQWtCLElBQUksQ0FBQztJQUVyQyx3REFBd0Q7SUFDeEQsU0FBUyxHQUFjLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFFeEMsbUhBQW1IO0lBQ25ILE9BQU8sR0FBRyxJQUFJLENBQUM7SUFFZixZQUFhLEtBQWEsRUFBRSxJQUFZLEVBQUUsUUFBa0I7UUFDM0QsSUFBSSxLQUFLLEdBQUcsQ0FBQztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsSUFBSTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsUUFBUTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMxQixDQUFDO0NBQ0Q7QUFFRCx5RUFBeUU7QUFDekUsTUFBTSxDQUFOLElBQVksU0FBZ0Q7QUFBNUQsV0FBWSxTQUFTO0lBQUcsNkNBQU0sQ0FBQTtJQUFFLGlEQUFRLENBQUE7SUFBRSxpREFBUSxDQUFBO0lBQUUsNkNBQU0sQ0FBQTtBQUFDLENBQUMsRUFBaEQsU0FBUyxLQUFULFNBQVMsUUFBdUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBTcGluZSBSdW50aW1lcyBMaWNlbnNlIEFncmVlbWVudFxuICogTGFzdCB1cGRhdGVkIEp1bHkgMjgsIDIwMjMuIFJlcGxhY2VzIGFsbCBwcmlvciB2ZXJzaW9ucy5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAyMywgRXNvdGVyaWMgU29mdHdhcmUgTExDXG4gKlxuICogSW50ZWdyYXRpb24gb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3Igb3RoZXJ3aXNlIGNyZWF0aW5nXG4gKiBkZXJpdmF0aXZlIHdvcmtzIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpcyBwZXJtaXR0ZWQgdW5kZXIgdGhlIHRlcm1zIGFuZFxuICogY29uZGl0aW9ucyBvZiBTZWN0aW9uIDIgb2YgdGhlIFNwaW5lIEVkaXRvciBMaWNlbnNlIEFncmVlbWVudDpcbiAqIGh0dHA6Ly9lc290ZXJpY3NvZnR3YXJlLmNvbS9zcGluZS1lZGl0b3ItbGljZW5zZVxuICpcbiAqIE90aGVyd2lzZSwgaXQgaXMgcGVybWl0dGVkIHRvIGludGVncmF0ZSB0aGUgU3BpbmUgUnVudGltZXMgaW50byBzb2Z0d2FyZSBvclxuICogb3RoZXJ3aXNlIGNyZWF0ZSBkZXJpdmF0aXZlIHdvcmtzIG9mIHRoZSBTcGluZSBSdW50aW1lcyAoY29sbGVjdGl2ZWx5LFxuICogXCJQcm9kdWN0c1wiKSwgcHJvdmlkZWQgdGhhdCBlYWNoIHVzZXIgb2YgdGhlIFByb2R1Y3RzIG11c3Qgb2J0YWluIHRoZWlyIG93blxuICogU3BpbmUgRWRpdG9yIGxpY2Vuc2UgYW5kIHJlZGlzdHJpYnV0aW9uIG9mIHRoZSBQcm9kdWN0cyBpbiBhbnkgZm9ybSBtdXN0XG4gKiBpbmNsdWRlIHRoaXMgbGljZW5zZSBhbmQgY29weXJpZ2h0IG5vdGljZS5cbiAqXG4gKiBUSEUgU1BJTkUgUlVOVElNRVMgQVJFIFBST1ZJREVEIEJZIEVTT1RFUklDIFNPRlRXQVJFIExMQyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgRVNPVEVSSUMgU09GVFdBUkUgTExDIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTLFxuICogQlVTSU5FU1MgSU5URVJSVVBUSU9OLCBPUiBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUykgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRIRVxuICogU1BJTkUgUlVOVElNRVMsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7IEJvbmVEYXRhIH0gZnJvbSBcIi4vQm9uZURhdGEuanNcIjtcbmltcG9ydCB7IENvbG9yIH0gZnJvbSBcIi4vVXRpbHMuanNcIjtcblxuLyoqIFN0b3JlcyB0aGUgc2V0dXAgcG9zZSBmb3IgYSB7QGxpbmsgU2xvdH0uICovXG5leHBvcnQgY2xhc3MgU2xvdERhdGEge1xuXHQvKiogVGhlIGluZGV4IG9mIHRoZSBzbG90IGluIHtAbGluayBTa2VsZXRvbiNnZXRTbG90cygpfS4gKi9cblx0aW5kZXg6IG51bWJlciA9IDA7XG5cblx0LyoqIFRoZSBuYW1lIG9mIHRoZSBzbG90LCB3aGljaCBpcyB1bmlxdWUgYWNyb3NzIGFsbCBzbG90cyBpbiB0aGUgc2tlbGV0b24uICovXG5cdG5hbWU6IHN0cmluZztcblxuXHQvKiogVGhlIGJvbmUgdGhpcyBzbG90IGJlbG9uZ3MgdG8uICovXG5cdGJvbmVEYXRhOiBCb25lRGF0YTtcblxuXHQvKiogVGhlIGNvbG9yIHVzZWQgdG8gdGludCB0aGUgc2xvdCdzIGF0dGFjaG1lbnQuIElmIHtAbGluayAjZ2V0RGFya0NvbG9yKCl9IGlzIHNldCwgdGhpcyBpcyB1c2VkIGFzIHRoZSBsaWdodCBjb2xvciBmb3IgdHdvXG5cdCAqIGNvbG9yIHRpbnRpbmcuICovXG5cdGNvbG9yID0gbmV3IENvbG9yKDEsIDEsIDEsIDEpO1xuXG5cdC8qKiBUaGUgZGFyayBjb2xvciB1c2VkIHRvIHRpbnQgdGhlIHNsb3QncyBhdHRhY2htZW50IGZvciB0d28gY29sb3IgdGludGluZywgb3IgbnVsbCBpZiB0d28gY29sb3IgdGludGluZyBpcyBub3QgdXNlZC4gVGhlIGRhcmtcblx0ICogY29sb3IncyBhbHBoYSBpcyBub3QgdXNlZC4gKi9cblx0ZGFya0NvbG9yOiBDb2xvciB8IG51bGwgPSBudWxsO1xuXG5cdC8qKiBUaGUgbmFtZSBvZiB0aGUgYXR0YWNobWVudCB0aGF0IGlzIHZpc2libGUgZm9yIHRoaXMgc2xvdCBpbiB0aGUgc2V0dXAgcG9zZSwgb3IgbnVsbCBpZiBubyBhdHRhY2htZW50IGlzIHZpc2libGUuICovXG5cdGF0dGFjaG1lbnROYW1lOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuXHQvKiogVGhlIGJsZW5kIG1vZGUgZm9yIGRyYXdpbmcgdGhlIHNsb3QncyBhdHRhY2htZW50LiAqL1xuXHRibGVuZE1vZGU6IEJsZW5kTW9kZSA9IEJsZW5kTW9kZS5Ob3JtYWw7XG5cblx0LyoqIEZhbHNlIGlmIHRoZSBzbG90IHdhcyBoaWRkZW4gaW4gU3BpbmUgYW5kIG5vbmVzc2VudGlhbCBkYXRhIHdhcyBleHBvcnRlZC4gRG9lcyBub3QgYWZmZWN0IHJ1bnRpbWUgcmVuZGVyaW5nLiAqL1xuXHR2aXNpYmxlID0gdHJ1ZTtcblxuXHRjb25zdHJ1Y3RvciAoaW5kZXg6IG51bWJlciwgbmFtZTogc3RyaW5nLCBib25lRGF0YTogQm9uZURhdGEpIHtcblx0XHRpZiAoaW5kZXggPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJpbmRleCBtdXN0IGJlID49IDAuXCIpO1xuXHRcdGlmICghbmFtZSkgdGhyb3cgbmV3IEVycm9yKFwibmFtZSBjYW5ub3QgYmUgbnVsbC5cIik7XG5cdFx0aWYgKCFib25lRGF0YSkgdGhyb3cgbmV3IEVycm9yKFwiYm9uZURhdGEgY2Fubm90IGJlIG51bGwuXCIpO1xuXHRcdHRoaXMuaW5kZXggPSBpbmRleDtcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXHRcdHRoaXMuYm9uZURhdGEgPSBib25lRGF0YTtcblx0fVxufVxuXG4vKiogRGV0ZXJtaW5lcyBob3cgaW1hZ2VzIGFyZSBibGVuZGVkIHdpdGggZXhpc3RpbmcgcGl4ZWxzIHdoZW4gZHJhd24uICovXG5leHBvcnQgZW51bSBCbGVuZE1vZGUgeyBOb3JtYWwsIEFkZGl0aXZlLCBNdWx0aXBseSwgU2NyZWVuIH1cbiJdfQ==", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { ConstraintData } from \"./ConstraintData.js\";\n/** Stores the setup pose for a {@link TransformConstraint}.\n *\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide. */\nexport class TransformConstraintData extends ConstraintData {\n    /** The bones that will be modified by this transform constraint. */\n    bones = new Array();\n    /** The target bone whose world transform will be copied to the constrained bones. */\n    _target = null;\n    set target(boneData) { this._target = boneData; }\n    get target() {\n        if (!this._target)\n            throw new Error(\"BoneData not set.\");\n        else\n            return this._target;\n    }\n    mixRotate = 0;\n    mixX = 0;\n    mixY = 0;\n    mixScaleX = 0;\n    mixScaleY = 0;\n    mixShearY = 0;\n    /** An offset added to the constrained bone rotation. */\n    offsetRotation = 0;\n    /** An offset added to the constrained bone X translation. */\n    offsetX = 0;\n    /** An offset added to the constrained bone Y translation. */\n    offsetY = 0;\n    /** An offset added to the constrained bone scaleX. */\n    offsetScaleX = 0;\n    /** An offset added to the constrained bone scaleY. */\n    offsetScaleY = 0;\n    /** An offset added to the constrained bone shearY. */\n    offsetShearY = 0;\n    relative = false;\n    local = false;\n    constructor(name) {\n        super(name, 0, false);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJhbnNmb3JtQ29uc3RyYWludERhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvVHJhbnNmb3JtQ29uc3RyYWludERhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrRUEyQitFO0FBRS9FLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUdyRDs7bUhBRW1IO0FBQ25ILE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxjQUFjO0lBRTFELG9FQUFvRTtJQUNwRSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQVksQ0FBQztJQUU5QixxRkFBcUY7SUFDN0UsT0FBTyxHQUFvQixJQUFJLENBQUM7SUFDeEMsSUFBVyxNQUFNLENBQUUsUUFBa0IsSUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDbkUsSUFBVyxNQUFNO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTs7WUFDbEQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQzFCLENBQUM7SUFFRCxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNULElBQUksR0FBRyxDQUFDLENBQUM7SUFDVCxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNkLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFFZCx3REFBd0Q7SUFDeEQsY0FBYyxHQUFHLENBQUMsQ0FBQztJQUVuQiw2REFBNkQ7SUFDN0QsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUVaLDZEQUE2RDtJQUM3RCxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBRVosc0RBQXNEO0lBQ3RELFlBQVksR0FBRyxDQUFDLENBQUM7SUFFakIsc0RBQXNEO0lBQ3RELFlBQVksR0FBRyxDQUFDLENBQUM7SUFFakIsc0RBQXNEO0lBQ3RELFlBQVksR0FBRyxDQUFDLENBQUM7SUFFakIsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUNqQixLQUFLLEdBQUcsS0FBSyxDQUFDO0lBRWQsWUFBYSxJQUFZO1FBQ3hCLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIFNwaW5lIFJ1bnRpbWVzIExpY2Vuc2UgQWdyZWVtZW50XG4gKiBMYXN0IHVwZGF0ZWQgSnVseSAyOCwgMjAyMy4gUmVwbGFjZXMgYWxsIHByaW9yIHZlcnNpb25zLlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy0yMDIzLCBFc290ZXJpYyBTb2Z0d2FyZSBMTENcbiAqXG4gKiBJbnRlZ3JhdGlvbiBvZiB0aGUgU3BpbmUgUnVudGltZXMgaW50byBzb2Z0d2FyZSBvciBvdGhlcndpc2UgY3JlYXRpbmdcbiAqIGRlcml2YXRpdmUgd29ya3Mgb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIGlzIHBlcm1pdHRlZCB1bmRlciB0aGUgdGVybXMgYW5kXG4gKiBjb25kaXRpb25zIG9mIFNlY3Rpb24gMiBvZiB0aGUgU3BpbmUgRWRpdG9yIExpY2Vuc2UgQWdyZWVtZW50OlxuICogaHR0cDovL2Vzb3Rlcmljc29mdHdhcmUuY29tL3NwaW5lLWVkaXRvci1saWNlbnNlXG4gKlxuICogT3RoZXJ3aXNlLCBpdCBpcyBwZXJtaXR0ZWQgdG8gaW50ZWdyYXRlIHRoZSBTcGluZSBSdW50aW1lcyBpbnRvIHNvZnR3YXJlIG9yXG4gKiBvdGhlcndpc2UgY3JlYXRlIGRlcml2YXRpdmUgd29ya3Mgb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIChjb2xsZWN0aXZlbHksXG4gKiBcIlByb2R1Y3RzXCIpLCBwcm92aWRlZCB0aGF0IGVhY2ggdXNlciBvZiB0aGUgUHJvZHVjdHMgbXVzdCBvYnRhaW4gdGhlaXIgb3duXG4gKiBTcGluZSBFZGl0b3IgbGljZW5zZSBhbmQgcmVkaXN0cmlidXRpb24gb2YgdGhlIFByb2R1Y3RzIGluIGFueSBmb3JtIG11c3RcbiAqIGluY2x1ZGUgdGhpcyBsaWNlbnNlIGFuZCBjb3B5cmlnaHQgbm90aWNlLlxuICpcbiAqIFRIRSBTUElORSBSVU5USU1FUyBBUkUgUFJPVklERUQgQlkgRVNPVEVSSUMgU09GVFdBUkUgTExDIFwiQVMgSVNcIiBBTkQgQU5ZXG4gKiBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBFU09URVJJQyBTT0ZUV0FSRSBMTEMgQkUgTElBQkxFIEZPUiBBTllcbiAqIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gKiAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVMsXG4gKiBCVVNJTkVTUyBJTlRFUlJVUFRJT04sIE9SIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTKSBIT1dFVkVSIENBVVNFRCBBTkRcbiAqIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhFXG4gKiBTUElORSBSVU5USU1FUywgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IHsgQ29uc3RyYWludERhdGEgfSBmcm9tIFwiLi9Db25zdHJhaW50RGF0YS5qc1wiO1xuaW1wb3J0IHsgQm9uZURhdGEgfSBmcm9tIFwiLi9Cb25lRGF0YS5qc1wiO1xuXG4vKiogU3RvcmVzIHRoZSBzZXR1cCBwb3NlIGZvciBhIHtAbGluayBUcmFuc2Zvcm1Db25zdHJhaW50fS5cbiAqXG4gKiBTZWUgW1RyYW5zZm9ybSBjb25zdHJhaW50c10oaHR0cDovL2Vzb3Rlcmljc29mdHdhcmUuY29tL3NwaW5lLXRyYW5zZm9ybS1jb25zdHJhaW50cykgaW4gdGhlIFNwaW5lIFVzZXIgR3VpZGUuICovXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtQ29uc3RyYWludERhdGEgZXh0ZW5kcyBDb25zdHJhaW50RGF0YSB7XG5cblx0LyoqIFRoZSBib25lcyB0aGF0IHdpbGwgYmUgbW9kaWZpZWQgYnkgdGhpcyB0cmFuc2Zvcm0gY29uc3RyYWludC4gKi9cblx0Ym9uZXMgPSBuZXcgQXJyYXk8Qm9uZURhdGE+KCk7XG5cblx0LyoqIFRoZSB0YXJnZXQgYm9uZSB3aG9zZSB3b3JsZCB0cmFuc2Zvcm0gd2lsbCBiZSBjb3BpZWQgdG8gdGhlIGNvbnN0cmFpbmVkIGJvbmVzLiAqL1xuXHRwcml2YXRlIF90YXJnZXQ6IEJvbmVEYXRhIHwgbnVsbCA9IG51bGw7XG5cdHB1YmxpYyBzZXQgdGFyZ2V0IChib25lRGF0YTogQm9uZURhdGEpIHsgdGhpcy5fdGFyZ2V0ID0gYm9uZURhdGE7IH1cblx0cHVibGljIGdldCB0YXJnZXQgKCkge1xuXHRcdGlmICghdGhpcy5fdGFyZ2V0KSB0aHJvdyBuZXcgRXJyb3IoXCJCb25lRGF0YSBub3Qgc2V0LlwiKVxuXHRcdGVsc2UgcmV0dXJuIHRoaXMuX3RhcmdldDtcblx0fVxuXG5cdG1peFJvdGF0ZSA9IDA7XG5cdG1peFggPSAwO1xuXHRtaXhZID0gMDtcblx0bWl4U2NhbGVYID0gMDtcblx0bWl4U2NhbGVZID0gMDtcblx0bWl4U2hlYXJZID0gMDtcblxuXHQvKiogQW4gb2Zmc2V0IGFkZGVkIHRvIHRoZSBjb25zdHJhaW5lZCBib25lIHJvdGF0aW9uLiAqL1xuXHRvZmZzZXRSb3RhdGlvbiA9IDA7XG5cblx0LyoqIEFuIG9mZnNldCBhZGRlZCB0byB0aGUgY29uc3RyYWluZWQgYm9uZSBYIHRyYW5zbGF0aW9uLiAqL1xuXHRvZmZzZXRYID0gMDtcblxuXHQvKiogQW4gb2Zmc2V0IGFkZGVkIHRvIHRoZSBjb25zdHJhaW5lZCBib25lIFkgdHJhbnNsYXRpb24uICovXG5cdG9mZnNldFkgPSAwO1xuXG5cdC8qKiBBbiBvZmZzZXQgYWRkZWQgdG8gdGhlIGNvbnN0cmFpbmVkIGJvbmUgc2NhbGVYLiAqL1xuXHRvZmZzZXRTY2FsZVggPSAwO1xuXG5cdC8qKiBBbiBvZmZzZXQgYWRkZWQgdG8gdGhlIGNvbnN0cmFpbmVkIGJvbmUgc2NhbGVZLiAqL1xuXHRvZmZzZXRTY2FsZVkgPSAwO1xuXG5cdC8qKiBBbiBvZmZzZXQgYWRkZWQgdG8gdGhlIGNvbnN0cmFpbmVkIGJvbmUgc2hlYXJZLiAqL1xuXHRvZmZzZXRTaGVhclkgPSAwO1xuXG5cdHJlbGF0aXZlID0gZmFsc2U7XG5cdGxvY2FsID0gZmFsc2U7XG5cblx0Y29uc3RydWN0b3IgKG5hbWU6IHN0cmluZykge1xuXHRcdHN1cGVyKG5hbWUsIDAsIGZhbHNlKTtcblx0fVxufVxuIl19", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Animation, InheritTimeline, AttachmentTimeline, RGBATimeline, RGBTimeline, RGBA2Timeline, RGB2Timeline, AlphaTimeline, RotateTimeline, TranslateTimeline, TranslateXTimeline, TranslateYTimeline, ScaleTimeline, ScaleXTimeline, ScaleYTimeline, ShearTimeline, ShearXTimeline, ShearYTimeline, IkConstraintTimeline, TransformConstraintTimeline, PathConstraintPositionTimeline, PathConstraintSpacingTimeline, PathConstraintMixTimeline, DeformTimeline, DrawOrderTimeline, EventTimeline, SequenceTimeline, PhysicsConstraintResetTimeline, PhysicsConstraintInertiaTimeline, PhysicsConstraintStrengthTimeline, PhysicsConstraintDampingTimeline, PhysicsConstraintMassTimeline, PhysicsConstraintWindTimeline, PhysicsConstraintGravityTimeline, PhysicsConstraintMixTimeline } from \"./Animation.js\";\nimport { Sequence, SequenceModeValues } from \"./attachments/Sequence.js\";\nimport { BoneData } from \"./BoneData.js\";\nimport { Event } from \"./Event.js\";\nimport { EventData } from \"./EventData.js\";\nimport { IkConstraintData } from \"./IkConstraintData.js\";\nimport { PathConstraintData, PositionMode, SpacingMode } from \"./PathConstraintData.js\";\nimport { PhysicsConstraintData } from \"./PhysicsConstraintData.js\";\nimport { SkeletonData } from \"./SkeletonData.js\";\nimport { Skin } from \"./Skin.js\";\nimport { SlotData } from \"./SlotData.js\";\nimport { TransformConstraintData } from \"./TransformConstraintData.js\";\nimport { Color, Utils } from \"./Utils.js\";\n/** Loads skeleton data in the Spine binary format.\n *\n * See [Spine binary format](http://esotericsoftware.com/spine-binary-format) and\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\n * Runtimes Guide. */\nexport class SkeletonBinary {\n    /** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\n     * runtime than were used in Spine.\n     *\n     * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */\n    scale = 1;\n    attachmentLoader;\n    linkedMeshes = new Array();\n    constructor(attachmentLoader) {\n        this.attachmentLoader = attachmentLoader;\n    }\n    readSkeletonData(binary) {\n        let scale = this.scale;\n        let skeletonData = new SkeletonData();\n        skeletonData.name = \"\"; // BOZO\n        let input = new BinaryInput(binary);\n        let lowHash = input.readInt32();\n        let highHash = input.readInt32();\n        skeletonData.hash = highHash == 0 && lowHash == 0 ? null : highHash.toString(16) + lowHash.toString(16);\n        skeletonData.version = input.readString();\n        skeletonData.x = input.readFloat();\n        skeletonData.y = input.readFloat();\n        skeletonData.width = input.readFloat();\n        skeletonData.height = input.readFloat();\n        skeletonData.referenceScale = input.readFloat() * scale;\n        let nonessential = input.readBoolean();\n        if (nonessential) {\n            skeletonData.fps = input.readFloat();\n            skeletonData.imagesPath = input.readString();\n            skeletonData.audioPath = input.readString();\n        }\n        let n = 0;\n        // Strings.\n        n = input.readInt(true);\n        for (let i = 0; i < n; i++) {\n            let str = input.readString();\n            if (!str)\n                throw new Error(\"String in string table must not be null.\");\n            input.strings.push(str);\n        }\n        // Bones.\n        n = input.readInt(true);\n        for (let i = 0; i < n; i++) {\n            let name = input.readString();\n            if (!name)\n                throw new Error(\"Bone name must not be null.\");\n            let parent = i == 0 ? null : skeletonData.bones[input.readInt(true)];\n            let data = new BoneData(i, name, parent);\n            data.rotation = input.readFloat();\n            data.x = input.readFloat() * scale;\n            data.y = input.readFloat() * scale;\n            data.scaleX = input.readFloat();\n            data.scaleY = input.readFloat();\n            data.shearX = input.readFloat();\n            data.shearY = input.readFloat();\n            data.length = input.readFloat() * scale;\n            data.inherit = input.readByte();\n            data.skinRequired = input.readBoolean();\n            if (nonessential) {\n                Color.rgba8888ToColor(data.color, input.readInt32());\n                data.icon = input.readString() ?? undefined;\n                data.visible = input.readBoolean();\n            }\n            skeletonData.bones.push(data);\n        }\n        // Slots.\n        n = input.readInt(true);\n        for (let i = 0; i < n; i++) {\n            let slotName = input.readString();\n            if (!slotName)\n                throw new Error(\"Slot name must not be null.\");\n            let boneData = skeletonData.bones[input.readInt(true)];\n            let data = new SlotData(i, slotName, boneData);\n            Color.rgba8888ToColor(data.color, input.readInt32());\n            let darkColor = input.readInt32();\n            if (darkColor != -1)\n                Color.rgb888ToColor(data.darkColor = new Color(), darkColor);\n            data.attachmentName = input.readStringRef();\n            data.blendMode = input.readInt(true);\n            if (nonessential)\n                data.visible = input.readBoolean();\n            skeletonData.slots.push(data);\n        }\n        // IK constraints.\n        n = input.readInt(true);\n        for (let i = 0, nn; i < n; i++) {\n            let name = input.readString();\n            if (!name)\n                throw new Error(\"IK constraint data name must not be null.\");\n            let data = new IkConstraintData(name);\n            data.order = input.readInt(true);\n            nn = input.readInt(true);\n            for (let ii = 0; ii < nn; ii++)\n                data.bones.push(skeletonData.bones[input.readInt(true)]);\n            data.target = skeletonData.bones[input.readInt(true)];\n            let flags = input.readByte();\n            data.skinRequired = (flags & 1) != 0;\n            data.bendDirection = (flags & 2) != 0 ? 1 : -1;\n            data.compress = (flags & 4) != 0;\n            data.stretch = (flags & 8) != 0;\n            data.uniform = (flags & 16) != 0;\n            if ((flags & 32) != 0)\n                data.mix = (flags & 64) != 0 ? input.readFloat() : 1;\n            if ((flags & 128) != 0)\n                data.softness = input.readFloat() * scale;\n            skeletonData.ikConstraints.push(data);\n        }\n        // Transform constraints.\n        n = input.readInt(true);\n        for (let i = 0, nn; i < n; i++) {\n            let name = input.readString();\n            if (!name)\n                throw new Error(\"Transform constraint data name must not be null.\");\n            let data = new TransformConstraintData(name);\n            data.order = input.readInt(true);\n            nn = input.readInt(true);\n            for (let ii = 0; ii < nn; ii++)\n                data.bones.push(skeletonData.bones[input.readInt(true)]);\n            data.target = skeletonData.bones[input.readInt(true)];\n            let flags = input.readByte();\n            data.skinRequired = (flags & 1) != 0;\n            data.local = (flags & 2) != 0;\n            data.relative = (flags & 4) != 0;\n            if ((flags & 8) != 0)\n                data.offsetRotation = input.readFloat();\n            if ((flags & 16) != 0)\n                data.offsetX = input.readFloat() * scale;\n            if ((flags & 32) != 0)\n                data.offsetY = input.readFloat() * scale;\n            if ((flags & 64) != 0)\n                data.offsetScaleX = input.readFloat();\n            if ((flags & 128) != 0)\n                data.offsetScaleY = input.readFloat();\n            flags = input.readByte();\n            if ((flags & 1) != 0)\n                data.offsetShearY = input.readFloat();\n            if ((flags & 2) != 0)\n                data.mixRotate = input.readFloat();\n            if ((flags & 4) != 0)\n                data.mixX = input.readFloat();\n            if ((flags & 8) != 0)\n                data.mixY = input.readFloat();\n            if ((flags & 16) != 0)\n                data.mixScaleX = input.readFloat();\n            if ((flags & 32) != 0)\n                data.mixScaleY = input.readFloat();\n            if ((flags & 64) != 0)\n                data.mixShearY = input.readFloat();\n            skeletonData.transformConstraints.push(data);\n        }\n        // Path constraints.\n        n = input.readInt(true);\n        for (let i = 0, nn; i < n; i++) {\n            let name = input.readString();\n            if (!name)\n                throw new Error(\"Path constraint data name must not be null.\");\n            let data = new PathConstraintData(name);\n            data.order = input.readInt(true);\n            data.skinRequired = input.readBoolean();\n            nn = input.readInt(true);\n            for (let ii = 0; ii < nn; ii++)\n                data.bones.push(skeletonData.bones[input.readInt(true)]);\n            data.target = skeletonData.slots[input.readInt(true)];\n            const flags = input.readByte();\n            data.positionMode = flags & 1;\n            data.spacingMode = (flags >> 1) & 3;\n            data.rotateMode = (flags >> 3) & 3;\n            if ((flags & 128) != 0)\n                data.offsetRotation = input.readFloat();\n            data.position = input.readFloat();\n            if (data.positionMode == PositionMode.Fixed)\n                data.position *= scale;\n            data.spacing = input.readFloat();\n            if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed)\n                data.spacing *= scale;\n            data.mixRotate = input.readFloat();\n            data.mixX = input.readFloat();\n            data.mixY = input.readFloat();\n            skeletonData.pathConstraints.push(data);\n        }\n        // Physics constraints.\n        n = input.readInt(true);\n        for (let i = 0, nn; i < n; i++) {\n            const name = input.readString();\n            if (!name)\n                throw new Error(\"Physics constraint data name must not be null.\");\n            const data = new PhysicsConstraintData(name);\n            data.order = input.readInt(true);\n            data.bone = skeletonData.bones[input.readInt(true)];\n            let flags = input.readByte();\n            data.skinRequired = (flags & 1) != 0;\n            if ((flags & 2) != 0)\n                data.x = input.readFloat();\n            if ((flags & 4) != 0)\n                data.y = input.readFloat();\n            if ((flags & 8) != 0)\n                data.rotate = input.readFloat();\n            if ((flags & 16) != 0)\n                data.scaleX = input.readFloat();\n            if ((flags & 32) != 0)\n                data.shearX = input.readFloat();\n            data.limit = ((flags & 64) != 0 ? input.readFloat() : 5000) * scale;\n            data.step = 1 / input.readUnsignedByte();\n            data.inertia = input.readFloat();\n            data.strength = input.readFloat();\n            data.damping = input.readFloat();\n            data.massInverse = (flags & 128) != 0 ? input.readFloat() : 1;\n            data.wind = input.readFloat();\n            data.gravity = input.readFloat();\n            flags = input.readByte();\n            if ((flags & 1) != 0)\n                data.inertiaGlobal = true;\n            if ((flags & 2) != 0)\n                data.strengthGlobal = true;\n            if ((flags & 4) != 0)\n                data.dampingGlobal = true;\n            if ((flags & 8) != 0)\n                data.massGlobal = true;\n            if ((flags & 16) != 0)\n                data.windGlobal = true;\n            if ((flags & 32) != 0)\n                data.gravityGlobal = true;\n            if ((flags & 64) != 0)\n                data.mixGlobal = true;\n            data.mix = (flags & 128) != 0 ? input.readFloat() : 1;\n            skeletonData.physicsConstraints.push(data);\n        }\n        // Default skin.\n        let defaultSkin = this.readSkin(input, skeletonData, true, nonessential);\n        if (defaultSkin) {\n            skeletonData.defaultSkin = defaultSkin;\n            skeletonData.skins.push(defaultSkin);\n        }\n        // Skins.\n        {\n            let i = skeletonData.skins.length;\n            Utils.setArraySize(skeletonData.skins, n = i + input.readInt(true));\n            for (; i < n; i++) {\n                let skin = this.readSkin(input, skeletonData, false, nonessential);\n                if (!skin)\n                    throw new Error(\"readSkin() should not have returned null.\");\n                skeletonData.skins[i] = skin;\n            }\n        }\n        // Linked meshes.\n        n = this.linkedMeshes.length;\n        for (let i = 0; i < n; i++) {\n            let linkedMesh = this.linkedMeshes[i];\n            const skin = skeletonData.skins[linkedMesh.skinIndex];\n            if (!linkedMesh.parent)\n                throw new Error(\"Linked mesh parent must not be null\");\n            let parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n            if (!parent)\n                throw new Error(`Parent mesh not found: ${linkedMesh.parent}`);\n            linkedMesh.mesh.timelineAttachment = linkedMesh.inheritTimeline ? parent : linkedMesh.mesh;\n            linkedMesh.mesh.setParentMesh(parent);\n            if (linkedMesh.mesh.region != null)\n                linkedMesh.mesh.updateRegion();\n        }\n        this.linkedMeshes.length = 0;\n        // Events.\n        n = input.readInt(true);\n        for (let i = 0; i < n; i++) {\n            let eventName = input.readString();\n            if (!eventName)\n                throw new Error(\"Event data name must not be null\");\n            let data = new EventData(eventName);\n            data.intValue = input.readInt(false);\n            data.floatValue = input.readFloat();\n            data.stringValue = input.readString();\n            data.audioPath = input.readString();\n            if (data.audioPath) {\n                data.volume = input.readFloat();\n                data.balance = input.readFloat();\n            }\n            skeletonData.events.push(data);\n        }\n        // Animations.\n        n = input.readInt(true);\n        for (let i = 0; i < n; i++) {\n            let animationName = input.readString();\n            if (!animationName)\n                throw new Error(\"Animatio name must not be null.\");\n            skeletonData.animations.push(this.readAnimation(input, animationName, skeletonData));\n        }\n        return skeletonData;\n    }\n    readSkin(input, skeletonData, defaultSkin, nonessential) {\n        let skin = null;\n        let slotCount = 0;\n        if (defaultSkin) {\n            slotCount = input.readInt(true);\n            if (slotCount == 0)\n                return null;\n            skin = new Skin(\"default\");\n        }\n        else {\n            let skinName = input.readString();\n            if (!skinName)\n                throw new Error(\"Skin name must not be null.\");\n            skin = new Skin(skinName);\n            if (nonessential)\n                Color.rgba8888ToColor(skin.color, input.readInt32());\n            skin.bones.length = input.readInt(true);\n            for (let i = 0, n = skin.bones.length; i < n; i++)\n                skin.bones[i] = skeletonData.bones[input.readInt(true)];\n            for (let i = 0, n = input.readInt(true); i < n; i++)\n                skin.constraints.push(skeletonData.ikConstraints[input.readInt(true)]);\n            for (let i = 0, n = input.readInt(true); i < n; i++)\n                skin.constraints.push(skeletonData.transformConstraints[input.readInt(true)]);\n            for (let i = 0, n = input.readInt(true); i < n; i++)\n                skin.constraints.push(skeletonData.pathConstraints[input.readInt(true)]);\n            for (let i = 0, n = input.readInt(true); i < n; i++)\n                skin.constraints.push(skeletonData.physicsConstraints[input.readInt(true)]);\n            slotCount = input.readInt(true);\n        }\n        for (let i = 0; i < slotCount; i++) {\n            let slotIndex = input.readInt(true);\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n                let name = input.readStringRef();\n                if (!name)\n                    throw new Error(\"Attachment name must not be null\");\n                let attachment = this.readAttachment(input, skeletonData, skin, slotIndex, name, nonessential);\n                if (attachment)\n                    skin.setAttachment(slotIndex, name, attachment);\n            }\n        }\n        return skin;\n    }\n    readAttachment(input, skeletonData, skin, slotIndex, attachmentName, nonessential) {\n        let scale = this.scale;\n        let flags = input.readByte();\n        const name = (flags & 8) != 0 ? input.readStringRef() : attachmentName;\n        if (!name)\n            throw new Error(\"Attachment name must not be null\");\n        switch ((flags & 0b111)) { // BUG?\n            case AttachmentType.Region: {\n                let path = (flags & 16) != 0 ? input.readStringRef() : null;\n                const color = (flags & 32) != 0 ? input.readInt32() : 0xffffffff;\n                const sequence = (flags & 64) != 0 ? this.readSequence(input) : null;\n                let rotation = (flags & 128) != 0 ? input.readFloat() : 0;\n                let x = input.readFloat();\n                let y = input.readFloat();\n                let scaleX = input.readFloat();\n                let scaleY = input.readFloat();\n                let width = input.readFloat();\n                let height = input.readFloat();\n                if (!path)\n                    path = name;\n                let region = this.attachmentLoader.newRegionAttachment(skin, name, path, sequence);\n                if (!region)\n                    return null;\n                region.path = path;\n                region.x = x * scale;\n                region.y = y * scale;\n                region.scaleX = scaleX;\n                region.scaleY = scaleY;\n                region.rotation = rotation;\n                region.width = width * scale;\n                region.height = height * scale;\n                Color.rgba8888ToColor(region.color, color);\n                region.sequence = sequence;\n                if (sequence == null)\n                    region.updateRegion();\n                return region;\n            }\n            case AttachmentType.BoundingBox: {\n                let vertices = this.readVertices(input, (flags & 16) != 0);\n                let color = nonessential ? input.readInt32() : 0;\n                let box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n                if (!box)\n                    return null;\n                box.worldVerticesLength = vertices.length;\n                box.vertices = vertices.vertices;\n                box.bones = vertices.bones;\n                if (nonessential)\n                    Color.rgba8888ToColor(box.color, color);\n                return box;\n            }\n            case AttachmentType.Mesh: {\n                let path = (flags & 16) != 0 ? input.readStringRef() : name;\n                const color = (flags & 32) != 0 ? input.readInt32() : 0xffffffff;\n                const sequence = (flags & 64) != 0 ? this.readSequence(input) : null;\n                const hullLength = input.readInt(true);\n                const vertices = this.readVertices(input, (flags & 128) != 0);\n                const uvs = this.readFloatArray(input, vertices.length, 1);\n                const triangles = this.readShortArray(input, (vertices.length - hullLength - 2) * 3);\n                let edges = [];\n                let width = 0, height = 0;\n                if (nonessential) {\n                    edges = this.readShortArray(input, input.readInt(true));\n                    width = input.readFloat();\n                    height = input.readFloat();\n                }\n                if (!path)\n                    path = name;\n                let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path, sequence);\n                if (!mesh)\n                    return null;\n                mesh.path = path;\n                Color.rgba8888ToColor(mesh.color, color);\n                mesh.bones = vertices.bones;\n                mesh.vertices = vertices.vertices;\n                mesh.worldVerticesLength = vertices.length;\n                mesh.triangles = triangles;\n                mesh.regionUVs = uvs;\n                if (sequence == null)\n                    mesh.updateRegion();\n                mesh.hullLength = hullLength << 1;\n                mesh.sequence = sequence;\n                if (nonessential) {\n                    mesh.edges = edges;\n                    mesh.width = width * scale;\n                    mesh.height = height * scale;\n                }\n                return mesh;\n            }\n            case AttachmentType.LinkedMesh: {\n                const path = (flags & 16) != 0 ? input.readStringRef() : name;\n                if (path == null)\n                    throw new Error(\"Path of linked mesh must not be null\");\n                const color = (flags & 32) != 0 ? input.readInt32() : 0xffffffff;\n                const sequence = (flags & 64) != 0 ? this.readSequence(input) : null;\n                const inheritTimelines = (flags & 128) != 0;\n                const skinIndex = input.readInt(true);\n                const parent = input.readStringRef();\n                let width = 0, height = 0;\n                if (nonessential) {\n                    width = input.readFloat();\n                    height = input.readFloat();\n                }\n                let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path, sequence);\n                if (!mesh)\n                    return null;\n                mesh.path = path;\n                Color.rgba8888ToColor(mesh.color, color);\n                mesh.sequence = sequence;\n                if (nonessential) {\n                    mesh.width = width * scale;\n                    mesh.height = height * scale;\n                }\n                this.linkedMeshes.push(new LinkedMesh(mesh, skinIndex, slotIndex, parent, inheritTimelines));\n                return mesh;\n            }\n            case AttachmentType.Path: {\n                const closed = (flags & 16) != 0;\n                const constantSpeed = (flags & 32) != 0;\n                const vertices = this.readVertices(input, (flags & 64) != 0);\n                const lengths = Utils.newArray(vertices.length / 6, 0);\n                for (let i = 0, n = lengths.length; i < n; i++)\n                    lengths[i] = input.readFloat() * scale;\n                const color = nonessential ? input.readInt32() : 0;\n                const path = this.attachmentLoader.newPathAttachment(skin, name);\n                if (!path)\n                    return null;\n                path.closed = closed;\n                path.constantSpeed = constantSpeed;\n                path.worldVerticesLength = vertices.length;\n                path.vertices = vertices.vertices;\n                path.bones = vertices.bones;\n                path.lengths = lengths;\n                if (nonessential)\n                    Color.rgba8888ToColor(path.color, color);\n                return path;\n            }\n            case AttachmentType.Point: {\n                const rotation = input.readFloat();\n                const x = input.readFloat();\n                const y = input.readFloat();\n                const color = nonessential ? input.readInt32() : 0;\n                const point = this.attachmentLoader.newPointAttachment(skin, name);\n                if (!point)\n                    return null;\n                point.x = x * scale;\n                point.y = y * scale;\n                point.rotation = rotation;\n                if (nonessential)\n                    Color.rgba8888ToColor(point.color, color);\n                return point;\n            }\n            case AttachmentType.Clipping: {\n                const endSlotIndex = input.readInt(true);\n                const vertices = this.readVertices(input, (flags & 16) != 0);\n                let color = nonessential ? input.readInt32() : 0;\n                let clip = this.attachmentLoader.newClippingAttachment(skin, name);\n                if (!clip)\n                    return null;\n                clip.endSlot = skeletonData.slots[endSlotIndex];\n                clip.worldVerticesLength = vertices.length;\n                clip.vertices = vertices.vertices;\n                clip.bones = vertices.bones;\n                if (nonessential)\n                    Color.rgba8888ToColor(clip.color, color);\n                return clip;\n            }\n        }\n        return null;\n    }\n    readSequence(input) {\n        let sequence = new Sequence(input.readInt(true));\n        sequence.start = input.readInt(true);\n        sequence.digits = input.readInt(true);\n        sequence.setupIndex = input.readInt(true);\n        return sequence;\n    }\n    readVertices(input, weighted) {\n        const scale = this.scale;\n        const vertexCount = input.readInt(true);\n        const vertices = new Vertices();\n        vertices.length = vertexCount << 1;\n        if (!weighted) {\n            vertices.vertices = this.readFloatArray(input, vertices.length, scale);\n            return vertices;\n        }\n        let weights = new Array();\n        let bonesArray = new Array();\n        for (let i = 0; i < vertexCount; i++) {\n            let boneCount = input.readInt(true);\n            bonesArray.push(boneCount);\n            for (let ii = 0; ii < boneCount; ii++) {\n                bonesArray.push(input.readInt(true));\n                weights.push(input.readFloat() * scale);\n                weights.push(input.readFloat() * scale);\n                weights.push(input.readFloat());\n            }\n        }\n        vertices.vertices = Utils.toFloatArray(weights);\n        vertices.bones = bonesArray;\n        return vertices;\n    }\n    readFloatArray(input, n, scale) {\n        let array = new Array(n);\n        if (scale == 1) {\n            for (let i = 0; i < n; i++)\n                array[i] = input.readFloat();\n        }\n        else {\n            for (let i = 0; i < n; i++)\n                array[i] = input.readFloat() * scale;\n        }\n        return array;\n    }\n    readShortArray(input, n) {\n        let array = new Array(n);\n        for (let i = 0; i < n; i++)\n            array[i] = input.readInt(true);\n        return array;\n    }\n    readAnimation(input, name, skeletonData) {\n        input.readInt(true); // Number of timelines.\n        let timelines = new Array();\n        let scale = this.scale;\n        // Slot timelines.\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\n            let slotIndex = input.readInt(true);\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n                let timelineType = input.readByte();\n                let frameCount = input.readInt(true);\n                let frameLast = frameCount - 1;\n                switch (timelineType) {\n                    case SLOT_ATTACHMENT: {\n                        let timeline = new AttachmentTimeline(frameCount, slotIndex);\n                        for (let frame = 0; frame < frameCount; frame++)\n                            timeline.setFrame(frame, input.readFloat(), input.readStringRef());\n                        timelines.push(timeline);\n                        break;\n                    }\n                    case SLOT_RGBA: {\n                        let bezierCount = input.readInt(true);\n                        let timeline = new RGBATimeline(frameCount, bezierCount, slotIndex);\n                        let time = input.readFloat();\n                        let r = input.readUnsignedByte() / 255.0;\n                        let g = input.readUnsignedByte() / 255.0;\n                        let b = input.readUnsignedByte() / 255.0;\n                        let a = input.readUnsignedByte() / 255.0;\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, r, g, b, a);\n                            if (frame == frameLast)\n                                break;\n                            let time2 = input.readFloat();\n                            let r2 = input.readUnsignedByte() / 255.0;\n                            let g2 = input.readUnsignedByte() / 255.0;\n                            let b2 = input.readUnsignedByte() / 255.0;\n                            let a2 = input.readUnsignedByte() / 255.0;\n                            switch (input.readByte()) {\n                                case CURVE_STEPPED:\n                                    timeline.setStepped(frame);\n                                    break;\n                                case CURVE_BEZIER:\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, r2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, g2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, b2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 3, time, time2, a, a2, 1);\n                            }\n                            time = time2;\n                            r = r2;\n                            g = g2;\n                            b = b2;\n                            a = a2;\n                        }\n                        timelines.push(timeline);\n                        break;\n                    }\n                    case SLOT_RGB: {\n                        let bezierCount = input.readInt(true);\n                        let timeline = new RGBTimeline(frameCount, bezierCount, slotIndex);\n                        let time = input.readFloat();\n                        let r = input.readUnsignedByte() / 255.0;\n                        let g = input.readUnsignedByte() / 255.0;\n                        let b = input.readUnsignedByte() / 255.0;\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, r, g, b);\n                            if (frame == frameLast)\n                                break;\n                            let time2 = input.readFloat();\n                            let r2 = input.readUnsignedByte() / 255.0;\n                            let g2 = input.readUnsignedByte() / 255.0;\n                            let b2 = input.readUnsignedByte() / 255.0;\n                            switch (input.readByte()) {\n                                case CURVE_STEPPED:\n                                    timeline.setStepped(frame);\n                                    break;\n                                case CURVE_BEZIER:\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, r2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, g2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, b2, 1);\n                            }\n                            time = time2;\n                            r = r2;\n                            g = g2;\n                            b = b2;\n                        }\n                        timelines.push(timeline);\n                        break;\n                    }\n                    case SLOT_RGBA2: {\n                        let bezierCount = input.readInt(true);\n                        let timeline = new RGBA2Timeline(frameCount, bezierCount, slotIndex);\n                        let time = input.readFloat();\n                        let r = input.readUnsignedByte() / 255.0;\n                        let g = input.readUnsignedByte() / 255.0;\n                        let b = input.readUnsignedByte() / 255.0;\n                        let a = input.readUnsignedByte() / 255.0;\n                        let r2 = input.readUnsignedByte() / 255.0;\n                        let g2 = input.readUnsignedByte() / 255.0;\n                        let b2 = input.readUnsignedByte() / 255.0;\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, r, g, b, a, r2, g2, b2);\n                            if (frame == frameLast)\n                                break;\n                            let time2 = input.readFloat();\n                            let nr = input.readUnsignedByte() / 255.0;\n                            let ng = input.readUnsignedByte() / 255.0;\n                            let nb = input.readUnsignedByte() / 255.0;\n                            let na = input.readUnsignedByte() / 255.0;\n                            let nr2 = input.readUnsignedByte() / 255.0;\n                            let ng2 = input.readUnsignedByte() / 255.0;\n                            let nb2 = input.readUnsignedByte() / 255.0;\n                            switch (input.readByte()) {\n                                case CURVE_STEPPED:\n                                    timeline.setStepped(frame);\n                                    break;\n                                case CURVE_BEZIER:\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, nr, 1);\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, ng, 1);\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, nb, 1);\n                                    setBezier(input, timeline, bezier++, frame, 3, time, time2, a, na, 1);\n                                    setBezier(input, timeline, bezier++, frame, 4, time, time2, r2, nr2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 5, time, time2, g2, ng2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 6, time, time2, b2, nb2, 1);\n                            }\n                            time = time2;\n                            r = nr;\n                            g = ng;\n                            b = nb;\n                            a = na;\n                            r2 = nr2;\n                            g2 = ng2;\n                            b2 = nb2;\n                        }\n                        timelines.push(timeline);\n                        break;\n                    }\n                    case SLOT_RGB2: {\n                        let bezierCount = input.readInt(true);\n                        let timeline = new RGB2Timeline(frameCount, bezierCount, slotIndex);\n                        let time = input.readFloat();\n                        let r = input.readUnsignedByte() / 255.0;\n                        let g = input.readUnsignedByte() / 255.0;\n                        let b = input.readUnsignedByte() / 255.0;\n                        let r2 = input.readUnsignedByte() / 255.0;\n                        let g2 = input.readUnsignedByte() / 255.0;\n                        let b2 = input.readUnsignedByte() / 255.0;\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, r, g, b, r2, g2, b2);\n                            if (frame == frameLast)\n                                break;\n                            let time2 = input.readFloat();\n                            let nr = input.readUnsignedByte() / 255.0;\n                            let ng = input.readUnsignedByte() / 255.0;\n                            let nb = input.readUnsignedByte() / 255.0;\n                            let nr2 = input.readUnsignedByte() / 255.0;\n                            let ng2 = input.readUnsignedByte() / 255.0;\n                            let nb2 = input.readUnsignedByte() / 255.0;\n                            switch (input.readByte()) {\n                                case CURVE_STEPPED:\n                                    timeline.setStepped(frame);\n                                    break;\n                                case CURVE_BEZIER:\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, nr, 1);\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, ng, 1);\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, nb, 1);\n                                    setBezier(input, timeline, bezier++, frame, 3, time, time2, r2, nr2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 4, time, time2, g2, ng2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 5, time, time2, b2, nb2, 1);\n                            }\n                            time = time2;\n                            r = nr;\n                            g = ng;\n                            b = nb;\n                            r2 = nr2;\n                            g2 = ng2;\n                            b2 = nb2;\n                        }\n                        timelines.push(timeline);\n                        break;\n                    }\n                    case SLOT_ALPHA: {\n                        let timeline = new AlphaTimeline(frameCount, input.readInt(true), slotIndex);\n                        let time = input.readFloat(), a = input.readUnsignedByte() / 255;\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, a);\n                            if (frame == frameLast)\n                                break;\n                            let time2 = input.readFloat();\n                            let a2 = input.readUnsignedByte() / 255;\n                            switch (input.readByte()) {\n                                case CURVE_STEPPED:\n                                    timeline.setStepped(frame);\n                                    break;\n                                case CURVE_BEZIER:\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, a, a2, 1);\n                            }\n                            time = time2;\n                            a = a2;\n                        }\n                        timelines.push(timeline);\n                    }\n                }\n            }\n        }\n        // Bone timelines.\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\n            let boneIndex = input.readInt(true);\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n                let type = input.readByte(), frameCount = input.readInt(true);\n                if (type == BONE_INHERIT) {\n                    let timeline = new InheritTimeline(frameCount, boneIndex);\n                    for (let frame = 0; frame < frameCount; frame++) {\n                        timeline.setFrame(frame, input.readFloat(), input.readByte());\n                    }\n                    timelines.push(timeline);\n                    continue;\n                }\n                let bezierCount = input.readInt(true);\n                switch (type) {\n                    case BONE_ROTATE:\n                        timelines.push(readTimeline1(input, new RotateTimeline(frameCount, bezierCount, boneIndex), 1));\n                        break;\n                    case BONE_TRANSLATE:\n                        timelines.push(readTimeline2(input, new TranslateTimeline(frameCount, bezierCount, boneIndex), scale));\n                        break;\n                    case BONE_TRANSLATEX:\n                        timelines.push(readTimeline1(input, new TranslateXTimeline(frameCount, bezierCount, boneIndex), scale));\n                        break;\n                    case BONE_TRANSLATEY:\n                        timelines.push(readTimeline1(input, new TranslateYTimeline(frameCount, bezierCount, boneIndex), scale));\n                        break;\n                    case BONE_SCALE:\n                        timelines.push(readTimeline2(input, new ScaleTimeline(frameCount, bezierCount, boneIndex), 1));\n                        break;\n                    case BONE_SCALEX:\n                        timelines.push(readTimeline1(input, new ScaleXTimeline(frameCount, bezierCount, boneIndex), 1));\n                        break;\n                    case BONE_SCALEY:\n                        timelines.push(readTimeline1(input, new ScaleYTimeline(frameCount, bezierCount, boneIndex), 1));\n                        break;\n                    case BONE_SHEAR:\n                        timelines.push(readTimeline2(input, new ShearTimeline(frameCount, bezierCount, boneIndex), 1));\n                        break;\n                    case BONE_SHEARX:\n                        timelines.push(readTimeline1(input, new ShearXTimeline(frameCount, bezierCount, boneIndex), 1));\n                        break;\n                    case BONE_SHEARY:\n                        timelines.push(readTimeline1(input, new ShearYTimeline(frameCount, bezierCount, boneIndex), 1));\n                }\n            }\n        }\n        // IK constraint timelines.\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\n            let index = input.readInt(true), frameCount = input.readInt(true), frameLast = frameCount - 1;\n            let timeline = new IkConstraintTimeline(frameCount, input.readInt(true), index);\n            let flags = input.readByte();\n            let time = input.readFloat(), mix = (flags & 1) != 0 ? ((flags & 2) != 0 ? input.readFloat() : 1) : 0;\n            let softness = (flags & 4) != 0 ? input.readFloat() * scale : 0;\n            for (let frame = 0, bezier = 0;; frame++) {\n                timeline.setFrame(frame, time, mix, softness, (flags & 8) != 0 ? 1 : -1, (flags & 16) != 0, (flags & 32) != 0);\n                if (frame == frameLast)\n                    break;\n                flags = input.readByte();\n                const time2 = input.readFloat(), mix2 = (flags & 1) != 0 ? ((flags & 2) != 0 ? input.readFloat() : 1) : 0;\n                const softness2 = (flags & 4) != 0 ? input.readFloat() * scale : 0;\n                if ((flags & 64) != 0) {\n                    timeline.setStepped(frame);\n                }\n                else if ((flags & 128) != 0) {\n                    setBezier(input, timeline, bezier++, frame, 0, time, time2, mix, mix2, 1);\n                    setBezier(input, timeline, bezier++, frame, 1, time, time2, softness, softness2, scale);\n                }\n                time = time2;\n                mix = mix2;\n                softness = softness2;\n            }\n            timelines.push(timeline);\n        }\n        // Transform constraint timelines.\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\n            let index = input.readInt(true), frameCount = input.readInt(true), frameLast = frameCount - 1;\n            let timeline = new TransformConstraintTimeline(frameCount, input.readInt(true), index);\n            let time = input.readFloat(), mixRotate = input.readFloat(), mixX = input.readFloat(), mixY = input.readFloat(), mixScaleX = input.readFloat(), mixScaleY = input.readFloat(), mixShearY = input.readFloat();\n            for (let frame = 0, bezier = 0;; frame++) {\n                timeline.setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY);\n                if (frame == frameLast)\n                    break;\n                let time2 = input.readFloat(), mixRotate2 = input.readFloat(), mixX2 = input.readFloat(), mixY2 = input.readFloat(), mixScaleX2 = input.readFloat(), mixScaleY2 = input.readFloat(), mixShearY2 = input.readFloat();\n                switch (input.readByte()) {\n                    case CURVE_STEPPED:\n                        timeline.setStepped(frame);\n                        break;\n                    case CURVE_BEZIER:\n                        setBezier(input, timeline, bezier++, frame, 0, time, time2, mixRotate, mixRotate2, 1);\n                        setBezier(input, timeline, bezier++, frame, 1, time, time2, mixX, mixX2, 1);\n                        setBezier(input, timeline, bezier++, frame, 2, time, time2, mixY, mixY2, 1);\n                        setBezier(input, timeline, bezier++, frame, 3, time, time2, mixScaleX, mixScaleX2, 1);\n                        setBezier(input, timeline, bezier++, frame, 4, time, time2, mixScaleY, mixScaleY2, 1);\n                        setBezier(input, timeline, bezier++, frame, 5, time, time2, mixShearY, mixShearY2, 1);\n                }\n                time = time2;\n                mixRotate = mixRotate2;\n                mixX = mixX2;\n                mixY = mixY2;\n                mixScaleX = mixScaleX2;\n                mixScaleY = mixScaleY2;\n                mixShearY = mixShearY2;\n            }\n            timelines.push(timeline);\n        }\n        // Path constraint timelines.\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\n            let index = input.readInt(true);\n            let data = skeletonData.pathConstraints[index];\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n                const type = input.readByte(), frameCount = input.readInt(true), bezierCount = input.readInt(true);\n                switch (type) {\n                    case PATH_POSITION:\n                        timelines\n                            .push(readTimeline1(input, new PathConstraintPositionTimeline(frameCount, bezierCount, index), data.positionMode == PositionMode.Fixed ? scale : 1));\n                        break;\n                    case PATH_SPACING:\n                        timelines\n                            .push(readTimeline1(input, new PathConstraintSpacingTimeline(frameCount, bezierCount, index), data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed ? scale : 1));\n                        break;\n                    case PATH_MIX:\n                        let timeline = new PathConstraintMixTimeline(frameCount, bezierCount, index);\n                        let time = input.readFloat(), mixRotate = input.readFloat(), mixX = input.readFloat(), mixY = input.readFloat();\n                        for (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1;; frame++) {\n                            timeline.setFrame(frame, time, mixRotate, mixX, mixY);\n                            if (frame == frameLast)\n                                break;\n                            let time2 = input.readFloat(), mixRotate2 = input.readFloat(), mixX2 = input.readFloat(), mixY2 = input.readFloat();\n                            switch (input.readByte()) {\n                                case CURVE_STEPPED:\n                                    timeline.setStepped(frame);\n                                    break;\n                                case CURVE_BEZIER:\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, mixRotate, mixRotate2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, mixX, mixX2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, mixY, mixY2, 1);\n                            }\n                            time = time2;\n                            mixRotate = mixRotate2;\n                            mixX = mixX2;\n                            mixY = mixY2;\n                        }\n                        timelines.push(timeline);\n                }\n            }\n        }\n        // Physics timelines.\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\n            const index = input.readInt(true) - 1;\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n                const type = input.readByte(), frameCount = input.readInt(true);\n                if (type == PHYSICS_RESET) {\n                    const timeline = new PhysicsConstraintResetTimeline(frameCount, index);\n                    for (let frame = 0; frame < frameCount; frame++)\n                        timeline.setFrame(frame, input.readFloat());\n                    timelines.push(timeline);\n                    continue;\n                }\n                const bezierCount = input.readInt(true);\n                switch (type) {\n                    case PHYSICS_INERTIA:\n                        timelines.push(readTimeline1(input, new PhysicsConstraintInertiaTimeline(frameCount, bezierCount, index), 1));\n                        break;\n                    case PHYSICS_STRENGTH:\n                        timelines.push(readTimeline1(input, new PhysicsConstraintStrengthTimeline(frameCount, bezierCount, index), 1));\n                        break;\n                    case PHYSICS_DAMPING:\n                        timelines.push(readTimeline1(input, new PhysicsConstraintDampingTimeline(frameCount, bezierCount, index), 1));\n                        break;\n                    case PHYSICS_MASS:\n                        timelines.push(readTimeline1(input, new PhysicsConstraintMassTimeline(frameCount, bezierCount, index), 1));\n                        break;\n                    case PHYSICS_WIND:\n                        timelines.push(readTimeline1(input, new PhysicsConstraintWindTimeline(frameCount, bezierCount, index), 1));\n                        break;\n                    case PHYSICS_GRAVITY:\n                        timelines.push(readTimeline1(input, new PhysicsConstraintGravityTimeline(frameCount, bezierCount, index), 1));\n                        break;\n                    case PHYSICS_MIX:\n                        timelines.push(readTimeline1(input, new PhysicsConstraintMixTimeline(frameCount, bezierCount, index), 1));\n                }\n            }\n        }\n        // Deform timelines.\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\n            let skin = skeletonData.skins[input.readInt(true)];\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n                let slotIndex = input.readInt(true);\n                for (let iii = 0, nnn = input.readInt(true); iii < nnn; iii++) {\n                    let attachmentName = input.readStringRef();\n                    if (!attachmentName)\n                        throw new Error(\"attachmentName must not be null.\");\n                    let attachment = skin.getAttachment(slotIndex, attachmentName);\n                    let timelineType = input.readByte();\n                    let frameCount = input.readInt(true);\n                    let frameLast = frameCount - 1;\n                    switch (timelineType) {\n                        case ATTACHMENT_DEFORM: {\n                            let vertexAttachment = attachment;\n                            let weighted = vertexAttachment.bones;\n                            let vertices = vertexAttachment.vertices;\n                            let deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\n                            let bezierCount = input.readInt(true);\n                            let timeline = new DeformTimeline(frameCount, bezierCount, slotIndex, vertexAttachment);\n                            let time = input.readFloat();\n                            for (let frame = 0, bezier = 0;; frame++) {\n                                let deform;\n                                let end = input.readInt(true);\n                                if (end == 0)\n                                    deform = weighted ? Utils.newFloatArray(deformLength) : vertices;\n                                else {\n                                    deform = Utils.newFloatArray(deformLength);\n                                    let start = input.readInt(true);\n                                    end += start;\n                                    if (scale == 1) {\n                                        for (let v = start; v < end; v++)\n                                            deform[v] = input.readFloat();\n                                    }\n                                    else {\n                                        for (let v = start; v < end; v++)\n                                            deform[v] = input.readFloat() * scale;\n                                    }\n                                    if (!weighted) {\n                                        for (let v = 0, vn = deform.length; v < vn; v++)\n                                            deform[v] += vertices[v];\n                                    }\n                                }\n                                timeline.setFrame(frame, time, deform);\n                                if (frame == frameLast)\n                                    break;\n                                let time2 = input.readFloat();\n                                switch (input.readByte()) {\n                                    case CURVE_STEPPED:\n                                        timeline.setStepped(frame);\n                                        break;\n                                    case CURVE_BEZIER:\n                                        setBezier(input, timeline, bezier++, frame, 0, time, time2, 0, 1, 1);\n                                }\n                                time = time2;\n                            }\n                            timelines.push(timeline);\n                            break;\n                        }\n                        case ATTACHMENT_SEQUENCE: {\n                            let timeline = new SequenceTimeline(frameCount, slotIndex, attachment);\n                            for (let frame = 0; frame < frameCount; frame++) {\n                                let time = input.readFloat();\n                                let modeAndIndex = input.readInt32();\n                                timeline.setFrame(frame, time, SequenceModeValues[modeAndIndex & 0xf], modeAndIndex >> 4, input.readFloat());\n                            }\n                            timelines.push(timeline);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        // Draw order timeline.\n        let drawOrderCount = input.readInt(true);\n        if (drawOrderCount > 0) {\n            let timeline = new DrawOrderTimeline(drawOrderCount);\n            let slotCount = skeletonData.slots.length;\n            for (let i = 0; i < drawOrderCount; i++) {\n                let time = input.readFloat();\n                let offsetCount = input.readInt(true);\n                let drawOrder = Utils.newArray(slotCount, 0);\n                for (let ii = slotCount - 1; ii >= 0; ii--)\n                    drawOrder[ii] = -1;\n                let unchanged = Utils.newArray(slotCount - offsetCount, 0);\n                let originalIndex = 0, unchangedIndex = 0;\n                for (let ii = 0; ii < offsetCount; ii++) {\n                    let slotIndex = input.readInt(true);\n                    // Collect unchanged items.\n                    while (originalIndex != slotIndex)\n                        unchanged[unchangedIndex++] = originalIndex++;\n                    // Set changed items.\n                    drawOrder[originalIndex + input.readInt(true)] = originalIndex++;\n                }\n                // Collect remaining unchanged items.\n                while (originalIndex < slotCount)\n                    unchanged[unchangedIndex++] = originalIndex++;\n                // Fill in unchanged items.\n                for (let ii = slotCount - 1; ii >= 0; ii--)\n                    if (drawOrder[ii] == -1)\n                        drawOrder[ii] = unchanged[--unchangedIndex];\n                timeline.setFrame(i, time, drawOrder);\n            }\n            timelines.push(timeline);\n        }\n        // Event timeline.\n        let eventCount = input.readInt(true);\n        if (eventCount > 0) {\n            let timeline = new EventTimeline(eventCount);\n            for (let i = 0; i < eventCount; i++) {\n                let time = input.readFloat();\n                let eventData = skeletonData.events[input.readInt(true)];\n                let event = new Event(time, eventData);\n                event.intValue = input.readInt(false);\n                event.floatValue = input.readFloat();\n                event.stringValue = input.readString();\n                if (event.stringValue == null)\n                    event.stringValue = eventData.stringValue;\n                if (event.data.audioPath) {\n                    event.volume = input.readFloat();\n                    event.balance = input.readFloat();\n                }\n                timeline.setFrame(i, event);\n            }\n            timelines.push(timeline);\n        }\n        let duration = 0;\n        for (let i = 0, n = timelines.length; i < n; i++)\n            duration = Math.max(duration, timelines[i].getDuration());\n        return new Animation(name, timelines, duration);\n    }\n}\nexport class BinaryInput {\n    strings;\n    index;\n    buffer;\n    constructor(data, strings = new Array(), index = 0, buffer = new DataView(data instanceof ArrayBuffer ? data : data.buffer)) {\n        this.strings = strings;\n        this.index = index;\n        this.buffer = buffer;\n    }\n    readByte() {\n        return this.buffer.getInt8(this.index++);\n    }\n    readUnsignedByte() {\n        return this.buffer.getUint8(this.index++);\n    }\n    readShort() {\n        let value = this.buffer.getInt16(this.index);\n        this.index += 2;\n        return value;\n    }\n    readInt32() {\n        let value = this.buffer.getInt32(this.index);\n        this.index += 4;\n        return value;\n    }\n    readInt(optimizePositive) {\n        let b = this.readByte();\n        let result = b & 0x7F;\n        if ((b & 0x80) != 0) {\n            b = this.readByte();\n            result |= (b & 0x7F) << 7;\n            if ((b & 0x80) != 0) {\n                b = this.readByte();\n                result |= (b & 0x7F) << 14;\n                if ((b & 0x80) != 0) {\n                    b = this.readByte();\n                    result |= (b & 0x7F) << 21;\n                    if ((b & 0x80) != 0) {\n                        b = this.readByte();\n                        result |= (b & 0x7F) << 28;\n                    }\n                }\n            }\n        }\n        return optimizePositive ? result : ((result >>> 1) ^ -(result & 1));\n    }\n    readStringRef() {\n        let index = this.readInt(true);\n        return index == 0 ? null : this.strings[index - 1];\n    }\n    readString() {\n        let byteCount = this.readInt(true);\n        switch (byteCount) {\n            case 0:\n                return null;\n            case 1:\n                return \"\";\n        }\n        byteCount--;\n        let chars = \"\";\n        let charCount = 0;\n        for (let i = 0; i < byteCount;) {\n            let b = this.readUnsignedByte();\n            switch (b >> 4) {\n                case 12:\n                case 13:\n                    chars += String.fromCharCode(((b & 0x1F) << 6 | this.readByte() & 0x3F));\n                    i += 2;\n                    break;\n                case 14:\n                    chars += String.fromCharCode(((b & 0x0F) << 12 | (this.readByte() & 0x3F) << 6 | this.readByte() & 0x3F));\n                    i += 3;\n                    break;\n                default:\n                    chars += String.fromCharCode(b);\n                    i++;\n            }\n        }\n        return chars;\n    }\n    readFloat() {\n        let value = this.buffer.getFloat32(this.index);\n        this.index += 4;\n        return value;\n    }\n    readBoolean() {\n        return this.readByte() != 0;\n    }\n}\nclass LinkedMesh {\n    parent;\n    skinIndex;\n    slotIndex;\n    mesh;\n    inheritTimeline;\n    constructor(mesh, skinIndex, slotIndex, parent, inheritDeform) {\n        this.mesh = mesh;\n        this.skinIndex = skinIndex;\n        this.slotIndex = slotIndex;\n        this.parent = parent;\n        this.inheritTimeline = inheritDeform;\n    }\n}\nclass Vertices {\n    bones;\n    vertices;\n    length;\n    constructor(bones = null, vertices = null, length = 0) {\n        this.bones = bones;\n        this.vertices = vertices;\n        this.length = length;\n    }\n}\nvar AttachmentType;\n(function (AttachmentType) {\n    AttachmentType[AttachmentType[\"Region\"] = 0] = \"Region\";\n    AttachmentType[AttachmentType[\"BoundingBox\"] = 1] = \"BoundingBox\";\n    AttachmentType[AttachmentType[\"Mesh\"] = 2] = \"Mesh\";\n    AttachmentType[AttachmentType[\"LinkedMesh\"] = 3] = \"LinkedMesh\";\n    AttachmentType[AttachmentType[\"Path\"] = 4] = \"Path\";\n    AttachmentType[AttachmentType[\"Point\"] = 5] = \"Point\";\n    AttachmentType[AttachmentType[\"Clipping\"] = 6] = \"Clipping\";\n})(AttachmentType || (AttachmentType = {}));\nfunction readTimeline1(input, timeline, scale) {\n    let time = input.readFloat(), value = input.readFloat() * scale;\n    for (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1;; frame++) {\n        timeline.setFrame(frame, time, value);\n        if (frame == frameLast)\n            break;\n        let time2 = input.readFloat(), value2 = input.readFloat() * scale;\n        switch (input.readByte()) {\n            case CURVE_STEPPED:\n                timeline.setStepped(frame);\n                break;\n            case CURVE_BEZIER:\n                setBezier(input, timeline, bezier++, frame, 0, time, time2, value, value2, scale);\n        }\n        time = time2;\n        value = value2;\n    }\n    return timeline;\n}\nfunction readTimeline2(input, timeline, scale) {\n    let time = input.readFloat(), value1 = input.readFloat() * scale, value2 = input.readFloat() * scale;\n    for (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1;; frame++) {\n        timeline.setFrame(frame, time, value1, value2);\n        if (frame == frameLast)\n            break;\n        let time2 = input.readFloat(), nvalue1 = input.readFloat() * scale, nvalue2 = input.readFloat() * scale;\n        switch (input.readByte()) {\n            case CURVE_STEPPED:\n                timeline.setStepped(frame);\n                break;\n            case CURVE_BEZIER:\n                setBezier(input, timeline, bezier++, frame, 0, time, time2, value1, nvalue1, scale);\n                setBezier(input, timeline, bezier++, frame, 1, time, time2, value2, nvalue2, scale);\n        }\n        time = time2;\n        value1 = nvalue1;\n        value2 = nvalue2;\n    }\n    return timeline;\n}\nfunction setBezier(input, timeline, bezier, frame, value, time1, time2, value1, value2, scale) {\n    timeline.setBezier(bezier, frame, value, time1, value1, input.readFloat(), input.readFloat() * scale, input.readFloat(), input.readFloat() * scale, time2, value2);\n}\nconst BONE_ROTATE = 0;\nconst BONE_TRANSLATE = 1;\nconst BONE_TRANSLATEX = 2;\nconst BONE_TRANSLATEY = 3;\nconst BONE_SCALE = 4;\nconst BONE_SCALEX = 5;\nconst BONE_SCALEY = 6;\nconst BONE_SHEAR = 7;\nconst BONE_SHEARX = 8;\nconst BONE_SHEARY = 9;\nconst BONE_INHERIT = 10;\nconst SLOT_ATTACHMENT = 0;\nconst SLOT_RGBA = 1;\nconst SLOT_RGB = 2;\nconst SLOT_RGBA2 = 3;\nconst SLOT_RGB2 = 4;\nconst SLOT_ALPHA = 5;\nconst ATTACHMENT_DEFORM = 0;\nconst ATTACHMENT_SEQUENCE = 1;\nconst PATH_POSITION = 0;\nconst PATH_SPACING = 1;\nconst PATH_MIX = 2;\nconst PHYSICS_INERTIA = 0;\nconst PHYSICS_STRENGTH = 1;\nconst PHYSICS_DAMPING = 2;\nconst PHYSICS_MASS = 4;\nconst PHYSICS_WIND = 5;\nconst PHYSICS_GRAVITY = 6;\nconst PHYSICS_MIX = 7;\nconst PHYSICS_RESET = 8;\nconst CURVE_LINEAR = 0;\nconst CURVE_STEPPED = 1;\nconst CURVE_BEZIER = 2;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2tlbGV0b25CaW5hcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvU2tlbGV0b25CaW5hcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrRUEyQitFO0FBRS9FLE9BQU8sRUFBRSxTQUFTLEVBQVksZUFBZSxFQUFFLGtCQUFrQixFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLG9CQUFvQixFQUFFLDJCQUEyQixFQUFFLDhCQUE4QixFQUFFLDZCQUE2QixFQUFFLHlCQUF5QixFQUFFLGNBQWMsRUFBRSxpQkFBaUIsRUFBRSxhQUFhLEVBQWlELGdCQUFnQixFQUFFLDhCQUE4QixFQUFFLGdDQUFnQyxFQUFFLGlDQUFpQyxFQUFFLGdDQUFnQyxFQUFFLDZCQUE2QixFQUFFLDZCQUE2QixFQUFFLGdDQUFnQyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFLLzBCLE9BQU8sRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDbkMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDeEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1B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QUFDO3dCQUN6QyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxLQUFLLENBQUM7d0JBQ3pDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEtBQUssQ0FBQzt3QkFDekMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsS0FBSyxDQUFDO3dCQUMxQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxLQUFLLENBQUM7d0JBQzFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEtBQUssQ0FBQzt3QkFFMUMsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsR0FBSSxLQUFLLEVBQUUsRUFBRSxDQUFDOzRCQUMzQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7NEJBQ3ZELElBQUksS0FBSyxJQUFJLFNBQVM7Z0NBQUUsTUFBTTs0QkFDOUIsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDOzRCQUM5QixJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxLQUFLLENBQUM7NEJBQzFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEtBQUssQ0FBQzs0QkFDMUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsS0FBSyxDQUFDOzRCQUMxQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxLQUFLLENBQUM7NEJBQzFDLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEtBQUssQ0FBQzs0QkFDM0MsSUFBSSxHQUFHLEdBQUcs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SUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsS0FBSyxDQUFDO3dCQUMxQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxLQUFLLENBQUM7d0JBQzFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEtBQUssQ0FBQzt3QkFFMUMsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsR0FBSSxLQUFLLEVBQUUsRUFBRSxDQUFDOzRCQUMzQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQzs0QkFDcEQsSUFBSSxLQUFLLElBQUksU0FBUztnQ0FBRSxNQUFNOzRCQUM5QixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7NEJBQzlCLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEtBQUssQ0FBQzs0QkFDMUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsS0FBSyxDQUFDOzRCQUMxQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxLQUFLLENBQUM7NEJBQzFDLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEtBQUssQ0FBQzs0QkFDM0MsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsS0FBSyxDQUFDOzRCQUMzQyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxLQUFLLENBQUM7NEJBRTNDLFFBQVEsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7Z0NBQzFCLEtBQUssYUFBYTtvQ0FDakIsUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztv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UyxHQUFHLENBQUMsQ0FBQztBQUNwQixNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFDbkIsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBQztBQUNwQixNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFFckIsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7QUFDNUIsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLENBQUM7QUFFOUIsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQztBQUN2QixNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFFbkIsTUFBTSxlQUFlLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQztBQUMxQixNQUFNLFlBQVksR0FBRyxDQUFDLENBQUM7QUFDdkIsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQztBQUMxQixNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDdEIsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBRXhCLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQztBQUN2QixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFDeEIsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogU3BpbmUgUnVudGltZXMgTGljZW5zZSBBZ3JlZW1lbnRcbiAqIExhc3QgdXBkYXRlZCBKdWx5IDI4LCAyMDIzLiBSZXBsYWNlcyBhbGwgcHJpb3IgdmVyc2lvbnMuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLTIwMjMsIEVzb3RlcmljIFNvZnR3YXJlIExMQ1xuICpcbiAqIEludGVncmF0aW9uIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpbnRvIHNvZnR3YXJlIG9yIG90aGVyd2lzZSBjcmVhdGluZ1xuICogZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgaXMgcGVybWl0dGVkIHVuZGVyIHRoZSB0ZXJtcyBhbmRcbiAqIGNvbmRpdGlvbnMgb2YgU2VjdGlvbiAyIG9mIHRoZSBTcGluZSBFZGl0b3IgTGljZW5zZSBBZ3JlZW1lbnQ6XG4gKiBodHRwOi8vZXNvdGVyaWNzb2Z0d2FyZS5jb20vc3BpbmUtZWRpdG9yLWxpY2Vuc2VcbiAqXG4gKiBPdGhlcndpc2UsIGl0IGlzIHBlcm1pdHRlZCB0byBpbnRlZ3JhdGUgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3JcbiAqIG90aGVyd2lzZSBjcmVhdGUgZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgKGNvbGxlY3RpdmVseSxcbiAqIFwiUHJvZHVjdHNcIiksIHByb3ZpZGVkIHRoYXQgZWFjaCB1c2VyIG9mIHRoZSBQcm9kdWN0cyBtdXN0IG9idGFpbiB0aGVpciBvd25cbiAqIFNwaW5lIEVkaXRvciBsaWNlbnNlIGFuZCByZWRpc3RyaWJ1dGlvbiBvZiB0aGUgUHJvZHVjdHMgaW4gYW55IGZvcm0gbXVzdFxuICogaW5jbHVkZSB0aGlzIGxpY2Vuc2UgYW5kIGNvcHlyaWdodCBub3RpY2UuXG4gKlxuICogVEhFIFNQSU5FIFJVTlRJTUVTIEFSRSBQUk9WSURFRCBCWSBFU09URVJJQyBTT0ZUV0FSRSBMTEMgXCJBUyBJU1wiIEFORCBBTllcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEVTT1RFUklDIFNPRlRXQVJFIExMQyBCRSBMSUFCTEUgRk9SIEFOWVxuICogRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbiAqIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUyxcbiAqIEJVU0lORVNTIElOVEVSUlVQVElPTiwgT1IgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFMpIEhPV0VWRVIgQ0FVU0VEIEFORFxuICogT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSEVcbiAqIFNQSU5FIFJVTlRJTUVTLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgeyBBbmltYXRpb24sIFRpbWVsaW5lLCBJbmhlcml0VGltZWxpbmUsIEF0dGFjaG1lbnRUaW1lbGluZSwgUkdCQVRpbWVsaW5lLCBSR0JUaW1lbGluZSwgUkdCQTJUaW1lbGluZSwgUkdCMlRpbWVsaW5lLCBBbHBoYVRpbWVsaW5lLCBSb3RhdGVUaW1lbGluZSwgVHJhbnNsYXRlVGltZWxpbmUsIFRyYW5zbGF0ZVhUaW1lbGluZSwgVHJhbnNsYXRlWVRpbWVsaW5lLCBTY2FsZVRpbWVsaW5lLCBTY2FsZVhUaW1lbGluZSwgU2NhbGVZVGltZWxpbmUsIFNoZWFyVGltZWxpbmUsIFNoZWFyWFRpbWVsaW5lLCBTaGVhcllUaW1lbGluZSwgSWtDb25zdHJhaW50VGltZWxpbmUsIFRyYW5zZm9ybUNvbnN0cmFpbnRUaW1lbGluZSwgUGF0aENvbnN0cmFpbnRQb3NpdGlvblRpbWVsaW5lLCBQYXRoQ29uc3RyYWludFNwYWNpbmdUaW1lbGluZSwgUGF0aENvbnN0cmFpbnRNaXhUaW1lbGluZSwgRGVmb3JtVGltZWxpbmUsIERyYXdPcmRlclRpbWVsaW5lLCBFdmVudFRpbWVsaW5lLCBDdXJ2ZVRpbWVsaW5lMSwgQ3VydmVUaW1lbGluZTIsIEN1cnZlVGltZWxpbmUsIFNlcXVlbmNlVGltZWxpbmUsIFBoeXNpY3NDb25zdHJhaW50UmVzZXRUaW1lbGluZSwgUGh5c2ljc0NvbnN0cmFpbnRJbmVydGlhVGltZWxpbmUsIFBoeXNpY3NDb25zdHJhaW50U3RyZW5ndGhUaW1lbGluZSwgUGh5c2ljc0NvbnN0cmFpbnREYW1waW5nVGltZWxpbmUsIFBoeXNpY3NDb25zdHJhaW50TWFzc1RpbWVsaW5lLCBQaHlzaWNzQ29uc3RyYWludFdpbmRUaW1lbGluZSwgUGh5c2ljc0NvbnN0cmFpbnRHcmF2aXR5VGltZWxpbmUsIFBoeXNpY3NDb25zdHJhaW50TWl4VGltZWxpbmUgfSBmcm9tIFwiLi9BbmltYXRpb24uanNcIjtcbmltcG9ydCB7IFZlcnRleEF0dGFjaG1lbnQsIEF0dGFjaG1lbnQgfSBmcm9tIFwiLi9hdHRhY2htZW50cy9BdHRhY2htZW50LmpzXCI7XG5pbXBvcnQgeyBBdHRhY2htZW50TG9hZGVyIH0gZnJvbSBcIi4vYXR0YWNobWVudHMvQXR0YWNobWVudExvYWRlci5qc1wiO1xuaW1wb3J0IHsgSGFzVGV4dHVyZVJlZ2lvbiB9IGZyb20gXCIuL2F0dGFjaG1lbnRzL0hhc1RleHR1cmVSZWdpb24uanNcIjtcbmltcG9ydCB7IE1lc2hBdHRhY2htZW50IH0gZnJvbSBcIi4vYXR0YWNobWVudHMvTWVzaEF0dGFjaG1lbnQuanNcIjtcbmltcG9ydCB7IFNlcXVlbmNlLCBTZXF1ZW5jZU1vZGVWYWx1ZXMgfSBmcm9tIFwiLi9hdHRhY2htZW50cy9TZXF1ZW5jZS5qc1wiO1xuaW1wb3J0IHsgQm9uZURhdGEgfSBmcm9tIFwiLi9Cb25lRGF0YS5qc1wiO1xuaW1wb3J0IHsgRXZlbnQgfSBmcm9tIFwiLi9FdmVudC5qc1wiO1xuaW1wb3J0IHsgRXZlbnREYXRhIH0gZnJvbSBcIi4vRXZlbnREYXRhLmpzXCI7XG5pbXBvcnQgeyBJa0NvbnN0cmFpbnREYXRhIH0gZnJvbSBcIi4vSWtDb25zdHJhaW50RGF0YS5qc1wiO1xuaW1wb3J0IHsgUGF0aENvbnN0cmFpbnREYXRhLCBQb3NpdGlvbk1vZGUsIFNwYWNpbmdNb2RlIH0gZnJvbSBcIi4vUGF0aENvbnN0cmFpbnREYXRhLmpzXCI7XG5pbXBvcnQgeyBQaHlzaWNzQ29uc3RyYWludERhdGEgfSBmcm9tIFwiLi9QaHlzaWNzQ29uc3RyYWludERhdGEuanNcIjtcbmltcG9ydCB7IFNrZWxldG9uRGF0YSB9IGZyb20gXCIuL1NrZWxldG9uRGF0YS5qc1wiO1xuaW1wb3J0IHsgU2tpbiB9IGZyb20gXCIuL1NraW4uanNcIjtcbmltcG9ydCB7IFNsb3REYXRhIH0gZnJvbSBcIi4vU2xvdERhdGEuanNcIjtcbmltcG9ydCB7IFRyYW5zZm9ybUNvbnN0cmFpbnREYXRhIH0gZnJvbSBcIi4vVHJhbnNmb3JtQ29uc3RyYWludERhdGEuanNcIjtcbmltcG9ydCB7IENvbG9yLCBVdGlscyB9IGZyb20gXCIuL1V0aWxzLmpzXCI7XG5cbi8qKiBMb2FkcyBza2VsZXRvbiBkYXRhIGluIHRoZSBTcGluZSBiaW5hcnkgZm9ybWF0LlxuICpcbiAqIFNlZSBbU3BpbmUgYmluYXJ5IGZvcm1hdF0oaHR0cDovL2Vzb3Rlcmljc29mdHdhcmUuY29tL3NwaW5lLWJpbmFyeS1mb3JtYXQpIGFuZFxuICogW0pTT04gYW5kIGJpbmFyeSBkYXRhXShodHRwOi8vZXNvdGVyaWNzb2Z0d2FyZS5jb20vc3BpbmUtbG9hZGluZy1za2VsZXRvbi1kYXRhI0pTT04tYW5kLWJpbmFyeS1kYXRhKSBpbiB0aGUgU3BpbmVcbiAqIFJ1bnRpbWVzIEd1aWRlLiAqL1xuZXhwb3J0IGNsYXNzIFNrZWxldG9uQmluYXJ5IHtcblx0LyoqIFNjYWxlcyBib25lIHBvc2l0aW9ucywgaW1hZ2Ugc2l6ZXMsIGFuZCB0cmFuc2xhdGlvbnMgYXMgdGhleSBhcmUgbG9hZGVkLiBUaGlzIGFsbG93cyBkaWZmZXJlbnQgc2l6ZSBpbWFnZXMgdG8gYmUgdXNlZCBhdFxuXHQgKiBydW50aW1lIHRoYW4gd2VyZSB1c2VkIGluIFNwaW5lLlxuXHQgKlxuXHQgKiBTZWUgW1NjYWxpbmddKGh0dHA6Ly9lc290ZXJpY3NvZnR3YXJlLmNvbS9zcGluZS1sb2FkaW5nLXNrZWxldG9uLWRhdGEjU2NhbGluZykgaW4gdGhlIFNwaW5lIFJ1bnRpbWVzIEd1aWRlLiAqL1xuXHRzY2FsZSA9IDE7XG5cblx0YXR0YWNobWVudExvYWRlcjogQXR0YWNobWVudExvYWRlcjtcblx0cHJpdmF0ZSBsaW5rZWRNZXNoZXMgPSBuZXcgQXJyYXk8TGlua2VkTWVzaD4oKTtcblxuXHRjb25zdHJ1Y3RvciAoYXR0YWNobWVudExvYWRlcjogQXR0YWNobWVudExvYWRlcikge1xuXHRcdHRoaXMuYXR0YWNobWVudExvYWRlciA9IGF0dGFjaG1lbnRMb2FkZXI7XG5cdH1cblxuXHRyZWFkU2tlbGV0b25EYXRhIChiaW5hcnk6IFVpbnQ4QXJyYXkgfCBBcnJheUJ1ZmZlcik6IFNrZWxldG9uRGF0YSB7XG5cdFx0bGV0IHNjYWxlID0gdGhpcy5zY2FsZTtcblxuXHRcdGxldCBza2VsZXRvbkRhdGEgPSBuZXcgU2tlbGV0b25EYXRhKCk7XG5cdFx0c2tlbGV0b25EYXRhLm5hbWUgPSBcIlwiOyAvLyBCT1pPXG5cblx0XHRsZXQgaW5wdXQgPSBuZXcgQmluYXJ5SW5wdXQoYmluYXJ5KTtcblxuXHRcdGxldCBsb3dIYXNoID0gaW5wdXQucmVhZEludDMyKCk7XG5cdFx0bGV0IGhpZ2hIYXNoID0gaW5wdXQucmVhZEludDMyKCk7XG5cdFx0c2tlbGV0b25EYXRhLmhhc2ggPSBoaWdoSGFzaCA9PSAwICYmIGxvd0hhc2ggPT0gMCA/IG51bGwgOiBoaWdoSGFzaC50b1N0cmluZygxNikgKyBsb3dIYXNoLnRvU3RyaW5nKDE2KTtcblx0XHRza2VsZXRvbkRhdGEudmVyc2lvbiA9IGlucHV0LnJlYWRTdHJpbmcoKTtcblx0XHRza2VsZXRvbkRhdGEueCA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdHNrZWxldG9uRGF0YS55ID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0c2tlbGV0b25EYXRhLndpZHRoID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0c2tlbGV0b25EYXRhLmhlaWdodCA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdHNrZWxldG9uRGF0YS5yZWZlcmVuY2VTY2FsZSA9IGlucHV0LnJlYWRGbG9hdCgpICogc2NhbGU7XG5cblx0XHRsZXQgbm9uZXNzZW50aWFsID0gaW5wdXQucmVhZEJvb2xlYW4oKTtcblx0XHRpZiAobm9uZXNzZW50aWFsKSB7XG5cdFx0XHRza2VsZXRvbkRhdGEuZnBzID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRza2VsZXRvbkRhdGEuaW1hZ2VzUGF0aCA9IGlucHV0LnJlYWRTdHJpbmcoKTtcblx0XHRcdHNrZWxldG9uRGF0YS5hdWRpb1BhdGggPSBpbnB1dC5yZWFkU3RyaW5nKCk7XG5cdFx0fVxuXG5cdFx0bGV0IG4gPSAwO1xuXHRcdC8vIFN0cmluZ3MuXG5cdFx0biA9IGlucHV0LnJlYWRJbnQodHJ1ZSlcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuXHRcdFx0bGV0IHN0ciA9IGlucHV0LnJlYWRTdHJpbmcoKTtcblx0XHRcdGlmICghc3RyKSB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmcgaW4gc3RyaW5nIHRhYmxlIG11c3Qgbm90IGJlIG51bGwuXCIpO1xuXHRcdFx0aW5wdXQuc3RyaW5ncy5wdXNoKHN0cik7XG5cdFx0fVxuXG5cdFx0Ly8gQm9uZXMuXG5cdFx0biA9IGlucHV0LnJlYWRJbnQodHJ1ZSlcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuXHRcdFx0bGV0IG5hbWUgPSBpbnB1dC5yZWFkU3RyaW5nKCk7XG5cdFx0XHRpZiAoIW5hbWUpIHRocm93IG5ldyBFcnJvcihcIkJvbmUgbmFtZSBtdXN0IG5vdCBiZSBudWxsLlwiKTtcblx0XHRcdGxldCBwYXJlbnQgPSBpID09IDAgPyBudWxsIDogc2tlbGV0b25EYXRhLmJvbmVzW2lucHV0LnJlYWRJbnQodHJ1ZSldO1xuXHRcdFx0bGV0IGRhdGEgPSBuZXcgQm9uZURhdGEoaSwgbmFtZSwgcGFyZW50KTtcblx0XHRcdGRhdGEucm90YXRpb24gPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdGRhdGEueCA9IGlucHV0LnJlYWRGbG9hdCgpICogc2NhbGU7XG5cdFx0XHRkYXRhLnkgPSBpbnB1dC5yZWFkRmxvYXQoKSAqIHNjYWxlO1xuXHRcdFx0ZGF0YS5zY2FsZVggPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdGRhdGEuc2NhbGVZID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRkYXRhLnNoZWFyWCA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0ZGF0YS5zaGVhclkgPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdGRhdGEubGVuZ3RoID0gaW5wdXQucmVhZEZsb2F0KCkgKiBzY2FsZTtcblx0XHRcdGRhdGEuaW5oZXJpdCA9IGlucHV0LnJlYWRCeXRlKCk7XG5cdFx0XHRkYXRhLnNraW5SZXF1aXJlZCA9IGlucHV0LnJlYWRCb29sZWFuKCk7XG5cdFx0XHRpZiAobm9uZXNzZW50aWFsKSB7XG5cdFx0XHRcdENvbG9yLnJnYmE4ODg4VG9Db2xvcihkYXRhLmNvbG9yLCBpbnB1dC5yZWFkSW50MzIoKSk7XG5cdFx0XHRcdGRhdGEuaWNvbiA9IGlucHV0LnJlYWRTdHJpbmcoKSA/PyB1bmRlZmluZWQ7XG5cdFx0XHRcdGRhdGEudmlzaWJsZSA9IGlucHV0LnJlYWRCb29sZWFuKCk7XG5cdFx0XHR9XG5cdFx0XHRza2VsZXRvbkRhdGEuYm9uZXMucHVzaChkYXRhKTtcblx0XHR9XG5cblx0XHQvLyBTbG90cy5cblx0XHRuID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuXHRcdFx0bGV0IHNsb3ROYW1lID0gaW5wdXQucmVhZFN0cmluZygpO1xuXHRcdFx0aWYgKCFzbG90TmFtZSkgdGhyb3cgbmV3IEVycm9yKFwiU2xvdCBuYW1lIG11c3Qgbm90IGJlIG51bGwuXCIpO1xuXHRcdFx0bGV0IGJvbmVEYXRhID0gc2tlbGV0b25EYXRhLmJvbmVzW2lucHV0LnJlYWRJbnQodHJ1ZSldO1xuXHRcdFx0bGV0IGRhdGEgPSBuZXcgU2xvdERhdGEoaSwgc2xvdE5hbWUsIGJvbmVEYXRhKTtcblx0XHRcdENvbG9yLnJnYmE4ODg4VG9Db2xvcihkYXRhLmNvbG9yLCBpbnB1dC5yZWFkSW50MzIoKSk7XG5cblx0XHRcdGxldCBkYXJrQ29sb3IgPSBpbnB1dC5yZWFkSW50MzIoKTtcblx0XHRcdGlmIChkYXJrQ29sb3IgIT0gLTEpIENvbG9yLnJnYjg4OFRvQ29sb3IoZGF0YS5kYXJrQ29sb3IgPSBuZXcgQ29sb3IoKSwgZGFya0NvbG9yKTtcblxuXHRcdFx0ZGF0YS5hdHRhY2htZW50TmFtZSA9IGlucHV0LnJlYWRTdHJpbmdSZWYoKTtcblx0XHRcdGRhdGEuYmxlbmRNb2RlID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRcdGlmIChub25lc3NlbnRpYWwpIGRhdGEudmlzaWJsZSA9IGlucHV0LnJlYWRCb29sZWFuKCk7XG5cdFx0XHRza2VsZXRvbkRhdGEuc2xvdHMucHVzaChkYXRhKTtcblx0XHR9XG5cblx0XHQvLyBJSyBjb25zdHJhaW50cy5cblx0XHRuID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRmb3IgKGxldCBpID0gMCwgbm47IGkgPCBuOyBpKyspIHtcblx0XHRcdGxldCBuYW1lID0gaW5wdXQucmVhZFN0cmluZygpO1xuXHRcdFx0aWYgKCFuYW1lKSB0aHJvdyBuZXcgRXJyb3IoXCJJSyBjb25zdHJhaW50IGRhdGEgbmFtZSBtdXN0IG5vdCBiZSBudWxsLlwiKTtcblx0XHRcdGxldCBkYXRhID0gbmV3IElrQ29uc3RyYWludERhdGEobmFtZSk7XG5cdFx0XHRkYXRhLm9yZGVyID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRcdG5uID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRcdGZvciAobGV0IGlpID0gMDsgaWkgPCBubjsgaWkrKylcblx0XHRcdFx0ZGF0YS5ib25lcy5wdXNoKHNrZWxldG9uRGF0YS5ib25lc1tpbnB1dC5yZWFkSW50KHRydWUpXSk7XG5cdFx0XHRkYXRhLnRhcmdldCA9IHNrZWxldG9uRGF0YS5ib25lc1tpbnB1dC5yZWFkSW50KHRydWUpXTtcblx0XHRcdGxldCBmbGFncyA9IGlucHV0LnJlYWRCeXRlKCk7XG5cdFx0XHRkYXRhLnNraW5SZXF1aXJlZCA9IChmbGFncyAmIDEpICE9IDA7XG5cdFx0XHRkYXRhLmJlbmREaXJlY3Rpb24gPSAoZmxhZ3MgJiAyKSAhPSAwID8gMSA6IC0xO1xuXHRcdFx0ZGF0YS5jb21wcmVzcyA9IChmbGFncyAmIDQpICE9IDA7XG5cdFx0XHRkYXRhLnN0cmV0Y2ggPSAoZmxhZ3MgJiA4KSAhPSAwO1xuXHRcdFx0ZGF0YS51bmlmb3JtID0gKGZsYWdzICYgMTYpICE9IDA7XG5cdFx0XHRpZiAoKGZsYWdzICYgMzIpICE9IDApIGRhdGEubWl4ID0gKGZsYWdzICYgNjQpICE9IDAgPyBpbnB1dC5yZWFkRmxvYXQoKSA6IDE7XG5cdFx0XHRpZiAoKGZsYWdzICYgMTI4KSAhPSAwKSBkYXRhLnNvZnRuZXNzID0gaW5wdXQucmVhZEZsb2F0KCkgKiBzY2FsZTtcblx0XHRcdHNrZWxldG9uRGF0YS5pa0NvbnN0cmFpbnRzLnB1c2goZGF0YSk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJhbnNmb3JtIGNvbnN0cmFpbnRzLlxuXHRcdG4gPSBpbnB1dC5yZWFkSW50KHRydWUpO1xuXHRcdGZvciAobGV0IGkgPSAwLCBubjsgaSA8IG47IGkrKykge1xuXHRcdFx0bGV0IG5hbWUgPSBpbnB1dC5yZWFkU3RyaW5nKCk7XG5cdFx0XHRpZiAoIW5hbWUpIHRocm93IG5ldyBFcnJvcihcIlRyYW5zZm9ybSBjb25zdHJhaW50IGRhdGEgbmFtZSBtdXN0IG5vdCBiZSBudWxsLlwiKTtcblx0XHRcdGxldCBkYXRhID0gbmV3IFRyYW5zZm9ybUNvbnN0cmFpbnREYXRhKG5hbWUpO1xuXHRcdFx0ZGF0YS5vcmRlciA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0XHRubiA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0XHRmb3IgKGxldCBpaSA9IDA7IGlpIDwgbm47IGlpKyspXG5cdFx0XHRcdGRhdGEuYm9uZXMucHVzaChza2VsZXRvbkRhdGEuYm9uZXNbaW5wdXQucmVhZEludCh0cnVlKV0pO1xuXHRcdFx0ZGF0YS50YXJnZXQgPSBza2VsZXRvbkRhdGEuYm9uZXNbaW5wdXQucmVhZEludCh0cnVlKV07XG5cdFx0XHRsZXQgZmxhZ3MgPSBpbnB1dC5yZWFkQnl0ZSgpO1xuXHRcdFx0ZGF0YS5za2luUmVxdWlyZWQgPSAoZmxhZ3MgJiAxKSAhPSAwO1xuXHRcdFx0ZGF0YS5sb2NhbCA9IChmbGFncyAmIDIpICE9IDA7XG5cdFx0XHRkYXRhLnJlbGF0aXZlID0gKGZsYWdzICYgNCkgIT0gMDtcblx0XHRcdGlmICgoZmxhZ3MgJiA4KSAhPSAwKSBkYXRhLm9mZnNldFJvdGF0aW9uID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRpZiAoKGZsYWdzICYgMTYpICE9IDApIGRhdGEub2Zmc2V0WCA9IGlucHV0LnJlYWRGbG9hdCgpICogc2NhbGU7XG5cdFx0XHRpZiAoKGZsYWdzICYgMzIpICE9IDApIGRhdGEub2Zmc2V0WSA9IGlucHV0LnJlYWRGbG9hdCgpICogc2NhbGU7XG5cdFx0XHRpZiAoKGZsYWdzICYgNjQpICE9IDApIGRhdGEub2Zmc2V0U2NhbGVYID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRpZiAoKGZsYWdzICYgMTI4KSAhPSAwKSBkYXRhLm9mZnNldFNjYWxlWSA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0ZmxhZ3MgPSBpbnB1dC5yZWFkQnl0ZSgpO1xuXHRcdFx0aWYgKChmbGFncyAmIDEpICE9IDApIGRhdGEub2Zmc2V0U2hlYXJZID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRpZiAoKGZsYWdzICYgMikgIT0gMCkgZGF0YS5taXhSb3RhdGUgPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdGlmICgoZmxhZ3MgJiA0KSAhPSAwKSBkYXRhLm1peFggPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdGlmICgoZmxhZ3MgJiA4KSAhPSAwKSBkYXRhLm1peFkgPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdGlmICgoZmxhZ3MgJiAxNikgIT0gMCkgZGF0YS5taXhTY2FsZVggPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdGlmICgoZmxhZ3MgJiAzMikgIT0gMCkgZGF0YS5taXhTY2FsZVkgPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdGlmICgoZmxhZ3MgJiA2NCkgIT0gMCkgZGF0YS5taXhTaGVhclkgPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdHNrZWxldG9uRGF0YS50cmFuc2Zvcm1Db25zdHJhaW50cy5wdXNoKGRhdGEpO1xuXHRcdH1cblxuXHRcdC8vIFBhdGggY29uc3RyYWludHMuXG5cdFx0biA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0Zm9yIChsZXQgaSA9IDAsIG5uOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRsZXQgbmFtZSA9IGlucHV0LnJlYWRTdHJpbmcoKTtcblx0XHRcdGlmICghbmFtZSkgdGhyb3cgbmV3IEVycm9yKFwiUGF0aCBjb25zdHJhaW50IGRhdGEgbmFtZSBtdXN0IG5vdCBiZSBudWxsLlwiKTtcblx0XHRcdGxldCBkYXRhID0gbmV3IFBhdGhDb25zdHJhaW50RGF0YShuYW1lKTtcblx0XHRcdGRhdGEub3JkZXIgPSBpbnB1dC5yZWFkSW50KHRydWUpO1xuXHRcdFx0ZGF0YS5za2luUmVxdWlyZWQgPSBpbnB1dC5yZWFkQm9vbGVhbigpO1xuXHRcdFx0bm4gPSBpbnB1dC5yZWFkSW50KHRydWUpO1xuXHRcdFx0Zm9yIChsZXQgaWkgPSAwOyBpaSA8IG5uOyBpaSsrKVxuXHRcdFx0XHRkYXRhLmJvbmVzLnB1c2goc2tlbGV0b25EYXRhLmJvbmVzW2lucHV0LnJlYWRJbnQodHJ1ZSldKTtcblx0XHRcdGRhdGEudGFyZ2V0ID0gc2tlbGV0b25EYXRhLnNsb3RzW2lucHV0LnJlYWRJbnQodHJ1ZSldO1xuXHRcdFx0Y29uc3QgZmxhZ3MgPSBpbnB1dC5yZWFkQnl0ZSgpO1xuXHRcdFx0ZGF0YS5wb3NpdGlvbk1vZGUgPSBmbGFncyAmIDE7XG5cdFx0XHRkYXRhLnNwYWNpbmdNb2RlID0gKGZsYWdzID4+IDEpICYgMztcblx0XHRcdGRhdGEucm90YXRlTW9kZSA9IChmbGFncyA+PiAzKSAmIDM7XG5cdFx0XHRpZiAoKGZsYWdzICYgMTI4KSAhPSAwKSBkYXRhLm9mZnNldFJvdGF0aW9uID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRkYXRhLnBvc2l0aW9uID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRpZiAoZGF0YS5wb3NpdGlvbk1vZGUgPT0gUG9zaXRpb25Nb2RlLkZpeGVkKSBkYXRhLnBvc2l0aW9uICo9IHNjYWxlO1xuXHRcdFx0ZGF0YS5zcGFjaW5nID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRpZiAoZGF0YS5zcGFjaW5nTW9kZSA9PSBTcGFjaW5nTW9kZS5MZW5ndGggfHwgZGF0YS5zcGFjaW5nTW9kZSA9PSBTcGFjaW5nTW9kZS5GaXhlZCkgZGF0YS5zcGFjaW5nICo9IHNjYWxlO1xuXHRcdFx0ZGF0YS5taXhSb3RhdGUgPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdGRhdGEubWl4WCA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0ZGF0YS5taXhZID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRza2VsZXRvbkRhdGEucGF0aENvbnN0cmFpbnRzLnB1c2goZGF0YSk7XG5cdFx0fVxuXG5cdFx0Ly8gUGh5c2ljcyBjb25zdHJhaW50cy5cblx0XHRuID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRmb3IgKGxldCBpID0gMCwgbm47IGkgPCBuOyBpKyspIHtcblx0XHRcdGNvbnN0IG5hbWUgPSBpbnB1dC5yZWFkU3RyaW5nKCk7XG5cdFx0XHRpZiAoIW5hbWUpIHRocm93IG5ldyBFcnJvcihcIlBoeXNpY3MgY29uc3RyYWludCBkYXRhIG5hbWUgbXVzdCBub3QgYmUgbnVsbC5cIik7XG5cdFx0XHRjb25zdCBkYXRhID0gbmV3IFBoeXNpY3NDb25zdHJhaW50RGF0YShuYW1lKTtcblx0XHRcdGRhdGEub3JkZXIgPSBpbnB1dC5yZWFkSW50KHRydWUpO1xuXHRcdFx0ZGF0YS5ib25lID0gc2tlbGV0b25EYXRhLmJvbmVzW2lucHV0LnJlYWRJbnQodHJ1ZSldO1xuXHRcdFx0bGV0IGZsYWdzID0gaW5wdXQucmVhZEJ5dGUoKTtcblx0XHRcdGRhdGEuc2tpblJlcXVpcmVkID0gKGZsYWdzICYgMSkgIT0gMDtcblx0XHRcdGlmICgoZmxhZ3MgJiAyKSAhPSAwKSBkYXRhLnggPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdGlmICgoZmxhZ3MgJiA0KSAhPSAwKSBkYXRhLnkgPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdGlmICgoZmxhZ3MgJiA4KSAhPSAwKSBkYXRhLnJvdGF0ZSA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0aWYgKChmbGFncyAmIDE2KSAhPSAwKSBkYXRhLnNjYWxlWCA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0aWYgKChmbGFncyAmIDMyKSAhPSAwKSBkYXRhLnNoZWFyWCA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0ZGF0YS5saW1pdCA9ICgoZmxhZ3MgJiA2NCkgIT0gMCA/IGlucHV0LnJlYWRGbG9hdCgpIDogNTAwMCkgKiBzY2FsZTtcblx0XHRcdGRhdGEuc3RlcCA9IDEgLyBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCk7XG5cdFx0XHRkYXRhLmluZXJ0aWEgPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdGRhdGEuc3RyZW5ndGggPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdGRhdGEuZGFtcGluZyA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0ZGF0YS5tYXNzSW52ZXJzZSA9IChmbGFncyAmIDEyOCkgIT0gMCA/IGlucHV0LnJlYWRGbG9hdCgpIDogMTtcblx0XHRcdGRhdGEud2luZCA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0ZGF0YS5ncmF2aXR5ID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRmbGFncyA9IGlucHV0LnJlYWRCeXRlKCk7XG5cdFx0XHRpZiAoKGZsYWdzICYgMSkgIT0gMCkgZGF0YS5pbmVydGlhR2xvYmFsID0gdHJ1ZTtcblx0XHRcdGlmICgoZmxhZ3MgJiAyKSAhPSAwKSBkYXRhLnN0cmVuZ3RoR2xvYmFsID0gdHJ1ZTtcblx0XHRcdGlmICgoZmxhZ3MgJiA0KSAhPSAwKSBkYXRhLmRhbXBpbmdHbG9iYWwgPSB0cnVlO1xuXHRcdFx0aWYgKChmbGFncyAmIDgpICE9IDApIGRhdGEubWFzc0dsb2JhbCA9IHRydWU7XG5cdFx0XHRpZiAoKGZsYWdzICYgMTYpICE9IDApIGRhdGEud2luZEdsb2JhbCA9IHRydWU7XG5cdFx0XHRpZiAoKGZsYWdzICYgMzIpICE9IDApIGRhdGEuZ3Jhdml0eUdsb2JhbCA9IHRydWU7XG5cdFx0XHRpZiAoKGZsYWdzICYgNjQpICE9IDApIGRhdGEubWl4R2xvYmFsID0gdHJ1ZTtcblx0XHRcdGRhdGEubWl4ID0gKGZsYWdzICYgMTI4KSAhPSAwID8gaW5wdXQucmVhZEZsb2F0KCkgOiAxO1xuXHRcdFx0c2tlbGV0b25EYXRhLnBoeXNpY3NDb25zdHJhaW50cy5wdXNoKGRhdGEpO1xuXHRcdH1cblxuXHRcdC8vIERlZmF1bHQgc2tpbi5cblx0XHRsZXQgZGVmYXVsdFNraW4gPSB0aGlzLnJlYWRTa2luKGlucHV0LCBza2VsZXRvbkRhdGEsIHRydWUsIG5vbmVzc2VudGlhbCk7XG5cdFx0aWYgKGRlZmF1bHRTa2luKSB7XG5cdFx0XHRza2VsZXRvbkRhdGEuZGVmYXVsdFNraW4gPSBkZWZhdWx0U2tpbjtcblx0XHRcdHNrZWxldG9uRGF0YS5za2lucy5wdXNoKGRlZmF1bHRTa2luKTtcblx0XHR9XG5cblx0XHQvLyBTa2lucy5cblx0XHR7XG5cdFx0XHRsZXQgaSA9IHNrZWxldG9uRGF0YS5za2lucy5sZW5ndGg7XG5cdFx0XHRVdGlscy5zZXRBcnJheVNpemUoc2tlbGV0b25EYXRhLnNraW5zLCBuID0gaSArIGlucHV0LnJlYWRJbnQodHJ1ZSkpO1xuXHRcdFx0Zm9yICg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0bGV0IHNraW4gPSB0aGlzLnJlYWRTa2luKGlucHV0LCBza2VsZXRvbkRhdGEsIGZhbHNlLCBub25lc3NlbnRpYWwpO1xuXHRcdFx0XHRpZiAoIXNraW4pIHRocm93IG5ldyBFcnJvcihcInJlYWRTa2luKCkgc2hvdWxkIG5vdCBoYXZlIHJldHVybmVkIG51bGwuXCIpO1xuXHRcdFx0XHRza2VsZXRvbkRhdGEuc2tpbnNbaV0gPSBza2luO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIExpbmtlZCBtZXNoZXMuXG5cdFx0biA9IHRoaXMubGlua2VkTWVzaGVzLmxlbmd0aDtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuXHRcdFx0bGV0IGxpbmtlZE1lc2ggPSB0aGlzLmxpbmtlZE1lc2hlc1tpXTtcblx0XHRcdGNvbnN0IHNraW4gPSBza2VsZXRvbkRhdGEuc2tpbnNbbGlua2VkTWVzaC5za2luSW5kZXhdO1xuXHRcdFx0aWYgKCFsaW5rZWRNZXNoLnBhcmVudCkgdGhyb3cgbmV3IEVycm9yKFwiTGlua2VkIG1lc2ggcGFyZW50IG11c3Qgbm90IGJlIG51bGxcIik7XG5cdFx0XHRsZXQgcGFyZW50ID0gc2tpbi5nZXRBdHRhY2htZW50KGxpbmtlZE1lc2guc2xvdEluZGV4LCBsaW5rZWRNZXNoLnBhcmVudCk7XG5cdFx0XHRpZiAoIXBhcmVudCkgdGhyb3cgbmV3IEVycm9yKGBQYXJlbnQgbWVzaCBub3QgZm91bmQ6ICR7bGlua2VkTWVzaC5wYXJlbnR9YCk7XG5cdFx0XHRsaW5rZWRNZXNoLm1lc2gudGltZWxpbmVBdHRhY2htZW50ID0gbGlua2VkTWVzaC5pbmhlcml0VGltZWxpbmUgPyBwYXJlbnQgYXMgVmVydGV4QXR0YWNobWVudCA6IGxpbmtlZE1lc2gubWVzaDtcblx0XHRcdGxpbmtlZE1lc2gubWVzaC5zZXRQYXJlbnRNZXNoKHBhcmVudCBhcyBNZXNoQXR0YWNobWVudCk7XG5cdFx0XHRpZiAobGlua2VkTWVzaC5tZXNoLnJlZ2lvbiAhPSBudWxsKSBsaW5rZWRNZXNoLm1lc2gudXBkYXRlUmVnaW9uKCk7XG5cdFx0fVxuXHRcdHRoaXMubGlua2VkTWVzaGVzLmxlbmd0aCA9IDA7XG5cblx0XHQvLyBFdmVudHMuXG5cdFx0biA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcblx0XHRcdGxldCBldmVudE5hbWUgPSBpbnB1dC5yZWFkU3RyaW5nKCk7XG5cdFx0XHRpZiAoIWV2ZW50TmFtZSkgdGhyb3cgbmV3IEVycm9yKFwiRXZlbnQgZGF0YSBuYW1lIG11c3Qgbm90IGJlIG51bGxcIik7XG5cdFx0XHRsZXQgZGF0YSA9IG5ldyBFdmVudERhdGEoZXZlbnROYW1lKTtcblx0XHRcdGRhdGEuaW50VmFsdWUgPSBpbnB1dC5yZWFkSW50KGZhbHNlKTtcblx0XHRcdGRhdGEuZmxvYXRWYWx1ZSA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0ZGF0YS5zdHJpbmdWYWx1ZSA9IGlucHV0LnJlYWRTdHJpbmcoKTtcblx0XHRcdGRhdGEuYXVkaW9QYXRoID0gaW5wdXQucmVhZFN0cmluZygpO1xuXHRcdFx0aWYgKGRhdGEuYXVkaW9QYXRoKSB7XG5cdFx0XHRcdGRhdGEudm9sdW1lID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdGRhdGEuYmFsYW5jZSA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0fVxuXHRcdFx0c2tlbGV0b25EYXRhLmV2ZW50cy5wdXNoKGRhdGEpO1xuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGlvbnMuXG5cdFx0biA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcblx0XHRcdGxldCBhbmltYXRpb25OYW1lID0gaW5wdXQucmVhZFN0cmluZygpO1xuXHRcdFx0aWYgKCFhbmltYXRpb25OYW1lKSB0aHJvdyBuZXcgRXJyb3IoXCJBbmltYXRpbyBuYW1lIG11c3Qgbm90IGJlIG51bGwuXCIpO1xuXHRcdFx0c2tlbGV0b25EYXRhLmFuaW1hdGlvbnMucHVzaCh0aGlzLnJlYWRBbmltYXRpb24oaW5wdXQsIGFuaW1hdGlvbk5hbWUsIHNrZWxldG9uRGF0YSkpO1xuXHRcdH1cblx0XHRyZXR1cm4gc2tlbGV0b25EYXRhO1xuXHR9XG5cblx0cHJpdmF0ZSByZWFkU2tpbiAoaW5wdXQ6IEJpbmFyeUlucHV0LCBza2VsZXRvbkRhdGE6IFNrZWxldG9uRGF0YSwgZGVmYXVsdFNraW46IGJvb2xlYW4sIG5vbmVzc2VudGlhbDogYm9vbGVhbik6IFNraW4gfCBudWxsIHtcblx0XHRsZXQgc2tpbiA9IG51bGw7XG5cdFx0bGV0IHNsb3RDb3VudCA9IDA7XG5cblx0XHRpZiAoZGVmYXVsdFNraW4pIHtcblx0XHRcdHNsb3RDb3VudCA9IGlucHV0LnJlYWRJbnQodHJ1ZSlcblx0XHRcdGlmIChzbG90Q291bnQgPT0gMCkgcmV0dXJuIG51bGw7XG5cdFx0XHRza2luID0gbmV3IFNraW4oXCJkZWZhdWx0XCIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsZXQgc2tpbk5hbWUgPSBpbnB1dC5yZWFkU3RyaW5nKCk7XG5cdFx0XHRpZiAoIXNraW5OYW1lKSB0aHJvdyBuZXcgRXJyb3IoXCJTa2luIG5hbWUgbXVzdCBub3QgYmUgbnVsbC5cIik7XG5cdFx0XHRza2luID0gbmV3IFNraW4oc2tpbk5hbWUpO1xuXHRcdFx0aWYgKG5vbmVzc2VudGlhbCkgQ29sb3IucmdiYTg4ODhUb0NvbG9yKHNraW4uY29sb3IsIGlucHV0LnJlYWRJbnQzMigpKTtcblx0XHRcdHNraW4uYm9uZXMubGVuZ3RoID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRcdGZvciAobGV0IGkgPSAwLCBuID0gc2tpbi5ib25lcy5sZW5ndGg7IGkgPCBuOyBpKyspXG5cdFx0XHRcdHNraW4uYm9uZXNbaV0gPSBza2VsZXRvbkRhdGEuYm9uZXNbaW5wdXQucmVhZEludCh0cnVlKV07XG5cblx0XHRcdGZvciAobGV0IGkgPSAwLCBuID0gaW5wdXQucmVhZEludCh0cnVlKTsgaSA8IG47IGkrKylcblx0XHRcdFx0c2tpbi5jb25zdHJhaW50cy5wdXNoKHNrZWxldG9uRGF0YS5pa0NvbnN0cmFpbnRzW2lucHV0LnJlYWRJbnQodHJ1ZSldKTtcblx0XHRcdGZvciAobGV0IGkgPSAwLCBuID0gaW5wdXQucmVhZEludCh0cnVlKTsgaSA8IG47IGkrKylcblx0XHRcdFx0c2tpbi5jb25zdHJhaW50cy5wdXNoKHNrZWxldG9uRGF0YS50cmFuc2Zvcm1Db25zdHJhaW50c1tpbnB1dC5yZWFkSW50KHRydWUpXSk7XG5cdFx0XHRmb3IgKGxldCBpID0gMCwgbiA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7IGkgPCBuOyBpKyspXG5cdFx0XHRcdHNraW4uY29uc3RyYWludHMucHVzaChza2VsZXRvbkRhdGEucGF0aENvbnN0cmFpbnRzW2lucHV0LnJlYWRJbnQodHJ1ZSldKTtcblx0XHRcdGZvciAobGV0IGkgPSAwLCBuID0gaW5wdXQucmVhZEludCh0cnVlKTsgaSA8IG47IGkrKylcblx0XHRcdFx0c2tpbi5jb25zdHJhaW50cy5wdXNoKHNrZWxldG9uRGF0YS5waHlzaWNzQ29uc3RyYWludHNbaW5wdXQucmVhZEludCh0cnVlKV0pO1xuXG5cdFx0XHRzbG90Q291bnQgPSBpbnB1dC5yZWFkSW50KHRydWUpO1xuXHRcdH1cblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgc2xvdENvdW50OyBpKyspIHtcblx0XHRcdGxldCBzbG90SW5kZXggPSBpbnB1dC5yZWFkSW50KHRydWUpO1xuXHRcdFx0Zm9yIChsZXQgaWkgPSAwLCBubiA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7IGlpIDwgbm47IGlpKyspIHtcblx0XHRcdFx0bGV0IG5hbWUgPSBpbnB1dC5yZWFkU3RyaW5nUmVmKCk7XG5cdFx0XHRcdGlmICghbmFtZSlcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJBdHRhY2htZW50IG5hbWUgbXVzdCBub3QgYmUgbnVsbFwiKTtcblx0XHRcdFx0bGV0IGF0dGFjaG1lbnQgPSB0aGlzLnJlYWRBdHRhY2htZW50KGlucHV0LCBza2VsZXRvbkRhdGEsIHNraW4sIHNsb3RJbmRleCwgbmFtZSwgbm9uZXNzZW50aWFsKTtcblx0XHRcdFx0aWYgKGF0dGFjaG1lbnQpIHNraW4uc2V0QXR0YWNobWVudChzbG90SW5kZXgsIG5hbWUsIGF0dGFjaG1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gc2tpbjtcblx0fVxuXG5cdHByaXZhdGUgcmVhZEF0dGFjaG1lbnQgKGlucHV0OiBCaW5hcnlJbnB1dCwgc2tlbGV0b25EYXRhOiBTa2VsZXRvbkRhdGEsIHNraW46IFNraW4sIHNsb3RJbmRleDogbnVtYmVyLCBhdHRhY2htZW50TmFtZTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCwgbm9uZXNzZW50aWFsOiBib29sZWFuKTogQXR0YWNobWVudCB8IG51bGwge1xuXHRcdGxldCBzY2FsZSA9IHRoaXMuc2NhbGU7XG5cblx0XHRsZXQgZmxhZ3MgPSBpbnB1dC5yZWFkQnl0ZSgpO1xuXHRcdGNvbnN0IG5hbWUgPSAoZmxhZ3MgJiA4KSAhPSAwID8gaW5wdXQucmVhZFN0cmluZ1JlZigpIDogYXR0YWNobWVudE5hbWU7XG5cdFx0aWYgKCFuYW1lKSB0aHJvdyBuZXcgRXJyb3IoXCJBdHRhY2htZW50IG5hbWUgbXVzdCBub3QgYmUgbnVsbFwiKTtcblx0XHRzd2l0Y2ggKChmbGFncyAmIDBiMTExKSBhcyBBdHRhY2htZW50VHlwZSkgeyAvLyBCVUc/XG5cdFx0XHRjYXNlIEF0dGFjaG1lbnRUeXBlLlJlZ2lvbjoge1xuXHRcdFx0XHRsZXQgcGF0aCA9IChmbGFncyAmIDE2KSAhPSAwID8gaW5wdXQucmVhZFN0cmluZ1JlZigpIDogbnVsbDtcblx0XHRcdFx0Y29uc3QgY29sb3IgPSAoZmxhZ3MgJiAzMikgIT0gMCA/IGlucHV0LnJlYWRJbnQzMigpIDogMHhmZmZmZmZmZjtcblx0XHRcdFx0Y29uc3Qgc2VxdWVuY2UgPSAoZmxhZ3MgJiA2NCkgIT0gMCA/IHRoaXMucmVhZFNlcXVlbmNlKGlucHV0KSA6IG51bGw7XG5cdFx0XHRcdGxldCByb3RhdGlvbiA9IChmbGFncyAmIDEyOCkgIT0gMCA/IGlucHV0LnJlYWRGbG9hdCgpIDogMDtcblx0XHRcdFx0bGV0IHggPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdFx0bGV0IHkgPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdFx0bGV0IHNjYWxlWCA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0XHRsZXQgc2NhbGVZID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdGxldCB3aWR0aCA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0XHRsZXQgaGVpZ2h0ID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cblx0XHRcdFx0aWYgKCFwYXRoKSBwYXRoID0gbmFtZTtcblx0XHRcdFx0bGV0IHJlZ2lvbiA9IHRoaXMuYXR0YWNobWVudExvYWRlci5uZXdSZWdpb25BdHRhY2htZW50KHNraW4sIG5hbWUsIHBhdGgsIHNlcXVlbmNlKTtcblx0XHRcdFx0aWYgKCFyZWdpb24pIHJldHVybiBudWxsO1xuXHRcdFx0XHRyZWdpb24ucGF0aCA9IHBhdGg7XG5cdFx0XHRcdHJlZ2lvbi54ID0geCAqIHNjYWxlO1xuXHRcdFx0XHRyZWdpb24ueSA9IHkgKiBzY2FsZTtcblx0XHRcdFx0cmVnaW9uLnNjYWxlWCA9IHNjYWxlWDtcblx0XHRcdFx0cmVnaW9uLnNjYWxlWSA9IHNjYWxlWTtcblx0XHRcdFx0cmVnaW9uLnJvdGF0aW9uID0gcm90YXRpb247XG5cdFx0XHRcdHJlZ2lvbi53aWR0aCA9IHdpZHRoICogc2NhbGU7XG5cdFx0XHRcdHJlZ2lvbi5oZWlnaHQgPSBoZWlnaHQgKiBzY2FsZTtcblx0XHRcdFx0Q29sb3IucmdiYTg4ODhUb0NvbG9yKHJlZ2lvbi5jb2xvciwgY29sb3IpO1xuXHRcdFx0XHRyZWdpb24uc2VxdWVuY2UgPSBzZXF1ZW5jZTtcblx0XHRcdFx0aWYgKHNlcXVlbmNlID09IG51bGwpIHJlZ2lvbi51cGRhdGVSZWdpb24oKTtcblx0XHRcdFx0cmV0dXJuIHJlZ2lvbjtcblx0XHRcdH1cblx0XHRcdGNhc2UgQXR0YWNobWVudFR5cGUuQm91bmRpbmdCb3g6IHtcblx0XHRcdFx0bGV0IHZlcnRpY2VzID0gdGhpcy5yZWFkVmVydGljZXMoaW5wdXQsIChmbGFncyAmIDE2KSAhPSAwKTtcblx0XHRcdFx0bGV0IGNvbG9yID0gbm9uZXNzZW50aWFsID8gaW5wdXQucmVhZEludDMyKCkgOiAwO1xuXG5cdFx0XHRcdGxldCBib3ggPSB0aGlzLmF0dGFjaG1lbnRMb2FkZXIubmV3Qm91bmRpbmdCb3hBdHRhY2htZW50KHNraW4sIG5hbWUpO1xuXHRcdFx0XHRpZiAoIWJveCkgcmV0dXJuIG51bGw7XG5cdFx0XHRcdGJveC53b3JsZFZlcnRpY2VzTGVuZ3RoID0gdmVydGljZXMubGVuZ3RoO1xuXHRcdFx0XHRib3gudmVydGljZXMgPSB2ZXJ0aWNlcy52ZXJ0aWNlcyE7XG5cdFx0XHRcdGJveC5ib25lcyA9IHZlcnRpY2VzLmJvbmVzO1xuXHRcdFx0XHRpZiAobm9uZXNzZW50aWFsKSBDb2xvci5yZ2JhODg4OFRvQ29sb3IoYm94LmNvbG9yLCBjb2xvcik7XG5cdFx0XHRcdHJldHVybiBib3g7XG5cdFx0XHR9XG5cdFx0XHRjYXNlIEF0dGFjaG1lbnRUeXBlLk1lc2g6IHtcblx0XHRcdFx0bGV0IHBhdGggPSAoZmxhZ3MgJiAxNikgIT0gMCA/IGlucHV0LnJlYWRTdHJpbmdSZWYoKSA6IG5hbWU7XG5cdFx0XHRcdGNvbnN0IGNvbG9yID0gKGZsYWdzICYgMzIpICE9IDAgPyBpbnB1dC5yZWFkSW50MzIoKSA6IDB4ZmZmZmZmZmY7XG5cdFx0XHRcdGNvbnN0IHNlcXVlbmNlID0gKGZsYWdzICYgNjQpICE9IDAgPyB0aGlzLnJlYWRTZXF1ZW5jZShpbnB1dCkgOiBudWxsO1xuXHRcdFx0XHRjb25zdCBodWxsTGVuZ3RoID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRcdFx0Y29uc3QgdmVydGljZXMgPSB0aGlzLnJlYWRWZXJ0aWNlcyhpbnB1dCwgKGZsYWdzICYgMTI4KSAhPSAwKTtcblx0XHRcdFx0Y29uc3QgdXZzID0gdGhpcy5yZWFkRmxvYXRBcnJheShpbnB1dCwgdmVydGljZXMubGVuZ3RoLCAxKTtcblx0XHRcdFx0Y29uc3QgdHJpYW5nbGVzID0gdGhpcy5yZWFkU2hvcnRBcnJheShpbnB1dCwgKHZlcnRpY2VzLmxlbmd0aCAtIGh1bGxMZW5ndGggLSAyKSAqIDMpO1xuXHRcdFx0XHRsZXQgZWRnZXM6IG51bWJlcltdID0gW107XG5cdFx0XHRcdGxldCB3aWR0aCA9IDAsIGhlaWdodCA9IDA7XG5cdFx0XHRcdGlmIChub25lc3NlbnRpYWwpIHtcblx0XHRcdFx0XHRlZGdlcyA9IHRoaXMucmVhZFNob3J0QXJyYXkoaW5wdXQsIGlucHV0LnJlYWRJbnQodHJ1ZSkpO1xuXHRcdFx0XHRcdHdpZHRoID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdFx0aGVpZ2h0ID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIXBhdGgpIHBhdGggPSBuYW1lO1xuXHRcdFx0XHRsZXQgbWVzaCA9IHRoaXMuYXR0YWNobWVudExvYWRlci5uZXdNZXNoQXR0YWNobWVudChza2luLCBuYW1lLCBwYXRoLCBzZXF1ZW5jZSk7XG5cdFx0XHRcdGlmICghbWVzaCkgcmV0dXJuIG51bGw7XG5cdFx0XHRcdG1lc2gucGF0aCA9IHBhdGg7XG5cdFx0XHRcdENvbG9yLnJnYmE4ODg4VG9Db2xvcihtZXNoLmNvbG9yLCBjb2xvcik7XG5cdFx0XHRcdG1lc2guYm9uZXMgPSB2ZXJ0aWNlcy5ib25lcztcblx0XHRcdFx0bWVzaC52ZXJ0aWNlcyA9IHZlcnRpY2VzLnZlcnRpY2VzITtcblx0XHRcdFx0bWVzaC53b3JsZFZlcnRpY2VzTGVuZ3RoID0gdmVydGljZXMubGVuZ3RoO1xuXHRcdFx0XHRtZXNoLnRyaWFuZ2xlcyA9IHRyaWFuZ2xlcztcblx0XHRcdFx0bWVzaC5yZWdpb25VVnMgPSB1dnM7XG5cdFx0XHRcdGlmIChzZXF1ZW5jZSA9PSBudWxsKSBtZXNoLnVwZGF0ZVJlZ2lvbigpO1xuXHRcdFx0XHRtZXNoLmh1bGxMZW5ndGggPSBodWxsTGVuZ3RoIDw8IDE7XG5cdFx0XHRcdG1lc2guc2VxdWVuY2UgPSBzZXF1ZW5jZTtcblx0XHRcdFx0aWYgKG5vbmVzc2VudGlhbCkge1xuXHRcdFx0XHRcdG1lc2guZWRnZXMgPSBlZGdlcztcblx0XHRcdFx0XHRtZXNoLndpZHRoID0gd2lkdGggKiBzY2FsZTtcblx0XHRcdFx0XHRtZXNoLmhlaWdodCA9IGhlaWdodCAqIHNjYWxlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtZXNoO1xuXHRcdFx0fVxuXHRcdFx0Y2FzZSBBdHRhY2htZW50VHlwZS5MaW5rZWRNZXNoOiB7XG5cdFx0XHRcdGNvbnN0IHBhdGggPSAoZmxhZ3MgJiAxNikgIT0gMCA/IGlucHV0LnJlYWRTdHJpbmdSZWYoKSA6IG5hbWU7XG5cdFx0XHRcdGlmIChwYXRoID09IG51bGwpIHRocm93IG5ldyBFcnJvcihcIlBhdGggb2YgbGlua2VkIG1lc2ggbXVzdCBub3QgYmUgbnVsbFwiKTtcblx0XHRcdFx0Y29uc3QgY29sb3IgPSAoZmxhZ3MgJiAzMikgIT0gMCA/IGlucHV0LnJlYWRJbnQzMigpIDogMHhmZmZmZmZmZjtcblx0XHRcdFx0Y29uc3Qgc2VxdWVuY2UgPSAoZmxhZ3MgJiA2NCkgIT0gMCA/IHRoaXMucmVhZFNlcXVlbmNlKGlucHV0KSA6IG51bGw7XG5cdFx0XHRcdGNvbnN0IGluaGVyaXRUaW1lbGluZXMgPSAoZmxhZ3MgJiAxMjgpICE9IDA7XG5cdFx0XHRcdGNvbnN0IHNraW5JbmRleCA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0XHRcdGNvbnN0IHBhcmVudCA9IGlucHV0LnJlYWRTdHJpbmdSZWYoKTtcblx0XHRcdFx0bGV0IHdpZHRoID0gMCwgaGVpZ2h0ID0gMDtcblx0XHRcdFx0aWYgKG5vbmVzc2VudGlhbCkge1xuXHRcdFx0XHRcdHdpZHRoID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdFx0aGVpZ2h0ID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsZXQgbWVzaCA9IHRoaXMuYXR0YWNobWVudExvYWRlci5uZXdNZXNoQXR0YWNobWVudChza2luLCBuYW1lLCBwYXRoLCBzZXF1ZW5jZSk7XG5cdFx0XHRcdGlmICghbWVzaCkgcmV0dXJuIG51bGw7XG5cdFx0XHRcdG1lc2gucGF0aCA9IHBhdGg7XG5cdFx0XHRcdENvbG9yLnJnYmE4ODg4VG9Db2xvcihtZXNoLmNvbG9yLCBjb2xvcik7XG5cdFx0XHRcdG1lc2guc2VxdWVuY2UgPSBzZXF1ZW5jZTtcblx0XHRcdFx0aWYgKG5vbmVzc2VudGlhbCkge1xuXHRcdFx0XHRcdG1lc2gud2lkdGggPSB3aWR0aCAqIHNjYWxlO1xuXHRcdFx0XHRcdG1lc2guaGVpZ2h0ID0gaGVpZ2h0ICogc2NhbGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5saW5rZWRNZXNoZXMucHVzaChuZXcgTGlua2VkTWVzaChtZXNoLCBza2luSW5kZXgsIHNsb3RJbmRleCwgcGFyZW50LCBpbmhlcml0VGltZWxpbmVzKSk7XG5cdFx0XHRcdHJldHVybiBtZXNoO1xuXHRcdFx0fVxuXHRcdFx0Y2FzZSBBdHRhY2htZW50VHlwZS5QYXRoOiB7XG5cdFx0XHRcdGNvbnN0IGNsb3NlZCA9IChmbGFncyAmIDE2KSAhPSAwO1xuXHRcdFx0XHRjb25zdCBjb25zdGFudFNwZWVkID0gKGZsYWdzICYgMzIpICE9IDA7XG5cdFx0XHRcdGNvbnN0IHZlcnRpY2VzID0gdGhpcy5yZWFkVmVydGljZXMoaW5wdXQsIChmbGFncyAmIDY0KSAhPSAwKTtcblxuXHRcdFx0XHRjb25zdCBsZW5ndGhzID0gVXRpbHMubmV3QXJyYXkodmVydGljZXMubGVuZ3RoIC8gNiwgMCk7XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwLCBuID0gbGVuZ3Rocy5sZW5ndGg7IGkgPCBuOyBpKyspXG5cdFx0XHRcdFx0bGVuZ3Roc1tpXSA9IGlucHV0LnJlYWRGbG9hdCgpICogc2NhbGU7XG5cdFx0XHRcdGNvbnN0IGNvbG9yID0gbm9uZXNzZW50aWFsID8gaW5wdXQucmVhZEludDMyKCkgOiAwO1xuXG5cdFx0XHRcdGNvbnN0IHBhdGggPSB0aGlzLmF0dGFjaG1lbnRMb2FkZXIubmV3UGF0aEF0dGFjaG1lbnQoc2tpbiwgbmFtZSk7XG5cdFx0XHRcdGlmICghcGF0aCkgcmV0dXJuIG51bGw7XG5cdFx0XHRcdHBhdGguY2xvc2VkID0gY2xvc2VkO1xuXHRcdFx0XHRwYXRoLmNvbnN0YW50U3BlZWQgPSBjb25zdGFudFNwZWVkO1xuXHRcdFx0XHRwYXRoLndvcmxkVmVydGljZXNMZW5ndGggPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cdFx0XHRcdHBhdGgudmVydGljZXMgPSB2ZXJ0aWNlcy52ZXJ0aWNlcyE7XG5cdFx0XHRcdHBhdGguYm9uZXMgPSB2ZXJ0aWNlcy5ib25lcztcblx0XHRcdFx0cGF0aC5sZW5ndGhzID0gbGVuZ3Rocztcblx0XHRcdFx0aWYgKG5vbmVzc2VudGlhbCkgQ29sb3IucmdiYTg4ODhUb0NvbG9yKHBhdGguY29sb3IsIGNvbG9yKTtcblx0XHRcdFx0cmV0dXJuIHBhdGg7XG5cdFx0XHR9XG5cdFx0XHRjYXNlIEF0dGFjaG1lbnRUeXBlLlBvaW50OiB7XG5cdFx0XHRcdGNvbnN0IHJvdGF0aW9uID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdGNvbnN0IHggPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdFx0Y29uc3QgeSA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0XHRjb25zdCBjb2xvciA9IG5vbmVzc2VudGlhbCA/IGlucHV0LnJlYWRJbnQzMigpIDogMDtcblxuXHRcdFx0XHRjb25zdCBwb2ludCA9IHRoaXMuYXR0YWNobWVudExvYWRlci5uZXdQb2ludEF0dGFjaG1lbnQoc2tpbiwgbmFtZSk7XG5cdFx0XHRcdGlmICghcG9pbnQpIHJldHVybiBudWxsO1xuXHRcdFx0XHRwb2ludC54ID0geCAqIHNjYWxlO1xuXHRcdFx0XHRwb2ludC55ID0geSAqIHNjYWxlO1xuXHRcdFx0XHRwb2ludC5yb3RhdGlvbiA9IHJvdGF0aW9uO1xuXHRcdFx0XHRpZiAobm9uZXNzZW50aWFsKSBDb2xvci5yZ2JhODg4OFRvQ29sb3IocG9pbnQuY29sb3IsIGNvbG9yKTtcblx0XHRcdFx0cmV0dXJuIHBvaW50O1xuXHRcdFx0fVxuXHRcdFx0Y2FzZSBBdHRhY2htZW50VHlwZS5DbGlwcGluZzoge1xuXHRcdFx0XHRjb25zdCBlbmRTbG90SW5kZXggPSBpbnB1dC5yZWFkSW50KHRydWUpO1xuXHRcdFx0XHRjb25zdCB2ZXJ0aWNlcyA9IHRoaXMucmVhZFZlcnRpY2VzKGlucHV0LCAoZmxhZ3MgJiAxNikgIT0gMCk7XG5cdFx0XHRcdGxldCBjb2xvciA9IG5vbmVzc2VudGlhbCA/IGlucHV0LnJlYWRJbnQzMigpIDogMDtcblxuXHRcdFx0XHRsZXQgY2xpcCA9IHRoaXMuYXR0YWNobWVudExvYWRlci5uZXdDbGlwcGluZ0F0dGFjaG1lbnQoc2tpbiwgbmFtZSk7XG5cdFx0XHRcdGlmICghY2xpcCkgcmV0dXJuIG51bGw7XG5cdFx0XHRcdGNsaXAuZW5kU2xvdCA9IHNrZWxldG9uRGF0YS5zbG90c1tlbmRTbG90SW5kZXhdO1xuXHRcdFx0XHRjbGlwLndvcmxkVmVydGljZXNMZW5ndGggPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cdFx0XHRcdGNsaXAudmVydGljZXMgPSB2ZXJ0aWNlcy52ZXJ0aWNlcyE7XG5cdFx0XHRcdGNsaXAuYm9uZXMgPSB2ZXJ0aWNlcy5ib25lcztcblx0XHRcdFx0aWYgKG5vbmVzc2VudGlhbCkgQ29sb3IucmdiYTg4ODhUb0NvbG9yKGNsaXAuY29sb3IsIGNvbG9yKTtcblx0XHRcdFx0cmV0dXJuIGNsaXA7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cHJpdmF0ZSByZWFkU2VxdWVuY2UgKGlucHV0OiBCaW5hcnlJbnB1dCkge1xuXHRcdGxldCBzZXF1ZW5jZSA9IG5ldyBTZXF1ZW5jZShpbnB1dC5yZWFkSW50KHRydWUpKTtcblx0XHRzZXF1ZW5jZS5zdGFydCA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0c2VxdWVuY2UuZGlnaXRzID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRzZXF1ZW5jZS5zZXR1cEluZGV4ID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRyZXR1cm4gc2VxdWVuY2U7XG5cdH1cblxuXHRwcml2YXRlIHJlYWRWZXJ0aWNlcyAoaW5wdXQ6IEJpbmFyeUlucHV0LCB3ZWlnaHRlZDogYm9vbGVhbik6IFZlcnRpY2VzIHtcblx0XHRjb25zdCBzY2FsZSA9IHRoaXMuc2NhbGU7XG5cdFx0Y29uc3QgdmVydGV4Q291bnQgPSBpbnB1dC5yZWFkSW50KHRydWUpO1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gbmV3IFZlcnRpY2VzKCk7XG5cdFx0dmVydGljZXMubGVuZ3RoID0gdmVydGV4Q291bnQgPDwgMTtcblx0XHRpZiAoIXdlaWdodGVkKSB7XG5cdFx0XHR2ZXJ0aWNlcy52ZXJ0aWNlcyA9IHRoaXMucmVhZEZsb2F0QXJyYXkoaW5wdXQsIHZlcnRpY2VzLmxlbmd0aCwgc2NhbGUpO1xuXHRcdFx0cmV0dXJuIHZlcnRpY2VzO1xuXHRcdH1cblx0XHRsZXQgd2VpZ2h0cyA9IG5ldyBBcnJheTxudW1iZXI+KCk7XG5cdFx0bGV0IGJvbmVzQXJyYXkgPSBuZXcgQXJyYXk8bnVtYmVyPigpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGV4Q291bnQ7IGkrKykge1xuXHRcdFx0bGV0IGJvbmVDb3VudCA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0XHRib25lc0FycmF5LnB1c2goYm9uZUNvdW50KTtcblx0XHRcdGZvciAobGV0IGlpID0gMDsgaWkgPCBib25lQ291bnQ7IGlpKyspIHtcblx0XHRcdFx0Ym9uZXNBcnJheS5wdXNoKGlucHV0LnJlYWRJbnQodHJ1ZSkpO1xuXHRcdFx0XHR3ZWlnaHRzLnB1c2goaW5wdXQucmVhZEZsb2F0KCkgKiBzY2FsZSk7XG5cdFx0XHRcdHdlaWdodHMucHVzaChpbnB1dC5yZWFkRmxvYXQoKSAqIHNjYWxlKTtcblx0XHRcdFx0d2VpZ2h0cy5wdXNoKGlucHV0LnJlYWRGbG9hdCgpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dmVydGljZXMudmVydGljZXMgPSBVdGlscy50b0Zsb2F0QXJyYXkod2VpZ2h0cyk7XG5cdFx0dmVydGljZXMuYm9uZXMgPSBib25lc0FycmF5O1xuXHRcdHJldHVybiB2ZXJ0aWNlcztcblx0fVxuXG5cdHByaXZhdGUgcmVhZEZsb2F0QXJyYXkgKGlucHV0OiBCaW5hcnlJbnB1dCwgbjogbnVtYmVyLCBzY2FsZTogbnVtYmVyKTogbnVtYmVyW10ge1xuXHRcdGxldCBhcnJheSA9IG5ldyBBcnJheTxudW1iZXI+KG4pO1xuXHRcdGlmIChzY2FsZSA9PSAxKSB7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKylcblx0XHRcdFx0YXJyYXlbaV0gPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspXG5cdFx0XHRcdGFycmF5W2ldID0gaW5wdXQucmVhZEZsb2F0KCkgKiBzY2FsZTtcblx0XHR9XG5cdFx0cmV0dXJuIGFycmF5O1xuXHR9XG5cblx0cHJpdmF0ZSByZWFkU2hvcnRBcnJheSAoaW5wdXQ6IEJpbmFyeUlucHV0LCBuOiBudW1iZXIpOiBudW1iZXJbXSB7XG5cdFx0bGV0IGFycmF5ID0gbmV3IEFycmF5PG51bWJlcj4obik7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspXG5cdFx0XHRhcnJheVtpXSA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0cmV0dXJuIGFycmF5O1xuXHR9XG5cblx0cHJpdmF0ZSByZWFkQW5pbWF0aW9uIChpbnB1dDogQmluYXJ5SW5wdXQsIG5hbWU6IHN0cmluZywgc2tlbGV0b25EYXRhOiBTa2VsZXRvbkRhdGEpOiBBbmltYXRpb24ge1xuXHRcdGlucHV0LnJlYWRJbnQodHJ1ZSk7IC8vIE51bWJlciBvZiB0aW1lbGluZXMuXG5cdFx0bGV0IHRpbWVsaW5lcyA9IG5ldyBBcnJheTxUaW1lbGluZT4oKTtcblx0XHRsZXQgc2NhbGUgPSB0aGlzLnNjYWxlO1xuXG5cdFx0Ly8gU2xvdCB0aW1lbGluZXMuXG5cdFx0Zm9yIChsZXQgaSA9IDAsIG4gPSBpbnB1dC5yZWFkSW50KHRydWUpOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRsZXQgc2xvdEluZGV4ID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRcdGZvciAobGV0IGlpID0gMCwgbm4gPSBpbnB1dC5yZWFkSW50KHRydWUpOyBpaSA8IG5uOyBpaSsrKSB7XG5cdFx0XHRcdGxldCB0aW1lbGluZVR5cGUgPSBpbnB1dC5yZWFkQnl0ZSgpO1xuXHRcdFx0XHRsZXQgZnJhbWVDb3VudCA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0XHRcdGxldCBmcmFtZUxhc3QgPSBmcmFtZUNvdW50IC0gMTtcblx0XHRcdFx0c3dpdGNoICh0aW1lbGluZVR5cGUpIHtcblx0XHRcdFx0XHRjYXNlIFNMT1RfQVRUQUNITUVOVDoge1xuXHRcdFx0XHRcdFx0bGV0IHRpbWVsaW5lID0gbmV3IEF0dGFjaG1lbnRUaW1lbGluZShmcmFtZUNvdW50LCBzbG90SW5kZXgpO1xuXHRcdFx0XHRcdFx0Zm9yIChsZXQgZnJhbWUgPSAwOyBmcmFtZSA8IGZyYW1lQ291bnQ7IGZyYW1lKyspXG5cdFx0XHRcdFx0XHRcdHRpbWVsaW5lLnNldEZyYW1lKGZyYW1lLCBpbnB1dC5yZWFkRmxvYXQoKSwgaW5wdXQucmVhZFN0cmluZ1JlZigpKTtcblx0XHRcdFx0XHRcdHRpbWVsaW5lcy5wdXNoKHRpbWVsaW5lKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjYXNlIFNMT1RfUkdCQToge1xuXHRcdFx0XHRcdFx0bGV0IGJlemllckNvdW50ID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRcdFx0XHRcdGxldCB0aW1lbGluZSA9IG5ldyBSR0JBVGltZWxpbmUoZnJhbWVDb3VudCwgYmV6aWVyQ291bnQsIHNsb3RJbmRleCk7XG5cblx0XHRcdFx0XHRcdGxldCB0aW1lID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdFx0XHRsZXQgciA9IGlucHV0LnJlYWRVbnNpZ25lZEJ5dGUoKSAvIDI1NS4wO1xuXHRcdFx0XHRcdFx0bGV0IGcgPSBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCkgLyAyNTUuMDtcblx0XHRcdFx0XHRcdGxldCBiID0gaW5wdXQucmVhZFVuc2lnbmVkQnl0ZSgpIC8gMjU1LjA7XG5cdFx0XHRcdFx0XHRsZXQgYSA9IGlucHV0LnJlYWRVbnNpZ25lZEJ5dGUoKSAvIDI1NS4wO1xuXG5cdFx0XHRcdFx0XHRmb3IgKGxldCBmcmFtZSA9IDAsIGJlemllciA9IDA7IDsgZnJhbWUrKykge1xuXHRcdFx0XHRcdFx0XHR0aW1lbGluZS5zZXRGcmFtZShmcmFtZSwgdGltZSwgciwgZywgYiwgYSk7XG5cdFx0XHRcdFx0XHRcdGlmIChmcmFtZSA9PSBmcmFtZUxhc3QpIGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGxldCB0aW1lMiA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0XHRcdFx0XHRsZXQgcjIgPSBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCkgLyAyNTUuMDtcblx0XHRcdFx0XHRcdFx0bGV0IGcyID0gaW5wdXQucmVhZFVuc2lnbmVkQnl0ZSgpIC8gMjU1LjA7XG5cdFx0XHRcdFx0XHRcdGxldCBiMiA9IGlucHV0LnJlYWRVbnNpZ25lZEJ5dGUoKSAvIDI1NS4wO1xuXHRcdFx0XHRcdFx0XHRsZXQgYTIgPSBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCkgLyAyNTUuMDtcblxuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKGlucHV0LnJlYWRCeXRlKCkpIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlIENVUlZFX1NURVBQRUQ6XG5cdFx0XHRcdFx0XHRcdFx0XHR0aW1lbGluZS5zZXRTdGVwcGVkKGZyYW1lKTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgQ1VSVkVfQkVaSUVSOlxuXHRcdFx0XHRcdFx0XHRcdFx0c2V0QmV6aWVyKGlucHV0LCB0aW1lbGluZSwgYmV6aWVyKyssIGZyYW1lLCAwLCB0aW1lLCB0aW1lMiwgciwgcjIsIDEpO1xuXHRcdFx0XHRcdFx0XHRcdFx0c2V0QmV6aWVyKGlucHV0LCB0aW1lbGluZSwgYmV6aWVyKyssIGZyYW1lLCAxLCB0aW1lLCB0aW1lMiwgZywgZzIsIDEpO1xuXHRcdFx0XHRcdFx0XHRcdFx0c2V0QmV6aWVyKGlucHV0LCB0aW1lbGluZSwgYmV6aWVyKyssIGZyYW1lLCAyLCB0aW1lLCB0aW1lMiwgYiwgYjIsIDEpO1xuXHRcdFx0XHRcdFx0XHRcdFx0c2V0QmV6aWVyKGlucHV0LCB0aW1lbGluZSwgYmV6aWVyKyssIGZyYW1lLCAzLCB0aW1lLCB0aW1lMiwgYSwgYTIsIDEpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRpbWUgPSB0aW1lMjtcblx0XHRcdFx0XHRcdFx0ciA9IHIyO1xuXHRcdFx0XHRcdFx0XHRnID0gZzI7XG5cdFx0XHRcdFx0XHRcdGIgPSBiMjtcblx0XHRcdFx0XHRcdFx0YSA9IGEyO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGltZWxpbmVzLnB1c2godGltZWxpbmUpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNhc2UgU0xPVF9SR0I6IHtcblx0XHRcdFx0XHRcdGxldCBiZXppZXJDb3VudCA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0XHRcdFx0XHRsZXQgdGltZWxpbmUgPSBuZXcgUkdCVGltZWxpbmUoZnJhbWVDb3VudCwgYmV6aWVyQ291bnQsIHNsb3RJbmRleCk7XG5cblx0XHRcdFx0XHRcdGxldCB0aW1lID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdFx0XHRsZXQgciA9IGlucHV0LnJlYWRVbnNpZ25lZEJ5dGUoKSAvIDI1NS4wO1xuXHRcdFx0XHRcdFx0bGV0IGcgPSBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCkgLyAyNTUuMDtcblx0XHRcdFx0XHRcdGxldCBiID0gaW5wdXQucmVhZFVuc2lnbmVkQnl0ZSgpIC8gMjU1LjA7XG5cblx0XHRcdFx0XHRcdGZvciAobGV0IGZyYW1lID0gMCwgYmV6aWVyID0gMDsgOyBmcmFtZSsrKSB7XG5cdFx0XHRcdFx0XHRcdHRpbWVsaW5lLnNldEZyYW1lKGZyYW1lLCB0aW1lLCByLCBnLCBiKTtcblx0XHRcdFx0XHRcdFx0aWYgKGZyYW1lID09IGZyYW1lTGFzdCkgYnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0bGV0IHRpbWUyID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdFx0XHRcdGxldCByMiA9IGlucHV0LnJlYWRVbnNpZ25lZEJ5dGUoKSAvIDI1NS4wO1xuXHRcdFx0XHRcdFx0XHRsZXQgZzIgPSBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCkgLyAyNTUuMDtcblx0XHRcdFx0XHRcdFx0bGV0IGIyID0gaW5wdXQucmVhZFVuc2lnbmVkQnl0ZSgpIC8gMjU1LjA7XG5cblx0XHRcdFx0XHRcdFx0c3dpdGNoIChpbnB1dC5yZWFkQnl0ZSgpKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSBDVVJWRV9TVEVQUEVEOlxuXHRcdFx0XHRcdFx0XHRcdFx0dGltZWxpbmUuc2V0U3RlcHBlZChmcmFtZSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRjYXNlIENVUlZFX0JFWklFUjpcblx0XHRcdFx0XHRcdFx0XHRcdHNldEJlemllcihpbnB1dCwgdGltZWxpbmUsIGJlemllcisrLCBmcmFtZSwgMCwgdGltZSwgdGltZTIsIHIsIHIyLCAxKTtcblx0XHRcdFx0XHRcdFx0XHRcdHNldEJlemllcihpbnB1dCwgdGltZWxpbmUsIGJlemllcisrLCBmcmFtZSwgMSwgdGltZSwgdGltZTIsIGcsIGcyLCAxKTtcblx0XHRcdFx0XHRcdFx0XHRcdHNldEJlemllcihpbnB1dCwgdGltZWxpbmUsIGJlemllcisrLCBmcmFtZSwgMiwgdGltZSwgdGltZTIsIGIsIGIyLCAxKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR0aW1lID0gdGltZTI7XG5cdFx0XHRcdFx0XHRcdHIgPSByMjtcblx0XHRcdFx0XHRcdFx0ZyA9IGcyO1xuXHRcdFx0XHRcdFx0XHRiID0gYjI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0aW1lbGluZXMucHVzaCh0aW1lbGluZSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2FzZSBTTE9UX1JHQkEyOiB7XG5cdFx0XHRcdFx0XHRsZXQgYmV6aWVyQ291bnQgPSBpbnB1dC5yZWFkSW50KHRydWUpO1xuXHRcdFx0XHRcdFx0bGV0IHRpbWVsaW5lID0gbmV3IFJHQkEyVGltZWxpbmUoZnJhbWVDb3VudCwgYmV6aWVyQ291bnQsIHNsb3RJbmRleCk7XG5cblx0XHRcdFx0XHRcdGxldCB0aW1lID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdFx0XHRsZXQgciA9IGlucHV0LnJlYWRVbnNpZ25lZEJ5dGUoKSAvIDI1NS4wO1xuXHRcdFx0XHRcdFx0bGV0IGcgPSBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCkgLyAyNTUuMDtcblx0XHRcdFx0XHRcdGxldCBiID0gaW5wdXQucmVhZFVuc2lnbmVkQnl0ZSgpIC8gMjU1LjA7XG5cdFx0XHRcdFx0XHRsZXQgYSA9IGlucHV0LnJlYWRVbnNpZ25lZEJ5dGUoKSAvIDI1NS4wO1xuXHRcdFx0XHRcdFx0bGV0IHIyID0gaW5wdXQucmVhZFVuc2lnbmVkQnl0ZSgpIC8gMjU1LjA7XG5cdFx0XHRcdFx0XHRsZXQgZzIgPSBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCkgLyAyNTUuMDtcblx0XHRcdFx0XHRcdGxldCBiMiA9IGlucHV0LnJlYWRVbnNpZ25lZEJ5dGUoKSAvIDI1NS4wO1xuXG5cdFx0XHRcdFx0XHRmb3IgKGxldCBmcmFtZSA9IDAsIGJlemllciA9IDA7IDsgZnJhbWUrKykge1xuXHRcdFx0XHRcdFx0XHR0aW1lbGluZS5zZXRGcmFtZShmcmFtZSwgdGltZSwgciwgZywgYiwgYSwgcjIsIGcyLCBiMik7XG5cdFx0XHRcdFx0XHRcdGlmIChmcmFtZSA9PSBmcmFtZUxhc3QpIGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRsZXQgdGltZTIgPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdFx0XHRcdFx0bGV0IG5yID0gaW5wdXQucmVhZFVuc2lnbmVkQnl0ZSgpIC8gMjU1LjA7XG5cdFx0XHRcdFx0XHRcdGxldCBuZyA9IGlucHV0LnJlYWRVbnNpZ25lZEJ5dGUoKSAvIDI1NS4wO1xuXHRcdFx0XHRcdFx0XHRsZXQgbmIgPSBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCkgLyAyNTUuMDtcblx0XHRcdFx0XHRcdFx0bGV0IG5hID0gaW5wdXQucmVhZFVuc2lnbmVkQnl0ZSgpIC8gMjU1LjA7XG5cdFx0XHRcdFx0XHRcdGxldCBucjIgPSBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCkgLyAyNTUuMDtcblx0XHRcdFx0XHRcdFx0bGV0IG5nMiA9IGlucHV0LnJlYWRVbnNpZ25lZEJ5dGUoKSAvIDI1NS4wO1xuXHRcdFx0XHRcdFx0XHRsZXQgbmIyID0gaW5wdXQucmVhZFVuc2lnbmVkQnl0ZSgpIC8gMjU1LjA7XG5cblx0XHRcdFx0XHRcdFx0c3dpdGNoIChpbnB1dC5yZWFkQnl0ZSgpKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSBDVVJWRV9TVEVQUEVEOlxuXHRcdFx0XHRcdFx0XHRcdFx0dGltZWxpbmUuc2V0U3RlcHBlZChmcmFtZSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRjYXNlIENVUlZFX0JFWklFUjpcblx0XHRcdFx0XHRcdFx0XHRcdHNldEJlemllcihpbnB1dCwgdGltZWxpbmUsIGJlemllcisrLCBmcmFtZSwgMCwgdGltZSwgdGltZTIsIHIsIG5yLCAxKTtcblx0XHRcdFx0XHRcdFx0XHRcdHNldEJlemllcihpbnB1dCwgdGltZWxpbmUsIGJlemllcisrLCBmcmFtZSwgMSwgdGltZSwgdGltZTIsIGcsIG5nLCAxKTtcblx0XHRcdFx0XHRcdFx0XHRcdHNldEJlemllcihpbnB1dCwgdGltZWxpbmUsIGJlemllcisrLCBmcmFtZSwgMiwgdGltZSwgdGltZTIsIGIsIG5iLCAxKTtcblx0XHRcdFx0XHRcdFx0XHRcdHNldEJlemllcihpbnB1dCwgdGltZWxpbmUsIGJlemllcisrLCBmcmFtZSwgMywgdGltZSwgdGltZTIsIGEsIG5hLCAxKTtcblx0XHRcdFx0XHRcdFx0XHRcdHNldEJlemllcihpbnB1dCwgdGltZWxpbmUsIGJlemllcisrLCBmcmFtZSwgNCwgdGltZSwgdGltZTIsIHIyLCBucjIsIDEpO1xuXHRcdFx0XHRcdFx0XHRcdFx0c2V0QmV6aWVyKGlucHV0LCB0aW1lbGluZSwgYmV6aWVyKyssIGZyYW1lLCA1LCB0aW1lLCB0aW1lMiwgZzIsIG5nMiwgMSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRzZXRCZXppZXIoaW5wdXQsIHRpbWVsaW5lLCBiZXppZXIrKywgZnJhbWUsIDYsIHRpbWUsIHRpbWUyLCBiMiwgbmIyLCAxKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR0aW1lID0gdGltZTI7XG5cdFx0XHRcdFx0XHRcdHIgPSBucjtcblx0XHRcdFx0XHRcdFx0ZyA9IG5nO1xuXHRcdFx0XHRcdFx0XHRiID0gbmI7XG5cdFx0XHRcdFx0XHRcdGEgPSBuYTtcblx0XHRcdFx0XHRcdFx0cjIgPSBucjI7XG5cdFx0XHRcdFx0XHRcdGcyID0gbmcyO1xuXHRcdFx0XHRcdFx0XHRiMiA9IG5iMjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRpbWVsaW5lcy5wdXNoKHRpbWVsaW5lKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjYXNlIFNMT1RfUkdCMjoge1xuXHRcdFx0XHRcdFx0bGV0IGJlemllckNvdW50ID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRcdFx0XHRcdGxldCB0aW1lbGluZSA9IG5ldyBSR0IyVGltZWxpbmUoZnJhbWVDb3VudCwgYmV6aWVyQ291bnQsIHNsb3RJbmRleCk7XG5cblx0XHRcdFx0XHRcdGxldCB0aW1lID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdFx0XHRsZXQgciA9IGlucHV0LnJlYWRVbnNpZ25lZEJ5dGUoKSAvIDI1NS4wO1xuXHRcdFx0XHRcdFx0bGV0IGcgPSBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCkgLyAyNTUuMDtcblx0XHRcdFx0XHRcdGxldCBiID0gaW5wdXQucmVhZFVuc2lnbmVkQnl0ZSgpIC8gMjU1LjA7XG5cdFx0XHRcdFx0XHRsZXQgcjIgPSBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCkgLyAyNTUuMDtcblx0XHRcdFx0XHRcdGxldCBnMiA9IGlucHV0LnJlYWRVbnNpZ25lZEJ5dGUoKSAvIDI1NS4wO1xuXHRcdFx0XHRcdFx0bGV0IGIyID0gaW5wdXQucmVhZFVuc2lnbmVkQnl0ZSgpIC8gMjU1LjA7XG5cblx0XHRcdFx0XHRcdGZvciAobGV0IGZyYW1lID0gMCwgYmV6aWVyID0gMDsgOyBmcmFtZSsrKSB7XG5cdFx0XHRcdFx0XHRcdHRpbWVsaW5lLnNldEZyYW1lKGZyYW1lLCB0aW1lLCByLCBnLCBiLCByMiwgZzIsIGIyKTtcblx0XHRcdFx0XHRcdFx0aWYgKGZyYW1lID09IGZyYW1lTGFzdCkgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdGxldCB0aW1lMiA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0XHRcdFx0XHRsZXQgbnIgPSBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCkgLyAyNTUuMDtcblx0XHRcdFx0XHRcdFx0bGV0IG5nID0gaW5wdXQucmVhZFVuc2lnbmVkQnl0ZSgpIC8gMjU1LjA7XG5cdFx0XHRcdFx0XHRcdGxldCBuYiA9IGlucHV0LnJlYWRVbnNpZ25lZEJ5dGUoKSAvIDI1NS4wO1xuXHRcdFx0XHRcdFx0XHRsZXQgbnIyID0gaW5wdXQucmVhZFVuc2lnbmVkQnl0ZSgpIC8gMjU1LjA7XG5cdFx0XHRcdFx0XHRcdGxldCBuZzIgPSBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCkgLyAyNTUuMDtcblx0XHRcdFx0XHRcdFx0bGV0IG5iMiA9IGlucHV0LnJlYWRVbnNpZ25lZEJ5dGUoKSAvIDI1NS4wO1xuXG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoaW5wdXQucmVhZEJ5dGUoKSkge1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgQ1VSVkVfU1RFUFBFRDpcblx0XHRcdFx0XHRcdFx0XHRcdHRpbWVsaW5lLnNldFN0ZXBwZWQoZnJhbWUpO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSBDVVJWRV9CRVpJRVI6XG5cdFx0XHRcdFx0XHRcdFx0XHRzZXRCZXppZXIoaW5wdXQsIHRpbWVsaW5lLCBiZXppZXIrKywgZnJhbWUsIDAsIHRpbWUsIHRpbWUyLCByLCBuciwgMSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRzZXRCZXppZXIoaW5wdXQsIHRpbWVsaW5lLCBiZXppZXIrKywgZnJhbWUsIDEsIHRpbWUsIHRpbWUyLCBnLCBuZywgMSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRzZXRCZXppZXIoaW5wdXQsIHRpbWVsaW5lLCBiZXppZXIrKywgZnJhbWUsIDIsIHRpbWUsIHRpbWUyLCBiLCBuYiwgMSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRzZXRCZXppZXIoaW5wdXQsIHRpbWVsaW5lLCBiZXppZXIrKywgZnJhbWUsIDMsIHRpbWUsIHRpbWUyLCByMiwgbnIyLCAxKTtcblx0XHRcdFx0XHRcdFx0XHRcdHNldEJlemllcihpbnB1dCwgdGltZWxpbmUsIGJlemllcisrLCBmcmFtZSwgNCwgdGltZSwgdGltZTIsIGcyLCBuZzIsIDEpO1xuXHRcdFx0XHRcdFx0XHRcdFx0c2V0QmV6aWVyKGlucHV0LCB0aW1lbGluZSwgYmV6aWVyKyssIGZyYW1lLCA1LCB0aW1lLCB0aW1lMiwgYjIsIG5iMiwgMSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dGltZSA9IHRpbWUyO1xuXHRcdFx0XHRcdFx0XHRyID0gbnI7XG5cdFx0XHRcdFx0XHRcdGcgPSBuZztcblx0XHRcdFx0XHRcdFx0YiA9IG5iO1xuXHRcdFx0XHRcdFx0XHRyMiA9IG5yMjtcblx0XHRcdFx0XHRcdFx0ZzIgPSBuZzI7XG5cdFx0XHRcdFx0XHRcdGIyID0gbmIyO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGltZWxpbmVzLnB1c2godGltZWxpbmUpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNhc2UgU0xPVF9BTFBIQToge1xuXHRcdFx0XHRcdFx0bGV0IHRpbWVsaW5lID0gbmV3IEFscGhhVGltZWxpbmUoZnJhbWVDb3VudCwgaW5wdXQucmVhZEludCh0cnVlKSwgc2xvdEluZGV4KTtcblx0XHRcdFx0XHRcdGxldCB0aW1lID0gaW5wdXQucmVhZEZsb2F0KCksIGEgPSBpbnB1dC5yZWFkVW5zaWduZWRCeXRlKCkgLyAyNTU7XG5cdFx0XHRcdFx0XHRmb3IgKGxldCBmcmFtZSA9IDAsIGJlemllciA9IDA7IDsgZnJhbWUrKykge1xuXHRcdFx0XHRcdFx0XHR0aW1lbGluZS5zZXRGcmFtZShmcmFtZSwgdGltZSwgYSk7XG5cdFx0XHRcdFx0XHRcdGlmIChmcmFtZSA9PSBmcmFtZUxhc3QpIGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRsZXQgdGltZTIgPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdFx0XHRcdFx0bGV0IGEyID0gaW5wdXQucmVhZFVuc2lnbmVkQnl0ZSgpIC8gMjU1O1xuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKGlucHV0LnJlYWRCeXRlKCkpIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlIENVUlZFX1NURVBQRUQ6XG5cdFx0XHRcdFx0XHRcdFx0XHR0aW1lbGluZS5zZXRTdGVwcGVkKGZyYW1lKTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgQ1VSVkVfQkVaSUVSOlxuXHRcdFx0XHRcdFx0XHRcdFx0c2V0QmV6aWVyKGlucHV0LCB0aW1lbGluZSwgYmV6aWVyKyssIGZyYW1lLCAwLCB0aW1lLCB0aW1lMiwgYSwgYTIsIDEpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRpbWUgPSB0aW1lMjtcblx0XHRcdFx0XHRcdFx0YSA9IGEyO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGltZWxpbmVzLnB1c2godGltZWxpbmUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEJvbmUgdGltZWxpbmVzLlxuXHRcdGZvciAobGV0IGkgPSAwLCBuID0gaW5wdXQucmVhZEludCh0cnVlKTsgaSA8IG47IGkrKykge1xuXHRcdFx0bGV0IGJvbmVJbmRleCA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0XHRmb3IgKGxldCBpaSA9IDAsIG5uID0gaW5wdXQucmVhZEludCh0cnVlKTsgaWkgPCBubjsgaWkrKykge1xuXHRcdFx0XHRsZXQgdHlwZSA9IGlucHV0LnJlYWRCeXRlKCksIGZyYW1lQ291bnQgPSBpbnB1dC5yZWFkSW50KHRydWUpO1xuXHRcdFx0XHRpZiAodHlwZSA9PSBCT05FX0lOSEVSSVQpIHtcblx0XHRcdFx0XHRsZXQgdGltZWxpbmUgPSBuZXcgSW5oZXJpdFRpbWVsaW5lKGZyYW1lQ291bnQsIGJvbmVJbmRleCk7XG5cdFx0XHRcdFx0Zm9yIChsZXQgZnJhbWUgPSAwOyBmcmFtZSA8IGZyYW1lQ291bnQ7IGZyYW1lKyspIHtcblx0XHRcdFx0XHRcdHRpbWVsaW5lLnNldEZyYW1lKGZyYW1lLCBpbnB1dC5yZWFkRmxvYXQoKSwgaW5wdXQucmVhZEJ5dGUoKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRpbWVsaW5lcy5wdXNoKHRpbWVsaW5lKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRsZXQgYmV6aWVyQ291bnQgPSBpbnB1dC5yZWFkSW50KHRydWUpO1xuXHRcdFx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdFx0XHRjYXNlIEJPTkVfUk9UQVRFOlxuXHRcdFx0XHRcdFx0dGltZWxpbmVzLnB1c2gocmVhZFRpbWVsaW5lMShpbnB1dCwgbmV3IFJvdGF0ZVRpbWVsaW5lKGZyYW1lQ291bnQsIGJlemllckNvdW50LCBib25lSW5kZXgpLCAxKSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIEJPTkVfVFJBTlNMQVRFOlxuXHRcdFx0XHRcdFx0dGltZWxpbmVzLnB1c2gocmVhZFRpbWVsaW5lMihpbnB1dCwgbmV3IFRyYW5zbGF0ZVRpbWVsaW5lKGZyYW1lQ291bnQsIGJlemllckNvdW50LCBib25lSW5kZXgpLCBzY2FsZSkpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBCT05FX1RSQU5TTEFURVg6XG5cdFx0XHRcdFx0XHR0aW1lbGluZXMucHVzaChyZWFkVGltZWxpbmUxKGlucHV0LCBuZXcgVHJhbnNsYXRlWFRpbWVsaW5lKGZyYW1lQ291bnQsIGJlemllckNvdW50LCBib25lSW5kZXgpLCBzY2FsZSkpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBCT05FX1RSQU5TTEFURVk6XG5cdFx0XHRcdFx0XHR0aW1lbGluZXMucHVzaChyZWFkVGltZWxpbmUxKGlucHV0LCBuZXcgVHJhbnNsYXRlWVRpbWVsaW5lKGZyYW1lQ291bnQsIGJlemllckNvdW50LCBib25lSW5kZXgpLCBzY2FsZSkpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBCT05FX1NDQUxFOlxuXHRcdFx0XHRcdFx0dGltZWxpbmVzLnB1c2gocmVhZFRpbWVsaW5lMihpbnB1dCwgbmV3IFNjYWxlVGltZWxpbmUoZnJhbWVDb3VudCwgYmV6aWVyQ291bnQsIGJvbmVJbmRleCksIDEpKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgQk9ORV9TQ0FMRVg6XG5cdFx0XHRcdFx0XHR0aW1lbGluZXMucHVzaChyZWFkVGltZWxpbmUxKGlucHV0LCBuZXcgU2NhbGVYVGltZWxpbmUoZnJhbWVDb3VudCwgYmV6aWVyQ291bnQsIGJvbmVJbmRleCksIDEpKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgQk9ORV9TQ0FMRVk6XG5cdFx0XHRcdFx0XHR0aW1lbGluZXMucHVzaChyZWFkVGltZWxpbmUxKGlucHV0LCBuZXcgU2NhbGVZVGltZWxpbmUoZnJhbWVDb3VudCwgYmV6aWVyQ291bnQsIGJvbmVJbmRleCksIDEpKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgQk9ORV9TSEVBUjpcblx0XHRcdFx0XHRcdHRpbWVsaW5lcy5wdXNoKHJlYWRUaW1lbGluZTIoaW5wdXQsIG5ldyBTaGVhclRpbWVsaW5lKGZyYW1lQ291bnQsIGJlemllckNvdW50LCBib25lSW5kZXgpLCAxKSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIEJPTkVfU0hFQVJYOlxuXHRcdFx0XHRcdFx0dGltZWxpbmVzLnB1c2gocmVhZFRpbWVsaW5lMShpbnB1dCwgbmV3IFNoZWFyWFRpbWVsaW5lKGZyYW1lQ291bnQsIGJlemllckNvdW50LCBib25lSW5kZXgpLCAxKSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIEJPTkVfU0hFQVJZOlxuXHRcdFx0XHRcdFx0dGltZWxpbmVzLnB1c2gocmVhZFRpbWVsaW5lMShpbnB1dCwgbmV3IFNoZWFyWVRpbWVsaW5lKGZyYW1lQ291bnQsIGJlemllckNvdW50LCBib25lSW5kZXgpLCAxKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBJSyBjb25zdHJhaW50IHRpbWVsaW5lcy5cblx0XHRmb3IgKGxldCBpID0gMCwgbiA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7IGkgPCBuOyBpKyspIHtcblx0XHRcdGxldCBpbmRleCA9IGlucHV0LnJlYWRJbnQodHJ1ZSksIGZyYW1lQ291bnQgPSBpbnB1dC5yZWFkSW50KHRydWUpLCBmcmFtZUxhc3QgPSBmcmFtZUNvdW50IC0gMTtcblx0XHRcdGxldCB0aW1lbGluZSA9IG5ldyBJa0NvbnN0cmFpbnRUaW1lbGluZShmcmFtZUNvdW50LCBpbnB1dC5yZWFkSW50KHRydWUpLCBpbmRleCk7XG5cdFx0XHRsZXQgZmxhZ3MgPSBpbnB1dC5yZWFkQnl0ZSgpO1xuXHRcdFx0bGV0IHRpbWUgPSBpbnB1dC5yZWFkRmxvYXQoKSwgbWl4ID0gKGZsYWdzICYgMSkgIT0gMCA/ICgoZmxhZ3MgJiAyKSAhPSAwID8gaW5wdXQucmVhZEZsb2F0KCkgOiAxKSA6IDA7XG5cdFx0XHRsZXQgc29mdG5lc3MgPSAoZmxhZ3MgJiA0KSAhPSAwID8gaW5wdXQucmVhZEZsb2F0KCkgKiBzY2FsZSA6IDA7XG5cdFx0XHRmb3IgKGxldCBmcmFtZSA9IDAsIGJlemllciA9IDA7IDsgZnJhbWUrKykge1xuXHRcdFx0XHR0aW1lbGluZS5zZXRGcmFtZShmcmFtZSwgdGltZSwgbWl4LCBzb2Z0bmVzcywgKGZsYWdzICYgOCkgIT0gMCA/IDEgOiAtMSwgKGZsYWdzICYgMTYpICE9IDAsIChmbGFncyAmIDMyKSAhPSAwKTtcblx0XHRcdFx0aWYgKGZyYW1lID09IGZyYW1lTGFzdCkgYnJlYWs7XG5cdFx0XHRcdGZsYWdzID0gaW5wdXQucmVhZEJ5dGUoKTtcblx0XHRcdFx0Y29uc3QgdGltZTIgPSBpbnB1dC5yZWFkRmxvYXQoKSwgbWl4MiA9IChmbGFncyAmIDEpICE9IDAgPyAoKGZsYWdzICYgMikgIT0gMCA/IGlucHV0LnJlYWRGbG9hdCgpIDogMSkgOiAwO1xuXHRcdFx0XHRjb25zdCBzb2Z0bmVzczIgPSAoZmxhZ3MgJiA0KSAhPSAwID8gaW5wdXQucmVhZEZsb2F0KCkgKiBzY2FsZSA6IDA7XG5cdFx0XHRcdGlmICgoZmxhZ3MgJiA2NCkgIT0gMCkge1xuXHRcdFx0XHRcdHRpbWVsaW5lLnNldFN0ZXBwZWQoZnJhbWUpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKChmbGFncyAmIDEyOCkgIT0gMCkge1xuXHRcdFx0XHRcdHNldEJlemllcihpbnB1dCwgdGltZWxpbmUsIGJlemllcisrLCBmcmFtZSwgMCwgdGltZSwgdGltZTIsIG1peCwgbWl4MiwgMSk7XG5cdFx0XHRcdFx0c2V0QmV6aWVyKGlucHV0LCB0aW1lbGluZSwgYmV6aWVyKyssIGZyYW1lLCAxLCB0aW1lLCB0aW1lMiwgc29mdG5lc3MsIHNvZnRuZXNzMiwgc2NhbGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRpbWUgPSB0aW1lMjtcblx0XHRcdFx0bWl4ID0gbWl4Mjtcblx0XHRcdFx0c29mdG5lc3MgPSBzb2Z0bmVzczI7XG5cdFx0XHR9XG5cdFx0XHR0aW1lbGluZXMucHVzaCh0aW1lbGluZSk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJhbnNmb3JtIGNvbnN0cmFpbnQgdGltZWxpbmVzLlxuXHRcdGZvciAobGV0IGkgPSAwLCBuID0gaW5wdXQucmVhZEludCh0cnVlKTsgaSA8IG47IGkrKykge1xuXHRcdFx0bGV0IGluZGV4ID0gaW5wdXQucmVhZEludCh0cnVlKSwgZnJhbWVDb3VudCA9IGlucHV0LnJlYWRJbnQodHJ1ZSksIGZyYW1lTGFzdCA9IGZyYW1lQ291bnQgLSAxO1xuXHRcdFx0bGV0IHRpbWVsaW5lID0gbmV3IFRyYW5zZm9ybUNvbnN0cmFpbnRUaW1lbGluZShmcmFtZUNvdW50LCBpbnB1dC5yZWFkSW50KHRydWUpLCBpbmRleCk7XG5cdFx0XHRsZXQgdGltZSA9IGlucHV0LnJlYWRGbG9hdCgpLCBtaXhSb3RhdGUgPSBpbnB1dC5yZWFkRmxvYXQoKSwgbWl4WCA9IGlucHV0LnJlYWRGbG9hdCgpLCBtaXhZID0gaW5wdXQucmVhZEZsb2F0KCksXG5cdFx0XHRcdG1peFNjYWxlWCA9IGlucHV0LnJlYWRGbG9hdCgpLCBtaXhTY2FsZVkgPSBpbnB1dC5yZWFkRmxvYXQoKSwgbWl4U2hlYXJZID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRmb3IgKGxldCBmcmFtZSA9IDAsIGJlemllciA9IDA7IDsgZnJhbWUrKykge1xuXHRcdFx0XHR0aW1lbGluZS5zZXRGcmFtZShmcmFtZSwgdGltZSwgbWl4Um90YXRlLCBtaXhYLCBtaXhZLCBtaXhTY2FsZVgsIG1peFNjYWxlWSwgbWl4U2hlYXJZKTtcblx0XHRcdFx0aWYgKGZyYW1lID09IGZyYW1lTGFzdCkgYnJlYWs7XG5cdFx0XHRcdGxldCB0aW1lMiA9IGlucHV0LnJlYWRGbG9hdCgpLCBtaXhSb3RhdGUyID0gaW5wdXQucmVhZEZsb2F0KCksIG1peFgyID0gaW5wdXQucmVhZEZsb2F0KCksIG1peFkyID0gaW5wdXQucmVhZEZsb2F0KCksXG5cdFx0XHRcdFx0bWl4U2NhbGVYMiA9IGlucHV0LnJlYWRGbG9hdCgpLCBtaXhTY2FsZVkyID0gaW5wdXQucmVhZEZsb2F0KCksIG1peFNoZWFyWTIgPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdFx0c3dpdGNoIChpbnB1dC5yZWFkQnl0ZSgpKSB7XG5cdFx0XHRcdFx0Y2FzZSBDVVJWRV9TVEVQUEVEOlxuXHRcdFx0XHRcdFx0dGltZWxpbmUuc2V0U3RlcHBlZChmcmFtZSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIENVUlZFX0JFWklFUjpcblx0XHRcdFx0XHRcdHNldEJlemllcihpbnB1dCwgdGltZWxpbmUsIGJlemllcisrLCBmcmFtZSwgMCwgdGltZSwgdGltZTIsIG1peFJvdGF0ZSwgbWl4Um90YXRlMiwgMSk7XG5cdFx0XHRcdFx0XHRzZXRCZXppZXIoaW5wdXQsIHRpbWVsaW5lLCBiZXppZXIrKywgZnJhbWUsIDEsIHRpbWUsIHRpbWUyLCBtaXhYLCBtaXhYMiwgMSk7XG5cdFx0XHRcdFx0XHRzZXRCZXppZXIoaW5wdXQsIHRpbWVsaW5lLCBiZXppZXIrKywgZnJhbWUsIDIsIHRpbWUsIHRpbWUyLCBtaXhZLCBtaXhZMiwgMSk7XG5cdFx0XHRcdFx0XHRzZXRCZXppZXIoaW5wdXQsIHRpbWVsaW5lLCBiZXppZXIrKywgZnJhbWUsIDMsIHRpbWUsIHRpbWUyLCBtaXhTY2FsZVgsIG1peFNjYWxlWDIsIDEpO1xuXHRcdFx0XHRcdFx0c2V0QmV6aWVyKGlucHV0LCB0aW1lbGluZSwgYmV6aWVyKyssIGZyYW1lLCA0LCB0aW1lLCB0aW1lMiwgbWl4U2NhbGVZLCBtaXhTY2FsZVkyLCAxKTtcblx0XHRcdFx0XHRcdHNldEJlemllcihpbnB1dCwgdGltZWxpbmUsIGJlemllcisrLCBmcmFtZSwgNSwgdGltZSwgdGltZTIsIG1peFNoZWFyWSwgbWl4U2hlYXJZMiwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGltZSA9IHRpbWUyO1xuXHRcdFx0XHRtaXhSb3RhdGUgPSBtaXhSb3RhdGUyO1xuXHRcdFx0XHRtaXhYID0gbWl4WDI7XG5cdFx0XHRcdG1peFkgPSBtaXhZMjtcblx0XHRcdFx0bWl4U2NhbGVYID0gbWl4U2NhbGVYMjtcblx0XHRcdFx0bWl4U2NhbGVZID0gbWl4U2NhbGVZMjtcblx0XHRcdFx0bWl4U2hlYXJZID0gbWl4U2hlYXJZMjtcblx0XHRcdH1cblx0XHRcdHRpbWVsaW5lcy5wdXNoKHRpbWVsaW5lKTtcblx0XHR9XG5cblx0XHQvLyBQYXRoIGNvbnN0cmFpbnQgdGltZWxpbmVzLlxuXHRcdGZvciAobGV0IGkgPSAwLCBuID0gaW5wdXQucmVhZEludCh0cnVlKTsgaSA8IG47IGkrKykge1xuXHRcdFx0bGV0IGluZGV4ID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRcdGxldCBkYXRhID0gc2tlbGV0b25EYXRhLnBhdGhDb25zdHJhaW50c1tpbmRleF07XG5cdFx0XHRmb3IgKGxldCBpaSA9IDAsIG5uID0gaW5wdXQucmVhZEludCh0cnVlKTsgaWkgPCBubjsgaWkrKykge1xuXHRcdFx0XHRjb25zdCB0eXBlID0gaW5wdXQucmVhZEJ5dGUoKSwgZnJhbWVDb3VudCA9IGlucHV0LnJlYWRJbnQodHJ1ZSksIGJlemllckNvdW50ID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRcdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRcdFx0Y2FzZSBQQVRIX1BPU0lUSU9OOlxuXHRcdFx0XHRcdFx0dGltZWxpbmVzXG5cdFx0XHRcdFx0XHRcdC5wdXNoKHJlYWRUaW1lbGluZTEoaW5wdXQsIG5ldyBQYXRoQ29uc3RyYWludFBvc2l0aW9uVGltZWxpbmUoZnJhbWVDb3VudCwgYmV6aWVyQ291bnQsIGluZGV4KSxcblx0XHRcdFx0XHRcdFx0XHRkYXRhLnBvc2l0aW9uTW9kZSA9PSBQb3NpdGlvbk1vZGUuRml4ZWQgPyBzY2FsZSA6IDEpKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgUEFUSF9TUEFDSU5HOlxuXHRcdFx0XHRcdFx0dGltZWxpbmVzXG5cdFx0XHRcdFx0XHRcdC5wdXNoKHJlYWRUaW1lbGluZTEoaW5wdXQsIG5ldyBQYXRoQ29uc3RyYWludFNwYWNpbmdUaW1lbGluZShmcmFtZUNvdW50LCBiZXppZXJDb3VudCwgaW5kZXgpLFxuXHRcdFx0XHRcdFx0XHRcdGRhdGEuc3BhY2luZ01vZGUgPT0gU3BhY2luZ01vZGUuTGVuZ3RoIHx8IGRhdGEuc3BhY2luZ01vZGUgPT0gU3BhY2luZ01vZGUuRml4ZWQgPyBzY2FsZSA6IDEpKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgUEFUSF9NSVg6XG5cdFx0XHRcdFx0XHRsZXQgdGltZWxpbmUgPSBuZXcgUGF0aENvbnN0cmFpbnRNaXhUaW1lbGluZShmcmFtZUNvdW50LCBiZXppZXJDb3VudCwgaW5kZXgpO1xuXHRcdFx0XHRcdFx0bGV0IHRpbWUgPSBpbnB1dC5yZWFkRmxvYXQoKSwgbWl4Um90YXRlID0gaW5wdXQucmVhZEZsb2F0KCksIG1peFggPSBpbnB1dC5yZWFkRmxvYXQoKSwgbWl4WSA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0XHRcdFx0Zm9yIChsZXQgZnJhbWUgPSAwLCBiZXppZXIgPSAwLCBmcmFtZUxhc3QgPSB0aW1lbGluZS5nZXRGcmFtZUNvdW50KCkgLSAxOyA7IGZyYW1lKyspIHtcblx0XHRcdFx0XHRcdFx0dGltZWxpbmUuc2V0RnJhbWUoZnJhbWUsIHRpbWUsIG1peFJvdGF0ZSwgbWl4WCwgbWl4WSk7XG5cdFx0XHRcdFx0XHRcdGlmIChmcmFtZSA9PSBmcmFtZUxhc3QpIGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRsZXQgdGltZTIgPSBpbnB1dC5yZWFkRmxvYXQoKSwgbWl4Um90YXRlMiA9IGlucHV0LnJlYWRGbG9hdCgpLCBtaXhYMiA9IGlucHV0LnJlYWRGbG9hdCgpLFxuXHRcdFx0XHRcdFx0XHRcdG1peFkyID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoaW5wdXQucmVhZEJ5dGUoKSkge1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgQ1VSVkVfU1RFUFBFRDpcblx0XHRcdFx0XHRcdFx0XHRcdHRpbWVsaW5lLnNldFN0ZXBwZWQoZnJhbWUpO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSBDVVJWRV9CRVpJRVI6XG5cdFx0XHRcdFx0XHRcdFx0XHRzZXRCZXppZXIoaW5wdXQsIHRpbWVsaW5lLCBiZXppZXIrKywgZnJhbWUsIDAsIHRpbWUsIHRpbWUyLCBtaXhSb3RhdGUsIG1peFJvdGF0ZTIsIDEpO1xuXHRcdFx0XHRcdFx0XHRcdFx0c2V0QmV6aWVyKGlucHV0LCB0aW1lbGluZSwgYmV6aWVyKyssIGZyYW1lLCAxLCB0aW1lLCB0aW1lMiwgbWl4WCwgbWl4WDIsIDEpO1xuXHRcdFx0XHRcdFx0XHRcdFx0c2V0QmV6aWVyKGlucHV0LCB0aW1lbGluZSwgYmV6aWVyKyssIGZyYW1lLCAyLCB0aW1lLCB0aW1lMiwgbWl4WSwgbWl4WTIsIDEpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRpbWUgPSB0aW1lMjtcblx0XHRcdFx0XHRcdFx0bWl4Um90YXRlID0gbWl4Um90YXRlMjtcblx0XHRcdFx0XHRcdFx0bWl4WCA9IG1peFgyO1xuXHRcdFx0XHRcdFx0XHRtaXhZID0gbWl4WTI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0aW1lbGluZXMucHVzaCh0aW1lbGluZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQaHlzaWNzIHRpbWVsaW5lcy5cblx0XHRmb3IgKGxldCBpID0gMCwgbiA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7IGkgPCBuOyBpKyspIHtcblx0XHRcdGNvbnN0IGluZGV4ID0gaW5wdXQucmVhZEludCh0cnVlKSAtIDE7XG5cdFx0XHRmb3IgKGxldCBpaSA9IDAsIG5uID0gaW5wdXQucmVhZEludCh0cnVlKTsgaWkgPCBubjsgaWkrKykge1xuXHRcdFx0XHRjb25zdCB0eXBlID0gaW5wdXQucmVhZEJ5dGUoKSwgZnJhbWVDb3VudCA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0XHRcdGlmICh0eXBlID09IFBIWVNJQ1NfUkVTRVQpIHtcblx0XHRcdFx0XHRjb25zdCB0aW1lbGluZSA9IG5ldyBQaHlzaWNzQ29uc3RyYWludFJlc2V0VGltZWxpbmUoZnJhbWVDb3VudCwgaW5kZXgpO1xuXHRcdFx0XHRcdGZvciAobGV0IGZyYW1lID0gMDsgZnJhbWUgPCBmcmFtZUNvdW50OyBmcmFtZSsrKVxuXHRcdFx0XHRcdFx0dGltZWxpbmUuc2V0RnJhbWUoZnJhbWUsIGlucHV0LnJlYWRGbG9hdCgpKTtcblx0XHRcdFx0XHR0aW1lbGluZXMucHVzaCh0aW1lbGluZSk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgYmV6aWVyQ291bnQgPSBpbnB1dC5yZWFkSW50KHRydWUpO1xuXHRcdFx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdFx0XHRjYXNlIFBIWVNJQ1NfSU5FUlRJQTpcblx0XHRcdFx0XHRcdHRpbWVsaW5lcy5wdXNoKHJlYWRUaW1lbGluZTEoaW5wdXQsIG5ldyBQaHlzaWNzQ29uc3RyYWludEluZXJ0aWFUaW1lbGluZShmcmFtZUNvdW50LCBiZXppZXJDb3VudCwgaW5kZXgpLCAxKSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFBIWVNJQ1NfU1RSRU5HVEg6XG5cdFx0XHRcdFx0XHR0aW1lbGluZXMucHVzaChyZWFkVGltZWxpbmUxKGlucHV0LCBuZXcgUGh5c2ljc0NvbnN0cmFpbnRTdHJlbmd0aFRpbWVsaW5lKGZyYW1lQ291bnQsIGJlemllckNvdW50LCBpbmRleCksIDEpKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgUEhZU0lDU19EQU1QSU5HOlxuXHRcdFx0XHRcdFx0dGltZWxpbmVzLnB1c2gocmVhZFRpbWVsaW5lMShpbnB1dCwgbmV3IFBoeXNpY3NDb25zdHJhaW50RGFtcGluZ1RpbWVsaW5lKGZyYW1lQ291bnQsIGJlemllckNvdW50LCBpbmRleCksIDEpKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgUEhZU0lDU19NQVNTOlxuXHRcdFx0XHRcdFx0dGltZWxpbmVzLnB1c2gocmVhZFRpbWVsaW5lMShpbnB1dCwgbmV3IFBoeXNpY3NDb25zdHJhaW50TWFzc1RpbWVsaW5lKGZyYW1lQ291bnQsIGJlemllckNvdW50LCBpbmRleCksIDEpKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgUEhZU0lDU19XSU5EOlxuXHRcdFx0XHRcdFx0dGltZWxpbmVzLnB1c2gocmVhZFRpbWVsaW5lMShpbnB1dCwgbmV3IFBoeXNpY3NDb25zdHJhaW50V2luZFRpbWVsaW5lKGZyYW1lQ291bnQsIGJlemllckNvdW50LCBpbmRleCksIDEpKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgUEhZU0lDU19HUkFWSVRZOlxuXHRcdFx0XHRcdFx0dGltZWxpbmVzLnB1c2gocmVhZFRpbWVsaW5lMShpbnB1dCwgbmV3IFBoeXNpY3NDb25zdHJhaW50R3Jhdml0eVRpbWVsaW5lKGZyYW1lQ291bnQsIGJlemllckNvdW50LCBpbmRleCksIDEpKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgUEhZU0lDU19NSVg6XG5cdFx0XHRcdFx0XHR0aW1lbGluZXMucHVzaChyZWFkVGltZWxpbmUxKGlucHV0LCBuZXcgUGh5c2ljc0NvbnN0cmFpbnRNaXhUaW1lbGluZShmcmFtZUNvdW50LCBiZXppZXJDb3VudCwgaW5kZXgpLCAxKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBEZWZvcm0gdGltZWxpbmVzLlxuXHRcdGZvciAobGV0IGkgPSAwLCBuID0gaW5wdXQucmVhZEludCh0cnVlKTsgaSA8IG47IGkrKykge1xuXHRcdFx0bGV0IHNraW4gPSBza2VsZXRvbkRhdGEuc2tpbnNbaW5wdXQucmVhZEludCh0cnVlKV07XG5cdFx0XHRmb3IgKGxldCBpaSA9IDAsIG5uID0gaW5wdXQucmVhZEludCh0cnVlKTsgaWkgPCBubjsgaWkrKykge1xuXHRcdFx0XHRsZXQgc2xvdEluZGV4ID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRcdFx0Zm9yIChsZXQgaWlpID0gMCwgbm5uID0gaW5wdXQucmVhZEludCh0cnVlKTsgaWlpIDwgbm5uOyBpaWkrKykge1xuXHRcdFx0XHRcdGxldCBhdHRhY2htZW50TmFtZSA9IGlucHV0LnJlYWRTdHJpbmdSZWYoKTtcblx0XHRcdFx0XHRpZiAoIWF0dGFjaG1lbnROYW1lKSB0aHJvdyBuZXcgRXJyb3IoXCJhdHRhY2htZW50TmFtZSBtdXN0IG5vdCBiZSBudWxsLlwiKTtcblx0XHRcdFx0XHRsZXQgYXR0YWNobWVudCA9IHNraW4uZ2V0QXR0YWNobWVudChzbG90SW5kZXgsIGF0dGFjaG1lbnROYW1lKTtcblx0XHRcdFx0XHRsZXQgdGltZWxpbmVUeXBlID0gaW5wdXQucmVhZEJ5dGUoKTtcblx0XHRcdFx0XHRsZXQgZnJhbWVDb3VudCA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0XHRcdFx0bGV0IGZyYW1lTGFzdCA9IGZyYW1lQ291bnQgLSAxO1xuXG5cdFx0XHRcdFx0c3dpdGNoICh0aW1lbGluZVR5cGUpIHtcblx0XHRcdFx0XHRcdGNhc2UgQVRUQUNITUVOVF9ERUZPUk06IHtcblx0XHRcdFx0XHRcdFx0bGV0IHZlcnRleEF0dGFjaG1lbnQgPSBhdHRhY2htZW50IGFzIFZlcnRleEF0dGFjaG1lbnQ7XG5cdFx0XHRcdFx0XHRcdGxldCB3ZWlnaHRlZCA9IHZlcnRleEF0dGFjaG1lbnQuYm9uZXM7XG5cdFx0XHRcdFx0XHRcdGxldCB2ZXJ0aWNlcyA9IHZlcnRleEF0dGFjaG1lbnQudmVydGljZXM7XG5cdFx0XHRcdFx0XHRcdGxldCBkZWZvcm1MZW5ndGggPSB3ZWlnaHRlZCA/IHZlcnRpY2VzLmxlbmd0aCAvIDMgKiAyIDogdmVydGljZXMubGVuZ3RoO1xuXG5cblx0XHRcdFx0XHRcdFx0bGV0IGJlemllckNvdW50ID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRcdFx0XHRcdFx0bGV0IHRpbWVsaW5lID0gbmV3IERlZm9ybVRpbWVsaW5lKGZyYW1lQ291bnQsIGJlemllckNvdW50LCBzbG90SW5kZXgsIHZlcnRleEF0dGFjaG1lbnQpO1xuXG5cdFx0XHRcdFx0XHRcdGxldCB0aW1lID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdFx0XHRcdGZvciAobGV0IGZyYW1lID0gMCwgYmV6aWVyID0gMDsgOyBmcmFtZSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0bGV0IGRlZm9ybTtcblx0XHRcdFx0XHRcdFx0XHRsZXQgZW5kID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoZW5kID09IDApXG5cdFx0XHRcdFx0XHRcdFx0XHRkZWZvcm0gPSB3ZWlnaHRlZCA/IFV0aWxzLm5ld0Zsb2F0QXJyYXkoZGVmb3JtTGVuZ3RoKSA6IHZlcnRpY2VzO1xuXHRcdFx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGVmb3JtID0gVXRpbHMubmV3RmxvYXRBcnJheShkZWZvcm1MZW5ndGgpO1xuXHRcdFx0XHRcdFx0XHRcdFx0bGV0IHN0YXJ0ID0gaW5wdXQucmVhZEludCh0cnVlKTtcblx0XHRcdFx0XHRcdFx0XHRcdGVuZCArPSBzdGFydDtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChzY2FsZSA9PSAxKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZvciAobGV0IHYgPSBzdGFydDsgdiA8IGVuZDsgdisrKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZm9ybVt2XSA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm9yIChsZXQgdiA9IHN0YXJ0OyB2IDwgZW5kOyB2KyspXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmb3JtW3ZdID0gaW5wdXQucmVhZEZsb2F0KCkgKiBzY2FsZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGlmICghd2VpZ2h0ZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm9yIChsZXQgdiA9IDAsIHZuID0gZGVmb3JtLmxlbmd0aDsgdiA8IHZuOyB2KyspXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmb3JtW3ZdICs9IHZlcnRpY2VzW3ZdO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdHRpbWVsaW5lLnNldEZyYW1lKGZyYW1lLCB0aW1lLCBkZWZvcm0pO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChmcmFtZSA9PSBmcmFtZUxhc3QpIGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdGxldCB0aW1lMiA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoaW5wdXQucmVhZEJ5dGUoKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSBDVVJWRV9TVEVQUEVEOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aW1lbGluZS5zZXRTdGVwcGVkKGZyYW1lKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIENVUlZFX0JFWklFUjpcblx0XHRcdFx0XHRcdFx0XHRcdFx0c2V0QmV6aWVyKGlucHV0LCB0aW1lbGluZSwgYmV6aWVyKyssIGZyYW1lLCAwLCB0aW1lLCB0aW1lMiwgMCwgMSwgMSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHRpbWUgPSB0aW1lMjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR0aW1lbGluZXMucHVzaCh0aW1lbGluZSk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y2FzZSBBVFRBQ0hNRU5UX1NFUVVFTkNFOiB7XG5cdFx0XHRcdFx0XHRcdGxldCB0aW1lbGluZSA9IG5ldyBTZXF1ZW5jZVRpbWVsaW5lKGZyYW1lQ291bnQsIHNsb3RJbmRleCwgYXR0YWNobWVudCBhcyB1bmtub3duIGFzIEhhc1RleHR1cmVSZWdpb24pO1xuXHRcdFx0XHRcdFx0XHRmb3IgKGxldCBmcmFtZSA9IDA7IGZyYW1lIDwgZnJhbWVDb3VudDsgZnJhbWUrKykge1xuXHRcdFx0XHRcdFx0XHRcdGxldCB0aW1lID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdFx0XHRcdFx0bGV0IG1vZGVBbmRJbmRleCA9IGlucHV0LnJlYWRJbnQzMigpO1xuXHRcdFx0XHRcdFx0XHRcdHRpbWVsaW5lLnNldEZyYW1lKGZyYW1lLCB0aW1lLCBTZXF1ZW5jZU1vZGVWYWx1ZXNbbW9kZUFuZEluZGV4ICYgMHhmXSwgbW9kZUFuZEluZGV4ID4+IDQsXG5cdFx0XHRcdFx0XHRcdFx0XHRpbnB1dC5yZWFkRmxvYXQoKSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dGltZWxpbmVzLnB1c2godGltZWxpbmUpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBEcmF3IG9yZGVyIHRpbWVsaW5lLlxuXHRcdGxldCBkcmF3T3JkZXJDb3VudCA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0aWYgKGRyYXdPcmRlckNvdW50ID4gMCkge1xuXHRcdFx0bGV0IHRpbWVsaW5lID0gbmV3IERyYXdPcmRlclRpbWVsaW5lKGRyYXdPcmRlckNvdW50KTtcblx0XHRcdGxldCBzbG90Q291bnQgPSBza2VsZXRvbkRhdGEuc2xvdHMubGVuZ3RoO1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBkcmF3T3JkZXJDb3VudDsgaSsrKSB7XG5cdFx0XHRcdGxldCB0aW1lID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdGxldCBvZmZzZXRDb3VudCA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0XHRcdGxldCBkcmF3T3JkZXIgPSBVdGlscy5uZXdBcnJheShzbG90Q291bnQsIDApO1xuXHRcdFx0XHRmb3IgKGxldCBpaSA9IHNsb3RDb3VudCAtIDE7IGlpID49IDA7IGlpLS0pXG5cdFx0XHRcdFx0ZHJhd09yZGVyW2lpXSA9IC0xO1xuXHRcdFx0XHRsZXQgdW5jaGFuZ2VkID0gVXRpbHMubmV3QXJyYXkoc2xvdENvdW50IC0gb2Zmc2V0Q291bnQsIDApO1xuXHRcdFx0XHRsZXQgb3JpZ2luYWxJbmRleCA9IDAsIHVuY2hhbmdlZEluZGV4ID0gMDtcblx0XHRcdFx0Zm9yIChsZXQgaWkgPSAwOyBpaSA8IG9mZnNldENvdW50OyBpaSsrKSB7XG5cdFx0XHRcdFx0bGV0IHNsb3RJbmRleCA9IGlucHV0LnJlYWRJbnQodHJ1ZSk7XG5cdFx0XHRcdFx0Ly8gQ29sbGVjdCB1bmNoYW5nZWQgaXRlbXMuXG5cdFx0XHRcdFx0d2hpbGUgKG9yaWdpbmFsSW5kZXggIT0gc2xvdEluZGV4KVxuXHRcdFx0XHRcdFx0dW5jaGFuZ2VkW3VuY2hhbmdlZEluZGV4KytdID0gb3JpZ2luYWxJbmRleCsrO1xuXHRcdFx0XHRcdC8vIFNldCBjaGFuZ2VkIGl0ZW1zLlxuXHRcdFx0XHRcdGRyYXdPcmRlcltvcmlnaW5hbEluZGV4ICsgaW5wdXQucmVhZEludCh0cnVlKV0gPSBvcmlnaW5hbEluZGV4Kys7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gQ29sbGVjdCByZW1haW5pbmcgdW5jaGFuZ2VkIGl0ZW1zLlxuXHRcdFx0XHR3aGlsZSAob3JpZ2luYWxJbmRleCA8IHNsb3RDb3VudClcblx0XHRcdFx0XHR1bmNoYW5nZWRbdW5jaGFuZ2VkSW5kZXgrK10gPSBvcmlnaW5hbEluZGV4Kys7XG5cdFx0XHRcdC8vIEZpbGwgaW4gdW5jaGFuZ2VkIGl0ZW1zLlxuXHRcdFx0XHRmb3IgKGxldCBpaSA9IHNsb3RDb3VudCAtIDE7IGlpID49IDA7IGlpLS0pXG5cdFx0XHRcdFx0aWYgKGRyYXdPcmRlcltpaV0gPT0gLTEpIGRyYXdPcmRlcltpaV0gPSB1bmNoYW5nZWRbLS11bmNoYW5nZWRJbmRleF07XG5cdFx0XHRcdHRpbWVsaW5lLnNldEZyYW1lKGksIHRpbWUsIGRyYXdPcmRlcik7XG5cdFx0XHR9XG5cdFx0XHR0aW1lbGluZXMucHVzaCh0aW1lbGluZSk7XG5cdFx0fVxuXG5cdFx0Ly8gRXZlbnQgdGltZWxpbmUuXG5cdFx0bGV0IGV2ZW50Q291bnQgPSBpbnB1dC5yZWFkSW50KHRydWUpO1xuXHRcdGlmIChldmVudENvdW50ID4gMCkge1xuXHRcdFx0bGV0IHRpbWVsaW5lID0gbmV3IEV2ZW50VGltZWxpbmUoZXZlbnRDb3VudCk7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50Q291bnQ7IGkrKykge1xuXHRcdFx0XHRsZXQgdGltZSA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0XHRsZXQgZXZlbnREYXRhID0gc2tlbGV0b25EYXRhLmV2ZW50c1tpbnB1dC5yZWFkSW50KHRydWUpXTtcblx0XHRcdFx0bGV0IGV2ZW50ID0gbmV3IEV2ZW50KHRpbWUsIGV2ZW50RGF0YSk7XG5cdFx0XHRcdGV2ZW50LmludFZhbHVlID0gaW5wdXQucmVhZEludChmYWxzZSk7XG5cdFx0XHRcdGV2ZW50LmZsb2F0VmFsdWUgPSBpbnB1dC5yZWFkRmxvYXQoKTtcblx0XHRcdFx0ZXZlbnQuc3RyaW5nVmFsdWUgPSBpbnB1dC5yZWFkU3RyaW5nKCk7XG5cdFx0XHRcdGlmIChldmVudC5zdHJpbmdWYWx1ZSA9PSBudWxsKSBldmVudC5zdHJpbmdWYWx1ZSA9IGV2ZW50RGF0YS5zdHJpbmdWYWx1ZTtcblx0XHRcdFx0aWYgKGV2ZW50LmRhdGEuYXVkaW9QYXRoKSB7XG5cdFx0XHRcdFx0ZXZlbnQudm9sdW1lID0gaW5wdXQucmVhZEZsb2F0KCk7XG5cdFx0XHRcdFx0ZXZlbnQuYmFsYW5jZSA9IGlucHV0LnJlYWRGbG9hdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRpbWVsaW5lLnNldEZyYW1lKGksIGV2ZW50KTtcblx0XHRcdH1cblx0XHRcdHRpbWVsaW5lcy5wdXNoKHRpbWVsaW5lKTtcblx0XHR9XG5cblx0XHRsZXQgZHVyYXRpb24gPSAwO1xuXHRcdGZvciAobGV0IGkgPSAwLCBuID0gdGltZWxpbmVzLmxlbmd0aDsgaSA8IG47IGkrKylcblx0XHRcdGR1cmF0aW9uID0gTWF0aC5tYXgoZHVyYXRpb24sIHRpbWVsaW5lc1tpXS5nZXREdXJhdGlvbigpKTtcblx0XHRyZXR1cm4gbmV3IEFuaW1hdGlvbihuYW1lLCB0aW1lbGluZXMsIGR1cmF0aW9uKTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgQmluYXJ5SW5wdXQge1xuXHRjb25zdHJ1Y3RvciAoZGF0YTogVWludDhBcnJheSB8IEFycmF5QnVmZmVyLCBwdWJsaWMgc3RyaW5ncyA9IG5ldyBBcnJheTxzdHJpbmc+KCksIHByaXZhdGUgaW5kZXg6IG51bWJlciA9IDAsIHByaXZhdGUgYnVmZmVyID0gbmV3IERhdGFWaWV3KGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IGRhdGEgOiBkYXRhLmJ1ZmZlcikpIHtcblx0fVxuXG5cdHJlYWRCeXRlICgpOiBudW1iZXIge1xuXHRcdHJldHVybiB0aGlzLmJ1ZmZlci5nZXRJbnQ4KHRoaXMuaW5kZXgrKyk7XG5cdH1cblxuXHRyZWFkVW5zaWduZWRCeXRlICgpOiBudW1iZXIge1xuXHRcdHJldHVybiB0aGlzLmJ1ZmZlci5nZXRVaW50OCh0aGlzLmluZGV4KyspO1xuXHR9XG5cblx0cmVhZFNob3J0ICgpOiBudW1iZXIge1xuXHRcdGxldCB2YWx1ZSA9IHRoaXMuYnVmZmVyLmdldEludDE2KHRoaXMuaW5kZXgpO1xuXHRcdHRoaXMuaW5kZXggKz0gMjtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblxuXHRyZWFkSW50MzIgKCk6IG51bWJlciB7XG5cdFx0bGV0IHZhbHVlID0gdGhpcy5idWZmZXIuZ2V0SW50MzIodGhpcy5pbmRleClcblx0XHR0aGlzLmluZGV4ICs9IDQ7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0cmVhZEludCAob3B0aW1pemVQb3NpdGl2ZTogYm9vbGVhbikge1xuXHRcdGxldCBiID0gdGhpcy5yZWFkQnl0ZSgpO1xuXHRcdGxldCByZXN1bHQgPSBiICYgMHg3Rjtcblx0XHRpZiAoKGIgJiAweDgwKSAhPSAwKSB7XG5cdFx0XHRiID0gdGhpcy5yZWFkQnl0ZSgpO1xuXHRcdFx0cmVzdWx0IHw9IChiICYgMHg3RikgPDwgNztcblx0XHRcdGlmICgoYiAmIDB4ODApICE9IDApIHtcblx0XHRcdFx0YiA9IHRoaXMucmVhZEJ5dGUoKTtcblx0XHRcdFx0cmVzdWx0IHw9IChiICYgMHg3RikgPDwgMTQ7XG5cdFx0XHRcdGlmICgoYiAmIDB4ODApICE9IDApIHtcblx0XHRcdFx0XHRiID0gdGhpcy5yZWFkQnl0ZSgpO1xuXHRcdFx0XHRcdHJlc3VsdCB8PSAoYiAmIDB4N0YpIDw8IDIxO1xuXHRcdFx0XHRcdGlmICgoYiAmIDB4ODApICE9IDApIHtcblx0XHRcdFx0XHRcdGIgPSB0aGlzLnJlYWRCeXRlKCk7XG5cdFx0XHRcdFx0XHRyZXN1bHQgfD0gKGIgJiAweDdGKSA8PCAyODtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG9wdGltaXplUG9zaXRpdmUgPyByZXN1bHQgOiAoKHJlc3VsdCA+Pj4gMSkgXiAtKHJlc3VsdCAmIDEpKTtcblx0fVxuXG5cdHJlYWRTdHJpbmdSZWYgKCk6IHN0cmluZyB8IG51bGwge1xuXHRcdGxldCBpbmRleCA9IHRoaXMucmVhZEludCh0cnVlKTtcblx0XHRyZXR1cm4gaW5kZXggPT0gMCA/IG51bGwgOiB0aGlzLnN0cmluZ3NbaW5kZXggLSAxXTtcblx0fVxuXG5cdHJlYWRTdHJpbmcgKCk6IHN0cmluZyB8IG51bGwge1xuXHRcdGxldCBieXRlQ291bnQgPSB0aGlzLnJlYWRJbnQodHJ1ZSk7XG5cdFx0c3dpdGNoIChieXRlQ291bnQpIHtcblx0XHRcdGNhc2UgMDpcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRjYXNlIDE6XG5cdFx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1cblx0XHRieXRlQ291bnQtLTtcblx0XHRsZXQgY2hhcnMgPSBcIlwiO1xuXHRcdGxldCBjaGFyQ291bnQgPSAwO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZUNvdW50Oykge1xuXHRcdFx0bGV0IGIgPSB0aGlzLnJlYWRVbnNpZ25lZEJ5dGUoKTtcblx0XHRcdHN3aXRjaCAoYiA+PiA0KSB7XG5cdFx0XHRcdGNhc2UgMTI6XG5cdFx0XHRcdGNhc2UgMTM6XG5cdFx0XHRcdFx0Y2hhcnMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGIgJiAweDFGKSA8PCA2IHwgdGhpcy5yZWFkQnl0ZSgpICYgMHgzRikpO1xuXHRcdFx0XHRcdGkgKz0gMjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAxNDpcblx0XHRcdFx0XHRjaGFycyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYiAmIDB4MEYpIDw8IDEyIHwgKHRoaXMucmVhZEJ5dGUoKSAmIDB4M0YpIDw8IDYgfCB0aGlzLnJlYWRCeXRlKCkgJiAweDNGKSk7XG5cdFx0XHRcdFx0aSArPSAzO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGNoYXJzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYik7XG5cdFx0XHRcdFx0aSsrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2hhcnM7XG5cdH1cblxuXHRyZWFkRmxvYXQgKCk6IG51bWJlciB7XG5cdFx0bGV0IHZhbHVlID0gdGhpcy5idWZmZXIuZ2V0RmxvYXQzMih0aGlzLmluZGV4KTtcblx0XHR0aGlzLmluZGV4ICs9IDQ7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0cmVhZEJvb2xlYW4gKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLnJlYWRCeXRlKCkgIT0gMDtcblx0fVxufVxuXG5jbGFzcyBMaW5rZWRNZXNoIHtcblx0cGFyZW50OiBzdHJpbmcgfCBudWxsOyBza2luSW5kZXg6IG51bWJlcjtcblx0c2xvdEluZGV4OiBudW1iZXI7XG5cdG1lc2g6IE1lc2hBdHRhY2htZW50O1xuXHRpbmhlcml0VGltZWxpbmU6IGJvb2xlYW47XG5cblx0Y29uc3RydWN0b3IgKG1lc2g6IE1lc2hBdHRhY2htZW50LCBza2luSW5kZXg6IG51bWJlciwgc2xvdEluZGV4OiBudW1iZXIsIHBhcmVudDogc3RyaW5nIHwgbnVsbCwgaW5oZXJpdERlZm9ybTogYm9vbGVhbikge1xuXHRcdHRoaXMubWVzaCA9IG1lc2g7XG5cdFx0dGhpcy5za2luSW5kZXggPSBza2luSW5kZXg7XG5cdFx0dGhpcy5zbG90SW5kZXggPSBzbG90SW5kZXg7XG5cdFx0dGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cdFx0dGhpcy5pbmhlcml0VGltZWxpbmUgPSBpbmhlcml0RGVmb3JtO1xuXHR9XG59XG5cbmNsYXNzIFZlcnRpY2VzIHtcblx0Y29uc3RydWN0b3IgKHB1YmxpYyBib25lczogQXJyYXk8bnVtYmVyPiB8IG51bGwgPSBudWxsLCBwdWJsaWMgdmVydGljZXM6IEFycmF5PG51bWJlcj4gfCBGbG9hdDMyQXJyYXkgfCBudWxsID0gbnVsbCwgcHVibGljIGxlbmd0aDogbnVtYmVyID0gMCkgeyB9XG59XG5cbmVudW0gQXR0YWNobWVudFR5cGUgeyBSZWdpb24sIEJvdW5kaW5nQm94LCBNZXNoLCBMaW5rZWRNZXNoLCBQYXRoLCBQb2ludCwgQ2xpcHBpbmcgfVxuXG5mdW5jdGlvbiByZWFkVGltZWxpbmUxIChpbnB1dDogQmluYXJ5SW5wdXQsIHRpbWVsaW5lOiBDdXJ2ZVRpbWVsaW5lMSwgc2NhbGU6IG51bWJlcik6IEN1cnZlVGltZWxpbmUxIHtcblx0bGV0IHRpbWUgPSBpbnB1dC5yZWFkRmxvYXQoKSwgdmFsdWUgPSBpbnB1dC5yZWFkRmxvYXQoKSAqIHNjYWxlO1xuXHRmb3IgKGxldCBmcmFtZSA9IDAsIGJlemllciA9IDAsIGZyYW1lTGFzdCA9IHRpbWVsaW5lLmdldEZyYW1lQ291bnQoKSAtIDE7IDsgZnJhbWUrKykge1xuXHRcdHRpbWVsaW5lLnNldEZyYW1lKGZyYW1lLCB0aW1lLCB2YWx1ZSk7XG5cdFx0aWYgKGZyYW1lID09IGZyYW1lTGFzdCkgYnJlYWs7XG5cdFx0bGV0IHRpbWUyID0gaW5wdXQucmVhZEZsb2F0KCksIHZhbHVlMiA9IGlucHV0LnJlYWRGbG9hdCgpICogc2NhbGU7XG5cdFx0c3dpdGNoIChpbnB1dC5yZWFkQnl0ZSgpKSB7XG5cdFx0XHRjYXNlIENVUlZFX1NURVBQRUQ6XG5cdFx0XHRcdHRpbWVsaW5lLnNldFN0ZXBwZWQoZnJhbWUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgQ1VSVkVfQkVaSUVSOlxuXHRcdFx0XHRzZXRCZXppZXIoaW5wdXQsIHRpbWVsaW5lLCBiZXppZXIrKywgZnJhbWUsIDAsIHRpbWUsIHRpbWUyLCB2YWx1ZSwgdmFsdWUyLCBzY2FsZSk7XG5cdFx0fVxuXHRcdHRpbWUgPSB0aW1lMjtcblx0XHR2YWx1ZSA9IHZhbHVlMjtcblx0fVxuXHRyZXR1cm4gdGltZWxpbmU7XG59XG5cbmZ1bmN0aW9uIHJlYWRUaW1lbGluZTIgKGlucHV0OiBCaW5hcnlJbnB1dCwgdGltZWxpbmU6IEN1cnZlVGltZWxpbmUyLCBzY2FsZTogbnVtYmVyKTogQ3VydmVUaW1lbGluZTIge1xuXHRsZXQgdGltZSA9IGlucHV0LnJlYWRGbG9hdCgpLCB2YWx1ZTEgPSBpbnB1dC5yZWFkRmxvYXQoKSAqIHNjYWxlLCB2YWx1ZTIgPSBpbnB1dC5yZWFkRmxvYXQoKSAqIHNjYWxlO1xuXHRmb3IgKGxldCBmcmFtZSA9IDAsIGJlemllciA9IDAsIGZyYW1lTGFzdCA9IHRpbWVsaW5lLmdldEZyYW1lQ291bnQoKSAtIDE7IDsgZnJhbWUrKykge1xuXHRcdHRpbWVsaW5lLnNldEZyYW1lKGZyYW1lLCB0aW1lLCB2YWx1ZTEsIHZhbHVlMik7XG5cdFx0aWYgKGZyYW1lID09IGZyYW1lTGFzdCkgYnJlYWs7XG5cdFx0bGV0IHRpbWUyID0gaW5wdXQucmVhZEZsb2F0KCksIG52YWx1ZTEgPSBpbnB1dC5yZWFkRmxvYXQoKSAqIHNjYWxlLCBudmFsdWUyID0gaW5wdXQucmVhZEZsb2F0KCkgKiBzY2FsZTtcblx0XHRzd2l0Y2ggKGlucHV0LnJlYWRCeXRlKCkpIHtcblx0XHRcdGNhc2UgQ1VSVkVfU1RFUFBFRDpcblx0XHRcdFx0dGltZWxpbmUuc2V0U3RlcHBlZChmcmFtZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBDVVJWRV9CRVpJRVI6XG5cdFx0XHRcdHNldEJlemllcihpbnB1dCwgdGltZWxpbmUsIGJlemllcisrLCBmcmFtZSwgMCwgdGltZSwgdGltZTIsIHZhbHVlMSwgbnZhbHVlMSwgc2NhbGUpO1xuXHRcdFx0XHRzZXRCZXppZXIoaW5wdXQsIHRpbWVsaW5lLCBiZXppZXIrKywgZnJhbWUsIDEsIHRpbWUsIHRpbWUyLCB2YWx1ZTIsIG52YWx1ZTIsIHNjYWxlKTtcblx0XHR9XG5cdFx0dGltZSA9IHRpbWUyO1xuXHRcdHZhbHVlMSA9IG52YWx1ZTE7XG5cdFx0dmFsdWUyID0gbnZhbHVlMjtcblx0fVxuXHRyZXR1cm4gdGltZWxpbmU7XG59XG5cbmZ1bmN0aW9uIHNldEJlemllciAoaW5wdXQ6IEJpbmFyeUlucHV0LCB0aW1lbGluZTogQ3VydmVUaW1lbGluZSwgYmV6aWVyOiBudW1iZXIsIGZyYW1lOiBudW1iZXIsIHZhbHVlOiBudW1iZXIsXG5cdHRpbWUxOiBudW1iZXIsIHRpbWUyOiBudW1iZXIsIHZhbHVlMTogbnVtYmVyLCB2YWx1ZTI6IG51bWJlciwgc2NhbGU6IG51bWJlcikge1xuXHR0aW1lbGluZS5zZXRCZXppZXIoYmV6aWVyLCBmcmFtZSwgdmFsdWUsIHRpbWUxLCB2YWx1ZTEsIGlucHV0LnJlYWRGbG9hdCgpLCBpbnB1dC5yZWFkRmxvYXQoKSAqIHNjYWxlLCBpbnB1dC5yZWFkRmxvYXQoKSwgaW5wdXQucmVhZEZsb2F0KCkgKiBzY2FsZSwgdGltZTIsIHZhbHVlMik7XG59XG5cbmNvbnN0IEJPTkVfUk9UQVRFID0gMDtcbmNvbnN0IEJPTkVfVFJBTlNMQVRFID0gMTtcbmNvbnN0IEJPTkVfVFJBTlNMQVRFWCA9IDI7XG5jb25zdCBCT05FX1RSQU5TTEFURVkgPSAzO1xuY29uc3QgQk9ORV9TQ0FMRSA9IDQ7XG5jb25zdCBCT05FX1NDQUxFWCA9IDU7XG5jb25zdCBCT05FX1NDQUxFWSA9IDY7XG5jb25zdCBCT05FX1NIRUFSID0gNztcbmNvbnN0IEJPTkVfU0hFQVJYID0gODtcbmNvbnN0IEJPTkVfU0hFQVJZID0gOTtcbmNvbnN0IEJPTkVfSU5IRVJJVCA9IDEwO1xuXG5jb25zdCBTTE9UX0FUVEFDSE1FTlQgPSAwO1xuY29uc3QgU0xPVF9SR0JBID0gMTtcbmNvbnN0IFNMT1RfUkdCID0gMjtcbmNvbnN0IFNMT1RfUkdCQTIgPSAzO1xuY29uc3QgU0xPVF9SR0IyID0gNDtcbmNvbnN0IFNMT1RfQUxQSEEgPSA1O1xuXG5jb25zdCBBVFRBQ0hNRU5UX0RFRk9STSA9IDA7XG5jb25zdCBBVFRBQ0hNRU5UX1NFUVVFTkNFID0gMTtcblxuY29uc3QgUEFUSF9QT1NJVElPTiA9IDA7XG5jb25zdCBQQVRIX1NQQUNJTkcgPSAxO1xuY29uc3QgUEFUSF9NSVggPSAyO1xuXG5jb25zdCBQSFlTSUNTX0lORVJUSUEgPSAwO1xuY29uc3QgUEhZU0lDU19TVFJFTkdUSCA9IDE7XG5jb25zdCBQSFlTSUNTX0RBTVBJTkcgPSAyO1xuY29uc3QgUEhZU0lDU19NQVNTID0gNDtcbmNvbnN0IFBIWVNJQ1NfV0lORCA9IDU7XG5jb25zdCBQSFlTSUNTX0dSQVZJVFkgPSA2O1xuY29uc3QgUEhZU0lDU19NSVggPSA3O1xuY29uc3QgUEhZU0lDU19SRVNFVCA9IDg7XG5cbmNvbnN0IENVUlZFX0xJTkVBUiA9IDA7XG5jb25zdCBDVVJWRV9TVEVQUEVEID0gMTtcbmNvbnN0IENVUlZFX0JFWklFUiA9IDI7XG4iXX0=", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { BoundingBoxAttachment } from \"./attachments/BoundingBoxAttachment.js\";\nimport { Pool, Utils } from \"./Utils.js\";\n/** Collects each visible {@link BoundingBoxAttachment} and computes the world vertices for its polygon. The polygon vertices are\n * provided along with convenience methods for doing hit detection. */\nexport class SkeletonBounds {\n    /** The left edge of the axis aligned bounding box. */\n    minX = 0;\n    /** The bottom edge of the axis aligned bounding box. */\n    minY = 0;\n    /** The right edge of the axis aligned bounding box. */\n    maxX = 0;\n    /** The top edge of the axis aligned bounding box. */\n    maxY = 0;\n    /** The visible bounding boxes. */\n    boundingBoxes = new Array();\n    /** The world vertices for the bounding box polygons. */\n    polygons = new Array();\n    polygonPool = new Pool(() => {\n        return Utils.newFloatArray(16);\n    });\n    /** Clears any previous polygons, finds all visible bounding box attachments, and computes the world vertices for each bounding\n     * box's polygon.\n     * @param updateAabb If true, the axis aligned bounding box containing all the polygons is computed. If false, the\n     *           SkeletonBounds AABB methods will always return true. */\n    update(skeleton, updateAabb) {\n        if (!skeleton)\n            throw new Error(\"skeleton cannot be null.\");\n        let boundingBoxes = this.boundingBoxes;\n        let polygons = this.polygons;\n        let polygonPool = this.polygonPool;\n        let slots = skeleton.slots;\n        let slotCount = slots.length;\n        boundingBoxes.length = 0;\n        polygonPool.freeAll(polygons);\n        polygons.length = 0;\n        for (let i = 0; i < slotCount; i++) {\n            let slot = slots[i];\n            if (!slot.bone.active)\n                continue;\n            let attachment = slot.getAttachment();\n            if (attachment instanceof BoundingBoxAttachment) {\n                let boundingBox = attachment;\n                boundingBoxes.push(boundingBox);\n                let polygon = polygonPool.obtain();\n                if (polygon.length != boundingBox.worldVerticesLength) {\n                    polygon = Utils.newFloatArray(boundingBox.worldVerticesLength);\n                }\n                polygons.push(polygon);\n                boundingBox.computeWorldVertices(slot, 0, boundingBox.worldVerticesLength, polygon, 0, 2);\n            }\n        }\n        if (updateAabb) {\n            this.aabbCompute();\n        }\n        else {\n            this.minX = Number.POSITIVE_INFINITY;\n            this.minY = Number.POSITIVE_INFINITY;\n            this.maxX = Number.NEGATIVE_INFINITY;\n            this.maxY = Number.NEGATIVE_INFINITY;\n        }\n    }\n    aabbCompute() {\n        let minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\n        let polygons = this.polygons;\n        for (let i = 0, n = polygons.length; i < n; i++) {\n            let polygon = polygons[i];\n            let vertices = polygon;\n            for (let ii = 0, nn = polygon.length; ii < nn; ii += 2) {\n                let x = vertices[ii];\n                let y = vertices[ii + 1];\n                minX = Math.min(minX, x);\n                minY = Math.min(minY, y);\n                maxX = Math.max(maxX, x);\n                maxY = Math.max(maxY, y);\n            }\n        }\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n    /** Returns true if the axis aligned bounding box contains the point. */\n    aabbContainsPoint(x, y) {\n        return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\n    }\n    /** Returns true if the axis aligned bounding box intersects the line segment. */\n    aabbIntersectsSegment(x1, y1, x2, y2) {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n        if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\n            return false;\n        let m = (y2 - y1) / (x2 - x1);\n        let y = m * (minX - x1) + y1;\n        if (y > minY && y < maxY)\n            return true;\n        y = m * (maxX - x1) + y1;\n        if (y > minY && y < maxY)\n            return true;\n        let x = (minY - y1) / m + x1;\n        if (x > minX && x < maxX)\n            return true;\n        x = (maxY - y1) / m + x1;\n        if (x > minX && x < maxX)\n            return true;\n        return false;\n    }\n    /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\n    aabbIntersectsSkeleton(bounds) {\n        return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\n    }\n    /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\n     * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\n    containsPoint(x, y) {\n        let polygons = this.polygons;\n        for (let i = 0, n = polygons.length; i < n; i++)\n            if (this.containsPointPolygon(polygons[i], x, y))\n                return this.boundingBoxes[i];\n        return null;\n    }\n    /** Returns true if the polygon contains the point. */\n    containsPointPolygon(polygon, x, y) {\n        let vertices = polygon;\n        let nn = polygon.length;\n        let prevIndex = nn - 2;\n        let inside = false;\n        for (let ii = 0; ii < nn; ii += 2) {\n            let vertexY = vertices[ii + 1];\n            let prevY = vertices[prevIndex + 1];\n            if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y)) {\n                let vertexX = vertices[ii];\n                if (vertexX + (y - vertexY) / (prevY - vertexY) * (vertices[prevIndex] - vertexX) < x)\n                    inside = !inside;\n            }\n            prevIndex = ii;\n        }\n        return inside;\n    }\n    /** Returns the first bounding box attachment that contains any part of the line segment, or null. When doing many checks, it\n     * is usually more efficient to only call this method if {@link #aabbIntersectsSegment()} returns\n     * true. */\n    intersectsSegment(x1, y1, x2, y2) {\n        let polygons = this.polygons;\n        for (let i = 0, n = polygons.length; i < n; i++)\n            if (this.intersectsSegmentPolygon(polygons[i], x1, y1, x2, y2))\n                return this.boundingBoxes[i];\n        return null;\n    }\n    /** Returns true if the polygon contains any part of the line segment. */\n    intersectsSegmentPolygon(polygon, x1, y1, x2, y2) {\n        let vertices = polygon;\n        let nn = polygon.length;\n        let width12 = x1 - x2, height12 = y1 - y2;\n        let det1 = x1 * y2 - y1 * x2;\n        let x3 = vertices[nn - 2], y3 = vertices[nn - 1];\n        for (let ii = 0; ii < nn; ii += 2) {\n            let x4 = vertices[ii], y4 = vertices[ii + 1];\n            let det2 = x3 * y4 - y3 * x4;\n            let width34 = x3 - x4, height34 = y3 - y4;\n            let det3 = width12 * height34 - height12 * width34;\n            let x = (det1 * width34 - width12 * det2) / det3;\n            if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1))) {\n                let y = (det1 * height34 - height12 * det2) / det3;\n                if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1)))\n                    return true;\n            }\n            x3 = x4;\n            y3 = y4;\n        }\n        return false;\n    }\n    /** Returns the polygon for the specified bounding box, or null. */\n    getPolygon(boundingBox) {\n        if (!boundingBox)\n            throw new Error(\"boundingBox cannot be null.\");\n        let index = this.boundingBoxes.indexOf(boundingBox);\n        return index == -1 ? null : this.polygons[index];\n    }\n    /** The width of the axis aligned bounding box. */\n    getWidth() {\n        return this.maxX - this.minX;\n    }\n    /** The height of the axis aligned bounding box. */\n    getHeight() {\n        return this.maxY - this.minY;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2tlbGV0b25Cb3VuZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvU2tlbGV0b25Cb3VuZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrRUEyQitFO0FBRS9FLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBRS9FLE9BQU8sRUFBbUIsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLFlBQVksQ0FBQztBQUUxRDtzRUFDc0U7QUFDdEUsTUFBTSxPQUFPLGNBQWM7SUFFMUIsc0RBQXNEO0lBQ3RELElBQUksR0FBRyxDQUFDLENBQUM7SUFFVCx3REFBd0Q7SUFDeEQsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUVULHVEQUF1RDtJQUN2RCxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBRVQscURBQXFEO0lBQ3JELElBQUksR0FBRyxDQUFDLENBQUM7SUFFVCxrQ0FBa0M7SUFDbEMsYUFBYSxHQUFHLElBQUksS0FBSyxFQUF5QixDQUFDO0lBRW5ELHdEQUF3RDtJQUN4RCxRQUFRLEdBQUcsSUFBSSxLQUFLLEVBQW1CLENBQUM7SUFFaEMsV0FBVyxHQUFHLElBQUksSUFBSSxDQUFrQixHQUFHLEVBQUU7UUFDcEQsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBRUg7Ozt3RUFHb0U7SUFDcEUsTUFBTSxDQUFFLFFBQWtCLEVBQUUsVUFBbUI7UUFDOUMsSUFBSSxDQUFDLFFBQVE7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDM0QsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUN2QyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzdCLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDbkMsSUFBSSxLQUFLLEdB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Q0FBQyxHQUFHLElBQUksQ0FBQztnQkFDbkQsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO29CQUFFLE9BQU8sSUFBSSxDQUFDO1lBQ25ILENBQUM7WUFDRCxFQUFFLEdBQUcsRUFBRSxDQUFDO1lBQ1IsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNULENBQUM7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxtRUFBbUU7SUFDbkUsVUFBVSxDQUFFLFdBQWtDO1FBQzdDLElBQUksQ0FBQyxXQUFXO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQ2pFLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELGtEQUFrRDtJQUNsRCxRQUFRO1FBQ1AsT0FBTyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDOUIsQ0FBQztJQUVELG1EQUFtRDtJQUNuRCxTQUFTO1FBQ1IsT0FBTyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDOUIsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogU3BpbmUgUnVudGltZXMgTGljZW5zZSBBZ3JlZW1lbnRcbiAqIExhc3QgdXBkYXRlZCBKdWx5IDI4LCAyMDIzLiBSZXBsYWNlcyBhbGwgcHJpb3IgdmVyc2lvbnMuXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLTIwMjMsIEVzb3RlcmljIFNvZnR3YXJlIExMQ1xuICpcbiAqIEludGVncmF0aW9uIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpbnRvIHNvZnR3YXJlIG9yIG90aGVyd2lzZSBjcmVhdGluZ1xuICogZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgaXMgcGVybWl0dGVkIHVuZGVyIHRoZSB0ZXJtcyBhbmRcbiAqIGNvbmRpdGlvbnMgb2YgU2VjdGlvbiAyIG9mIHRoZSBTcGluZSBFZGl0b3IgTGljZW5zZSBBZ3JlZW1lbnQ6XG4gKiBodHRwOi8vZXNvdGVyaWNzb2Z0d2FyZS5jb20vc3BpbmUtZWRpdG9yLWxpY2Vuc2VcbiAqXG4gKiBPdGhlcndpc2UsIGl0IGlzIHBlcm1pdHRlZCB0byBpbnRlZ3JhdGUgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3JcbiAqIG90aGVyd2lzZSBjcmVhdGUgZGVyaXZhdGl2ZSB3b3JrcyBvZiB0aGUgU3BpbmUgUnVudGltZXMgKGNvbGxlY3RpdmVseSxcbiAqIFwiUHJvZHVjdHNcIiksIHByb3ZpZGVkIHRoYXQgZWFjaCB1c2VyIG9mIHRoZSBQcm9kdWN0cyBtdXN0IG9idGFpbiB0aGVpciBvd25cbiAqIFNwaW5lIEVkaXRvciBsaWNlbnNlIGFuZCByZWRpc3RyaWJ1dGlvbiBvZiB0aGUgUHJvZHVjdHMgaW4gYW55IGZvcm0gbXVzdFxuICogaW5jbHVkZSB0aGlzIGxpY2Vuc2UgYW5kIGNvcHlyaWdodCBub3RpY2UuXG4gKlxuICogVEhFIFNQSU5FIFJVTlRJTUVTIEFSRSBQUk9WSURFRCBCWSBFU09URVJJQyBTT0ZUV0FSRSBMTEMgXCJBUyBJU1wiIEFORCBBTllcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEVTT1RFUklDIFNPRlRXQVJFIExMQyBCRSBMSUFCTEUgRk9SIEFOWVxuICogRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbiAqIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUyxcbiAqIEJVU0lORVNTIElOVEVSUlVQVElPTiwgT1IgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFMpIEhPV0VWRVIgQ0FVU0VEIEFORFxuICogT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSEVcbiAqIFNQSU5FIFJVTlRJTUVTLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgeyBCb3VuZGluZ0JveEF0dGFjaG1lbnQgfSBmcm9tIFwiLi9hdHRhY2htZW50cy9Cb3VuZGluZ0JveEF0dGFjaG1lbnQuanNcIjtcbmltcG9ydCB7IFNrZWxldG9uIH0gZnJvbSBcIi4vU2tlbGV0b24uanNcIjtcbmltcG9ydCB7IE51bWJlckFycmF5TGlrZSwgUG9vbCwgVXRpbHMgfSBmcm9tIFwiLi9VdGlscy5qc1wiO1xuXG4vKiogQ29sbGVjdHMgZWFjaCB2aXNpYmxlIHtAbGluayBCb3VuZGluZ0JveEF0dGFjaG1lbnR9IGFuZCBjb21wdXRlcyB0aGUgd29ybGQgdmVydGljZXMgZm9yIGl0cyBwb2x5Z29uLiBUaGUgcG9seWdvbiB2ZXJ0aWNlcyBhcmVcbiAqIHByb3ZpZGVkIGFsb25nIHdpdGggY29udmVuaWVuY2UgbWV0aG9kcyBmb3IgZG9pbmcgaGl0IGRldGVjdGlvbi4gKi9cbmV4cG9ydCBjbGFzcyBTa2VsZXRvbkJvdW5kcyB7XG5cblx0LyoqIFRoZSBsZWZ0IGVkZ2Ugb2YgdGhlIGF4aXMgYWxpZ25lZCBib3VuZGluZyBib3guICovXG5cdG1pblggPSAwO1xuXG5cdC8qKiBUaGUgYm90dG9tIGVkZ2Ugb2YgdGhlIGF4aXMgYWxpZ25lZCBib3VuZGluZyBib3guICovXG5cdG1pblkgPSAwO1xuXG5cdC8qKiBUaGUgcmlnaHQgZWRnZSBvZiB0aGUgYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveC4gKi9cblx0bWF4WCA9IDA7XG5cblx0LyoqIFRoZSB0b3AgZWRnZSBvZiB0aGUgYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveC4gKi9cblx0bWF4WSA9IDA7XG5cblx0LyoqIFRoZSB2aXNpYmxlIGJvdW5kaW5nIGJveGVzLiAqL1xuXHRib3VuZGluZ0JveGVzID0gbmV3IEFycmF5PEJvdW5kaW5nQm94QXR0YWNobWVudD4oKTtcblxuXHQvKiogVGhlIHdvcmxkIHZlcnRpY2VzIGZvciB0aGUgYm91bmRpbmcgYm94IHBvbHlnb25zLiAqL1xuXHRwb2x5Z29ucyA9IG5ldyBBcnJheTxOdW1iZXJBcnJheUxpa2U+KCk7XG5cblx0cHJpdmF0ZSBwb2x5Z29uUG9vbCA9IG5ldyBQb29sPE51bWJlckFycmF5TGlrZT4oKCkgPT4ge1xuXHRcdHJldHVybiBVdGlscy5uZXdGbG9hdEFycmF5KDE2KTtcblx0fSk7XG5cblx0LyoqIENsZWFycyBhbnkgcHJldmlvdXMgcG9seWdvbnMsIGZpbmRzIGFsbCB2aXNpYmxlIGJvdW5kaW5nIGJveCBhdHRhY2htZW50cywgYW5kIGNvbXB1dGVzIHRoZSB3b3JsZCB2ZXJ0aWNlcyBmb3IgZWFjaCBib3VuZGluZ1xuXHQgKiBib3gncyBwb2x5Z29uLlxuXHQgKiBAcGFyYW0gdXBkYXRlQWFiYiBJZiB0cnVlLCB0aGUgYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveCBjb250YWluaW5nIGFsbCB0aGUgcG9seWdvbnMgaXMgY29tcHV0ZWQuIElmIGZhbHNlLCB0aGVcblx0ICogICAgICAgICAgIFNrZWxldG9uQm91bmRzIEFBQkIgbWV0aG9kcyB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS4gKi9cblx0dXBkYXRlIChza2VsZXRvbjogU2tlbGV0b24sIHVwZGF0ZUFhYmI6IGJvb2xlYW4pIHtcblx0XHRpZiAoIXNrZWxldG9uKSB0aHJvdyBuZXcgRXJyb3IoXCJza2VsZXRvbiBjYW5ub3QgYmUgbnVsbC5cIik7XG5cdFx0bGV0IGJvdW5kaW5nQm94ZXMgPSB0aGlzLmJvdW5kaW5nQm94ZXM7XG5cdFx0bGV0IHBvbHlnb25zID0gdGhpcy5wb2x5Z29ucztcblx0XHRsZXQgcG9seWdvblBvb2wgPSB0aGlzLnBvbHlnb25Qb29sO1xuXHRcdGxldCBzbG90cyA9IHNrZWxldG9uLnNsb3RzO1xuXHRcdGxldCBzbG90Q291bnQgPSBzbG90cy5sZW5ndGg7XG5cblx0XHRib3VuZGluZ0JveGVzLmxlbmd0aCA9IDA7XG5cdFx0cG9seWdvblBvb2wuZnJlZUFsbChwb2x5Z29ucyk7XG5cdFx0cG9seWdvbnMubGVuZ3RoID0gMDtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgc2xvdENvdW50OyBpKyspIHtcblx0XHRcdGxldCBzbG90ID0gc2xvdHNbaV07XG5cdFx0XHRpZiAoIXNsb3QuYm9uZS5hY3RpdmUpIGNvbnRpbnVlO1xuXHRcdFx0bGV0IGF0dGFjaG1lbnQgPSBzbG90LmdldEF0dGFjaG1lbnQoKTtcblx0XHRcdGlmIChhdHRhY2htZW50IGluc3RhbmNlb2YgQm91bmRpbmdCb3hBdHRhY2htZW50KSB7XG5cdFx0XHRcdGxldCBib3VuZGluZ0JveCA9IGF0dGFjaG1lbnQgYXMgQm91bmRpbmdCb3hBdHRhY2htZW50O1xuXHRcdFx0XHRib3VuZGluZ0JveGVzLnB1c2goYm91bmRpbmdCb3gpO1xuXG5cdFx0XHRcdGxldCBwb2x5Z29uID0gcG9seWdvblBvb2wub2J0YWluKCk7XG5cdFx0XHRcdGlmIChwb2x5Z29uLmxlbmd0aCAhPSBib3VuZGluZ0JveC53b3JsZFZlcnRpY2VzTGVuZ3RoKSB7XG5cdFx0XHRcdFx0cG9seWdvbiA9IFV0aWxzLm5ld0Zsb2F0QXJyYXkoYm91bmRpbmdCb3gud29ybGRWZXJ0aWNlc0xlbmd0aCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cG9seWdvbnMucHVzaChwb2x5Z29uKTtcblx0XHRcdFx0Ym91bmRpbmdCb3guY29tcHV0ZVdvcmxkVmVydGljZXMoc2xvdCwgMCwgYm91bmRpbmdCb3gud29ybGRWZXJ0aWNlc0xlbmd0aCwgcG9seWdvbiwgMCwgMik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHVwZGF0ZUFhYmIpIHtcblx0XHRcdHRoaXMuYWFiYkNvbXB1dGUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5taW5YID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXHRcdFx0dGhpcy5taW5ZID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXHRcdFx0dGhpcy5tYXhYID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuXHRcdFx0dGhpcy5tYXhZID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuXHRcdH1cblx0fVxuXG5cdGFhYmJDb21wdXRlICgpIHtcblx0XHRsZXQgbWluWCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgbWluWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgbWF4WCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSwgbWF4WSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcblx0XHRsZXQgcG9seWdvbnMgPSB0aGlzLnBvbHlnb25zO1xuXHRcdGZvciAobGV0IGkgPSAwLCBuID0gcG9seWdvbnMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRsZXQgcG9seWdvbiA9IHBvbHlnb25zW2ldO1xuXHRcdFx0bGV0IHZlcnRpY2VzID0gcG9seWdvbjtcblx0XHRcdGZvciAobGV0IGlpID0gMCwgbm4gPSBwb2x5Z29uLmxlbmd0aDsgaWkgPCBubjsgaWkgKz0gMikge1xuXHRcdFx0XHRsZXQgeCA9IHZlcnRpY2VzW2lpXTtcblx0XHRcdFx0bGV0IHkgPSB2ZXJ0aWNlc1tpaSArIDFdO1xuXHRcdFx0XHRtaW5YID0gTWF0aC5taW4obWluWCwgeCk7XG5cdFx0XHRcdG1pblkgPSBNYXRoLm1pbihtaW5ZLCB5KTtcblx0XHRcdFx0bWF4WCA9IE1hdGgubWF4KG1heFgsIHgpO1xuXHRcdFx0XHRtYXhZID0gTWF0aC5tYXgobWF4WSwgeSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMubWluWCA9IG1pblg7XG5cdFx0dGhpcy5taW5ZID0gbWluWTtcblx0XHR0aGlzLm1heFggPSBtYXhYO1xuXHRcdHRoaXMubWF4WSA9IG1heFk7XG5cdH1cblxuXHQvKiogUmV0dXJucyB0cnVlIGlmIHRoZSBheGlzIGFsaWduZWQgYm91bmRpbmcgYm94IGNvbnRhaW5zIHRoZSBwb2ludC4gKi9cblx0YWFiYkNvbnRhaW5zUG9pbnQgKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG5cdFx0cmV0dXJuIHggPj0gdGhpcy5taW5YICYmIHggPD0gdGhpcy5tYXhYICYmIHkgPj0gdGhpcy5taW5ZICYmIHkgPD0gdGhpcy5tYXhZO1xuXHR9XG5cblx0LyoqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveCBpbnRlcnNlY3RzIHRoZSBsaW5lIHNlZ21lbnQuICovXG5cdGFhYmJJbnRlcnNlY3RzU2VnbWVudCAoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcikge1xuXHRcdGxldCBtaW5YID0gdGhpcy5taW5YO1xuXHRcdGxldCBtaW5ZID0gdGhpcy5taW5ZO1xuXHRcdGxldCBtYXhYID0gdGhpcy5tYXhYO1xuXHRcdGxldCBtYXhZID0gdGhpcy5tYXhZO1xuXHRcdGlmICgoeDEgPD0gbWluWCAmJiB4MiA8PSBtaW5YKSB8fCAoeTEgPD0gbWluWSAmJiB5MiA8PSBtaW5ZKSB8fCAoeDEgPj0gbWF4WCAmJiB4MiA+PSBtYXhYKSB8fCAoeTEgPj0gbWF4WSAmJiB5MiA+PSBtYXhZKSlcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRsZXQgbSA9ICh5MiAtIHkxKSAvICh4MiAtIHgxKTtcblx0XHRsZXQgeSA9IG0gKiAobWluWCAtIHgxKSArIHkxO1xuXHRcdGlmICh5ID4gbWluWSAmJiB5IDwgbWF4WSkgcmV0dXJuIHRydWU7XG5cdFx0eSA9IG0gKiAobWF4WCAtIHgxKSArIHkxO1xuXHRcdGlmICh5ID4gbWluWSAmJiB5IDwgbWF4WSkgcmV0dXJuIHRydWU7XG5cdFx0bGV0IHggPSAobWluWSAtIHkxKSAvIG0gKyB4MTtcblx0XHRpZiAoeCA+IG1pblggJiYgeCA8IG1heFgpIHJldHVybiB0cnVlO1xuXHRcdHggPSAobWF4WSAtIHkxKSAvIG0gKyB4MTtcblx0XHRpZiAoeCA+IG1pblggJiYgeCA8IG1heFgpIHJldHVybiB0cnVlO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKiBSZXR1cm5zIHRydWUgaWYgdGhlIGF4aXMgYWxpZ25lZCBib3VuZGluZyBib3ggaW50ZXJzZWN0cyB0aGUgYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveCBvZiB0aGUgc3BlY2lmaWVkIGJvdW5kcy4gKi9cblx0YWFiYkludGVyc2VjdHNTa2VsZXRvbiAoYm91bmRzOiBTa2VsZXRvbkJvdW5kcykge1xuXHRcdHJldHVybiB0aGlzLm1pblggPCBib3VuZHMubWF4WCAmJiB0aGlzLm1heFggPiBib3VuZHMubWluWCAmJiB0aGlzLm1pblkgPCBib3VuZHMubWF4WSAmJiB0aGlzLm1heFkgPiBib3VuZHMubWluWTtcblx0fVxuXG5cdC8qKiBSZXR1cm5zIHRoZSBmaXJzdCBib3VuZGluZyBib3ggYXR0YWNobWVudCB0aGF0IGNvbnRhaW5zIHRoZSBwb2ludCwgb3IgbnVsbC4gV2hlbiBkb2luZyBtYW55IGNoZWNrcywgaXQgaXMgdXN1YWxseSBtb3JlXG5cdCAqIGVmZmljaWVudCB0byBvbmx5IGNhbGwgdGhpcyBtZXRob2QgaWYge0BsaW5rICNhYWJiQ29udGFpbnNQb2ludChmbG9hdCwgZmxvYXQpfSByZXR1cm5zIHRydWUuICovXG5cdGNvbnRhaW5zUG9pbnQgKHg6IG51bWJlciwgeTogbnVtYmVyKTogQm91bmRpbmdCb3hBdHRhY2htZW50IHwgbnVsbCB7XG5cdFx0bGV0IHBvbHlnb25zID0gdGhpcy5wb2x5Z29ucztcblx0XHRmb3IgKGxldCBpID0gMCwgbiA9IHBvbHlnb25zLmxlbmd0aDsgaSA8IG47IGkrKylcblx0XHRcdGlmICh0aGlzLmNvbnRhaW5zUG9pbnRQb2x5Z29uKHBvbHlnb25zW2ldLCB4LCB5KSkgcmV0dXJuIHRoaXMuYm91bmRpbmdCb3hlc1tpXTtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8qKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBvbHlnb24gY29udGFpbnMgdGhlIHBvaW50LiAqL1xuXHRjb250YWluc1BvaW50UG9seWdvbiAocG9seWdvbjogTnVtYmVyQXJyYXlMaWtlLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuXHRcdGxldCB2ZXJ0aWNlcyA9IHBvbHlnb247XG5cdFx0bGV0IG5uID0gcG9seWdvbi5sZW5ndGg7XG5cblx0XHRsZXQgcHJldkluZGV4ID0gbm4gLSAyO1xuXHRcdGxldCBpbnNpZGUgPSBmYWxzZTtcblx0XHRmb3IgKGxldCBpaSA9IDA7IGlpIDwgbm47IGlpICs9IDIpIHtcblx0XHRcdGxldCB2ZXJ0ZXhZID0gdmVydGljZXNbaWkgKyAxXTtcblx0XHRcdGxldCBwcmV2WSA9IHZlcnRpY2VzW3ByZXZJbmRleCArIDFdO1xuXHRcdFx0aWYgKCh2ZXJ0ZXhZIDwgeSAmJiBwcmV2WSA+PSB5KSB8fCAocHJldlkgPCB5ICYmIHZlcnRleFkgPj0geSkpIHtcblx0XHRcdFx0bGV0IHZlcnRleFggPSB2ZXJ0aWNlc1tpaV07XG5cdFx0XHRcdGlmICh2ZXJ0ZXhYICsgKHkgLSB2ZXJ0ZXhZKSAvIChwcmV2WSAtIHZlcnRleFkpICogKHZlcnRpY2VzW3ByZXZJbmRleF0gLSB2ZXJ0ZXhYKSA8IHgpIGluc2lkZSA9ICFpbnNpZGU7XG5cdFx0XHR9XG5cdFx0XHRwcmV2SW5kZXggPSBpaTtcblx0XHR9XG5cdFx0cmV0dXJuIGluc2lkZTtcblx0fVxuXG5cdC8qKiBSZXR1cm5zIHRoZSBmaXJzdCBib3VuZGluZyBib3ggYXR0YWNobWVudCB0aGF0IGNvbnRhaW5zIGFueSBwYXJ0IG9mIHRoZSBsaW5lIHNlZ21lbnQsIG9yIG51bGwuIFdoZW4gZG9pbmcgbWFueSBjaGVja3MsIGl0XG5cdCAqIGlzIHVzdWFsbHkgbW9yZSBlZmZpY2llbnQgdG8gb25seSBjYWxsIHRoaXMgbWV0aG9kIGlmIHtAbGluayAjYWFiYkludGVyc2VjdHNTZWdtZW50KCl9IHJldHVybnNcblx0ICogdHJ1ZS4gKi9cblx0aW50ZXJzZWN0c1NlZ21lbnQgKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpIHtcblx0XHRsZXQgcG9seWdvbnMgPSB0aGlzLnBvbHlnb25zO1xuXHRcdGZvciAobGV0IGkgPSAwLCBuID0gcG9seWdvbnMubGVuZ3RoOyBpIDwgbjsgaSsrKVxuXHRcdFx0aWYgKHRoaXMuaW50ZXJzZWN0c1NlZ21lbnRQb2x5Z29uKHBvbHlnb25zW2ldLCB4MSwgeTEsIHgyLCB5MikpIHJldHVybiB0aGlzLmJvdW5kaW5nQm94ZXNbaV07XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvKiogUmV0dXJucyB0cnVlIGlmIHRoZSBwb2x5Z29uIGNvbnRhaW5zIGFueSBwYXJ0IG9mIHRoZSBsaW5lIHNlZ21lbnQuICovXG5cdGludGVyc2VjdHNTZWdtZW50UG9seWdvbiAocG9seWdvbjogTnVtYmVyQXJyYXlMaWtlLCB4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKSB7XG5cdFx0bGV0IHZlcnRpY2VzID0gcG9seWdvbjtcblx0XHRsZXQgbm4gPSBwb2x5Z29uLmxlbmd0aDtcblxuXHRcdGxldCB3aWR0aDEyID0geDEgLSB4MiwgaGVpZ2h0MTIgPSB5MSAtIHkyO1xuXHRcdGxldCBkZXQxID0geDEgKiB5MiAtIHkxICogeDI7XG5cdFx0bGV0IHgzID0gdmVydGljZXNbbm4gLSAyXSwgeTMgPSB2ZXJ0aWNlc1tubiAtIDFdO1xuXHRcdGZvciAobGV0IGlpID0gMDsgaWkgPCBubjsgaWkgKz0gMikge1xuXHRcdFx0bGV0IHg0ID0gdmVydGljZXNbaWldLCB5NCA9IHZlcnRpY2VzW2lpICsgMV07XG5cdFx0XHRsZXQgZGV0MiA9IHgzICogeTQgLSB5MyAqIHg0O1xuXHRcdFx0bGV0IHdpZHRoMzQgPSB4MyAtIHg0LCBoZWlnaHQzNCA9IHkzIC0geTQ7XG5cdFx0XHRsZXQgZGV0MyA9IHdpZHRoMTIgKiBoZWlnaHQzNCAtIGhlaWdodDEyICogd2lkdGgzNDtcblx0XHRcdGxldCB4ID0gKGRldDEgKiB3aWR0aDM0IC0gd2lkdGgxMiAqIGRldDIpIC8gZGV0Mztcblx0XHRcdGlmICgoKHggPj0geDMgJiYgeCA8PSB4NCkgfHwgKHggPj0geDQgJiYgeCA8PSB4MykpICYmICgoeCA+PSB4MSAmJiB4IDw9IHgyKSB8fCAoeCA+PSB4MiAmJiB4IDw9IHgxKSkpIHtcblx0XHRcdFx0bGV0IHkgPSAoZGV0MSAqIGhlaWdodDM0IC0gaGVpZ2h0MTIgKiBkZXQyKSAvIGRldDM7XG5cdFx0XHRcdGlmICgoKHkgPj0geTMgJiYgeSA8PSB5NCkgfHwgKHkgPj0geTQgJiYgeSA8PSB5MykpICYmICgoeSA+PSB5MSAmJiB5IDw9IHkyKSB8fCAoeSA+PSB5MiAmJiB5IDw9IHkxKSkpIHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0eDMgPSB4NDtcblx0XHRcdHkzID0geTQ7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKiBSZXR1cm5zIHRoZSBwb2x5Z29uIGZvciB0aGUgc3BlY2lmaWVkIGJvdW5kaW5nIGJveCwgb3IgbnVsbC4gKi9cblx0Z2V0UG9seWdvbiAoYm91bmRpbmdCb3g6IEJvdW5kaW5nQm94QXR0YWNobWVudCkge1xuXHRcdGlmICghYm91bmRpbmdCb3gpIHRocm93IG5ldyBFcnJvcihcImJvdW5kaW5nQm94IGNhbm5vdCBiZSBudWxsLlwiKTtcblx0XHRsZXQgaW5kZXggPSB0aGlzLmJvdW5kaW5nQm94ZXMuaW5kZXhPZihib3VuZGluZ0JveCk7XG5cdFx0cmV0dXJuIGluZGV4ID09IC0xID8gbnVsbCA6IHRoaXMucG9seWdvbnNbaW5kZXhdO1xuXHR9XG5cblx0LyoqIFRoZSB3aWR0aCBvZiB0aGUgYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveC4gKi9cblx0Z2V0V2lkdGggKCkge1xuXHRcdHJldHVybiB0aGlzLm1heFggLSB0aGlzLm1pblg7XG5cdH1cblxuXHQvKiogVGhlIGhlaWdodCBvZiB0aGUgYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveC4gKi9cblx0Z2V0SGVpZ2h0ICgpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXhZIC0gdGhpcy5taW5ZO1xuXHR9XG59XG4iXX0=", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Pool } from \"./Utils.js\";\nexport class Triangulator {\n    convexPolygons = new Array();\n    convexPolygonsIndices = new Array();\n    indicesArray = new Array();\n    isConcaveArray = new Array();\n    triangles = new Array();\n    polygonPool = new Pool(() => {\n        return new Array();\n    });\n    polygonIndicesPool = new Pool(() => {\n        return new Array();\n    });\n    triangulate(verticesArray) {\n        let vertices = verticesArray;\n        let vertexCount = verticesArray.length >> 1;\n        let indices = this.indicesArray;\n        indices.length = 0;\n        for (let i = 0; i < vertexCount; i++)\n            indices[i] = i;\n        let isConcave = this.isConcaveArray;\n        isConcave.length = 0;\n        for (let i = 0, n = vertexCount; i < n; ++i)\n            isConcave[i] = Triangulator.isConcave(i, vertexCount, vertices, indices);\n        let triangles = this.triangles;\n        triangles.length = 0;\n        while (vertexCount > 3) {\n            // Find ear tip.\n            let previous = vertexCount - 1, i = 0, next = 1;\n            while (true) {\n                outer: if (!isConcave[i]) {\n                    let p1 = indices[previous] << 1, p2 = indices[i] << 1, p3 = indices[next] << 1;\n                    let p1x = vertices[p1], p1y = vertices[p1 + 1];\n                    let p2x = vertices[p2], p2y = vertices[p2 + 1];\n                    let p3x = vertices[p3], p3y = vertices[p3 + 1];\n                    for (let ii = (next + 1) % vertexCount; ii != previous; ii = (ii + 1) % vertexCount) {\n                        if (!isConcave[ii])\n                            continue;\n                        let v = indices[ii] << 1;\n                        let vx = vertices[v], vy = vertices[v + 1];\n                        if (Triangulator.positiveArea(p3x, p3y, p1x, p1y, vx, vy)) {\n                            if (Triangulator.positiveArea(p1x, p1y, p2x, p2y, vx, vy)) {\n                                if (Triangulator.positiveArea(p2x, p2y, p3x, p3y, vx, vy))\n                                    break outer;\n                            }\n                        }\n                    }\n                    break;\n                }\n                if (next == 0) {\n                    do {\n                        if (!isConcave[i])\n                            break;\n                        i--;\n                    } while (i > 0);\n                    break;\n                }\n                previous = i;\n                i = next;\n                next = (next + 1) % vertexCount;\n            }\n            // Cut ear tip.\n            triangles.push(indices[(vertexCount + i - 1) % vertexCount]);\n            triangles.push(indices[i]);\n            triangles.push(indices[(i + 1) % vertexCount]);\n            indices.splice(i, 1);\n            isConcave.splice(i, 1);\n            vertexCount--;\n            let previousIndex = (vertexCount + i - 1) % vertexCount;\n            let nextIndex = i == vertexCount ? 0 : i;\n            isConcave[previousIndex] = Triangulator.isConcave(previousIndex, vertexCount, vertices, indices);\n            isConcave[nextIndex] = Triangulator.isConcave(nextIndex, vertexCount, vertices, indices);\n        }\n        if (vertexCount == 3) {\n            triangles.push(indices[2]);\n            triangles.push(indices[0]);\n            triangles.push(indices[1]);\n        }\n        return triangles;\n    }\n    decompose(verticesArray, triangles) {\n        let vertices = verticesArray;\n        let convexPolygons = this.convexPolygons;\n        this.polygonPool.freeAll(convexPolygons);\n        convexPolygons.length = 0;\n        let convexPolygonsIndices = this.convexPolygonsIndices;\n        this.polygonIndicesPool.freeAll(convexPolygonsIndices);\n        convexPolygonsIndices.length = 0;\n        let polygonIndices = this.polygonIndicesPool.obtain();\n        polygonIndices.length = 0;\n        let polygon = this.polygonPool.obtain();\n        polygon.length = 0;\n        // Merge subsequent triangles if they form a triangle fan.\n        let fanBaseIndex = -1, lastWinding = 0;\n        for (let i = 0, n = triangles.length; i < n; i += 3) {\n            let t1 = triangles[i] << 1, t2 = triangles[i + 1] << 1, t3 = triangles[i + 2] << 1;\n            let x1 = vertices[t1], y1 = vertices[t1 + 1];\n            let x2 = vertices[t2], y2 = vertices[t2 + 1];\n            let x3 = vertices[t3], y3 = vertices[t3 + 1];\n            // If the base of the last triangle is the same as this triangle, check if they form a convex polygon (triangle fan).\n            let merged = false;\n            if (fanBaseIndex == t1) {\n                let o = polygon.length - 4;\n                let winding1 = Triangulator.winding(polygon[o], polygon[o + 1], polygon[o + 2], polygon[o + 3], x3, y3);\n                let winding2 = Triangulator.winding(x3, y3, polygon[0], polygon[1], polygon[2], polygon[3]);\n                if (winding1 == lastWinding && winding2 == lastWinding) {\n                    polygon.push(x3);\n                    polygon.push(y3);\n                    polygonIndices.push(t3);\n                    merged = true;\n                }\n            }\n            // Otherwise make this triangle the new base.\n            if (!merged) {\n                if (polygon.length > 0) {\n                    convexPolygons.push(polygon);\n                    convexPolygonsIndices.push(polygonIndices);\n                }\n                else {\n                    this.polygonPool.free(polygon);\n                    this.polygonIndicesPool.free(polygonIndices);\n                }\n                polygon = this.polygonPool.obtain();\n                polygon.length = 0;\n                polygon.push(x1);\n                polygon.push(y1);\n                polygon.push(x2);\n                polygon.push(y2);\n                polygon.push(x3);\n                polygon.push(y3);\n                polygonIndices = this.polygonIndicesPool.obtain();\n                polygonIndices.length = 0;\n                polygonIndices.push(t1);\n                polygonIndices.push(t2);\n                polygonIndices.push(t3);\n                lastWinding = Triangulator.winding(x1, y1, x2, y2, x3, y3);\n                fanBaseIndex = t1;\n            }\n        }\n        if (polygon.length > 0) {\n            convexPolygons.push(polygon);\n            convexPolygonsIndices.push(polygonIndices);\n        }\n        // Go through the list of polygons and try to merge the remaining triangles with the found triangle fans.\n        for (let i = 0, n = convexPolygons.length; i < n; i++) {\n            polygonIndices = convexPolygonsIndices[i];\n            if (polygonIndices.length == 0)\n                continue;\n            let firstIndex = polygonIndices[0];\n            let lastIndex = polygonIndices[polygonIndices.length - 1];\n            polygon = convexPolygons[i];\n            let o = polygon.length - 4;\n            let prevPrevX = polygon[o], prevPrevY = polygon[o + 1];\n            let prevX = polygon[o + 2], prevY = polygon[o + 3];\n            let firstX = polygon[0], firstY = polygon[1];\n            let secondX = polygon[2], secondY = polygon[3];\n            let winding = Triangulator.winding(prevPrevX, prevPrevY, prevX, prevY, firstX, firstY);\n            for (let ii = 0; ii < n; ii++) {\n                if (ii == i)\n                    continue;\n                let otherIndices = convexPolygonsIndices[ii];\n                if (otherIndices.length != 3)\n                    continue;\n                let otherFirstIndex = otherIndices[0];\n                let otherSecondIndex = otherIndices[1];\n                let otherLastIndex = otherIndices[2];\n                let otherPoly = convexPolygons[ii];\n                let x3 = otherPoly[otherPoly.length - 2], y3 = otherPoly[otherPoly.length - 1];\n                if (otherFirstIndex != firstIndex || otherSecondIndex != lastIndex)\n                    continue;\n                let winding1 = Triangulator.winding(prevPrevX, prevPrevY, prevX, prevY, x3, y3);\n                let winding2 = Triangulator.winding(x3, y3, firstX, firstY, secondX, secondY);\n                if (winding1 == winding && winding2 == winding) {\n                    otherPoly.length = 0;\n                    otherIndices.length = 0;\n                    polygon.push(x3);\n                    polygon.push(y3);\n                    polygonIndices.push(otherLastIndex);\n                    prevPrevX = prevX;\n                    prevPrevY = prevY;\n                    prevX = x3;\n                    prevY = y3;\n                    ii = 0;\n                }\n            }\n        }\n        // Remove empty polygons that resulted from the merge step above.\n        for (let i = convexPolygons.length - 1; i >= 0; i--) {\n            polygon = convexPolygons[i];\n            if (polygon.length == 0) {\n                convexPolygons.splice(i, 1);\n                this.polygonPool.free(polygon);\n                polygonIndices = convexPolygonsIndices[i];\n                convexPolygonsIndices.splice(i, 1);\n                this.polygonIndicesPool.free(polygonIndices);\n            }\n        }\n        return convexPolygons;\n    }\n    static isConcave(index, vertexCount, vertices, indices) {\n        let previous = indices[(vertexCount + index - 1) % vertexCount] << 1;\n        let current = indices[index] << 1;\n        let next = indices[(index + 1) % vertexCount] << 1;\n        return !this.positiveArea(vertices[previous], vertices[previous + 1], vertices[current], vertices[current + 1], vertices[next], vertices[next + 1]);\n    }\n    static positiveArea(p1x, p1y, p2x, p2y, p3x, p3y) {\n        return p1x * (p3y - p2y) + p2x * (p1y - p3y) + p3x * (p2y - p1y) >= 0;\n    }\n    static winding(p1x, p1y, p2x, p2y, p3x, p3y) {\n        let px = p2x - p1x, py = p2y - p1y;\n        return p3x * py - p3y * px + px * p1y - p1x * py >= 0 ? 1 : -1;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Triangulator } from \"./Triangulator.js\";\nimport { Utils } from \"./Utils.js\";\nexport class SkeletonClipping {\n    triangulator = new Triangulator();\n    clippingPolygon = new Array();\n    clipOutput = new Array();\n    clippedVertices = new Array();\n    clippedUVs = new Array();\n    clippedTriangles = new Array();\n    scratch = new Array();\n    clipAttachment = null;\n    clippingPolygons = null;\n    clipStart(slot, clip) {\n        if (this.clipAttachment)\n            return 0;\n        this.clipAttachment = clip;\n        let n = clip.worldVerticesLength;\n        let vertices = Utils.setArraySize(this.clippingPolygon, n);\n        clip.computeWorldVertices(slot, 0, n, vertices, 0, 2);\n        let clippingPolygon = this.clippingPolygon;\n        SkeletonClipping.makeClockwise(clippingPolygon);\n        let clippingPolygons = this.clippingPolygons = this.triangulator.decompose(clippingPolygon, this.triangulator.triangulate(clippingPolygon));\n        for (let i = 0, n = clippingPolygons.length; i < n; i++) {\n            let polygon = clippingPolygons[i];\n            SkeletonClipping.makeClockwise(polygon);\n            polygon.push(polygon[0]);\n            polygon.push(polygon[1]);\n        }\n        return clippingPolygons.length;\n    }\n    clipEndWithSlot(slot) {\n        if (this.clipAttachment && this.clipAttachment.endSlot == slot.data)\n            this.clipEnd();\n    }\n    clipEnd() {\n        if (!this.clipAttachment)\n            return;\n        this.clipAttachment = null;\n        this.clippingPolygons = null;\n        this.clippedVertices.length = 0;\n        this.clippedTriangles.length = 0;\n        this.clippingPolygon.length = 0;\n    }\n    isClipping() {\n        return this.clipAttachment != null;\n    }\n    clipTriangles(vertices, verticesLengthOrTriangles, trianglesOrTrianglesLength, trianglesLengthOrUvs, uvsOrLight, lightOrDark, darkOrTwoColor, twoColorParam) {\n        // Determine which overload is being used\n        let triangles;\n        let trianglesLength;\n        let uvs;\n        let light;\n        let dark;\n        let twoColor;\n        if (typeof verticesLengthOrTriangles === 'number') {\n            triangles = trianglesOrTrianglesLength;\n            trianglesLength = trianglesLengthOrUvs;\n            uvs = uvsOrLight;\n            light = lightOrDark;\n            dark = darkOrTwoColor;\n            twoColor = twoColorParam;\n        }\n        else {\n            triangles = verticesLengthOrTriangles;\n            trianglesLength = trianglesOrTrianglesLength;\n            uvs = trianglesLengthOrUvs;\n            light = uvsOrLight;\n            dark = lightOrDark;\n            twoColor = darkOrTwoColor;\n        }\n        if (uvs && light && dark && typeof twoColor === 'boolean')\n            this.clipTrianglesRender(vertices, triangles, trianglesLength, uvs, light, dark, twoColor);\n        else\n            this.clipTrianglesNoRender(vertices, triangles, trianglesLength);\n    }\n    clipTrianglesNoRender(vertices, triangles, trianglesLength) {\n        let clipOutput = this.clipOutput, clippedVertices = this.clippedVertices;\n        let clippedTriangles = this.clippedTriangles;\n        let polygons = this.clippingPolygons;\n        let polygonsCount = polygons.length;\n        let index = 0;\n        clippedVertices.length = 0;\n        clippedTriangles.length = 0;\n        for (let i = 0; i < trianglesLength; i += 3) {\n            let vertexOffset = triangles[i] << 1;\n            let x1 = vertices[vertexOffset], y1 = vertices[vertexOffset + 1];\n            vertexOffset = triangles[i + 1] << 1;\n            let x2 = vertices[vertexOffset], y2 = vertices[vertexOffset + 1];\n            vertexOffset = triangles[i + 2] << 1;\n            let x3 = vertices[vertexOffset], y3 = vertices[vertexOffset + 1];\n            for (let p = 0; p < polygonsCount; p++) {\n                let s = clippedVertices.length;\n                if (this.clip(x1, y1, x2, y2, x3, y3, polygons[p], clipOutput)) {\n                    let clipOutputLength = clipOutput.length;\n                    if (clipOutputLength == 0)\n                        continue;\n                    let clipOutputCount = clipOutputLength >> 1;\n                    let clipOutputItems = this.clipOutput;\n                    let clippedVerticesItems = Utils.setArraySize(clippedVertices, s + clipOutputCount * 2);\n                    for (let ii = 0; ii < clipOutputLength; ii += 2, s += 2) {\n                        let x = clipOutputItems[ii], y = clipOutputItems[ii + 1];\n                        clippedVerticesItems[s] = x;\n                        clippedVerticesItems[s + 1] = y;\n                    }\n                    s = clippedTriangles.length;\n                    let clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3 * (clipOutputCount - 2));\n                    clipOutputCount--;\n                    for (let ii = 1; ii < clipOutputCount; ii++, s += 3) {\n                        clippedTrianglesItems[s] = index;\n                        clippedTrianglesItems[s + 1] = (index + ii);\n                        clippedTrianglesItems[s + 2] = (index + ii + 1);\n                    }\n                    index += clipOutputCount + 1;\n                }\n                else {\n                    let clippedVerticesItems = Utils.setArraySize(clippedVertices, s + 3 * 2);\n                    clippedVerticesItems[s] = x1;\n                    clippedVerticesItems[s + 1] = y1;\n                    clippedVerticesItems[s + 2] = x2;\n                    clippedVerticesItems[s + 3] = y2;\n                    clippedVerticesItems[s + 4] = x3;\n                    clippedVerticesItems[s + 5] = y3;\n                    s = clippedTriangles.length;\n                    let clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3);\n                    clippedTrianglesItems[s] = index;\n                    clippedTrianglesItems[s + 1] = (index + 1);\n                    clippedTrianglesItems[s + 2] = (index + 2);\n                    index += 3;\n                    break;\n                }\n            }\n        }\n    }\n    clipTrianglesRender(vertices, triangles, trianglesLength, uvs, light, dark, twoColor) {\n        let clipOutput = this.clipOutput, clippedVertices = this.clippedVertices;\n        let clippedTriangles = this.clippedTriangles;\n        let polygons = this.clippingPolygons;\n        let polygonsCount = polygons.length;\n        let vertexSize = twoColor ? 12 : 8;\n        let index = 0;\n        clippedVertices.length = 0;\n        clippedTriangles.length = 0;\n        for (let i = 0; i < trianglesLength; i += 3) {\n            let vertexOffset = triangles[i] << 1;\n            let x1 = vertices[vertexOffset], y1 = vertices[vertexOffset + 1];\n            let u1 = uvs[vertexOffset], v1 = uvs[vertexOffset + 1];\n            vertexOffset = triangles[i + 1] << 1;\n            let x2 = vertices[vertexOffset], y2 = vertices[vertexOffset + 1];\n            let u2 = uvs[vertexOffset], v2 = uvs[vertexOffset + 1];\n            vertexOffset = triangles[i + 2] << 1;\n            let x3 = vertices[vertexOffset], y3 = vertices[vertexOffset + 1];\n            let u3 = uvs[vertexOffset], v3 = uvs[vertexOffset + 1];\n            for (let p = 0; p < polygonsCount; p++) {\n                let s = clippedVertices.length;\n                if (this.clip(x1, y1, x2, y2, x3, y3, polygons[p], clipOutput)) {\n                    let clipOutputLength = clipOutput.length;\n                    if (clipOutputLength == 0)\n                        continue;\n                    let d0 = y2 - y3, d1 = x3 - x2, d2 = x1 - x3, d4 = y3 - y1;\n                    let d = 1 / (d0 * d2 + d1 * (y1 - y3));\n                    let clipOutputCount = clipOutputLength >> 1;\n                    let clipOutputItems = this.clipOutput;\n                    let clippedVerticesItems = Utils.setArraySize(clippedVertices, s + clipOutputCount * vertexSize);\n                    for (let ii = 0; ii < clipOutputLength; ii += 2, s += vertexSize) {\n                        let x = clipOutputItems[ii], y = clipOutputItems[ii + 1];\n                        clippedVerticesItems[s] = x;\n                        clippedVerticesItems[s + 1] = y;\n                        clippedVerticesItems[s + 2] = light.r;\n                        clippedVerticesItems[s + 3] = light.g;\n                        clippedVerticesItems[s + 4] = light.b;\n                        clippedVerticesItems[s + 5] = light.a;\n                        let c0 = x - x3, c1 = y - y3;\n                        let a = (d0 * c0 + d1 * c1) * d;\n                        let b = (d4 * c0 + d2 * c1) * d;\n                        let c = 1 - a - b;\n                        clippedVerticesItems[s + 6] = u1 * a + u2 * b + u3 * c;\n                        clippedVerticesItems[s + 7] = v1 * a + v2 * b + v3 * c;\n                        if (twoColor) {\n                            clippedVerticesItems[s + 8] = dark.r;\n                            clippedVerticesItems[s + 9] = dark.g;\n                            clippedVerticesItems[s + 10] = dark.b;\n                            clippedVerticesItems[s + 11] = dark.a;\n                        }\n                    }\n                    s = clippedTriangles.length;\n                    let clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3 * (clipOutputCount - 2));\n                    clipOutputCount--;\n                    for (let ii = 1; ii < clipOutputCount; ii++, s += 3) {\n                        clippedTrianglesItems[s] = index;\n                        clippedTrianglesItems[s + 1] = (index + ii);\n                        clippedTrianglesItems[s + 2] = (index + ii + 1);\n                    }\n                    index += clipOutputCount + 1;\n                }\n                else {\n                    let clippedVerticesItems = Utils.setArraySize(clippedVertices, s + 3 * vertexSize);\n                    clippedVerticesItems[s] = x1;\n                    clippedVerticesItems[s + 1] = y1;\n                    clippedVerticesItems[s + 2] = light.r;\n                    clippedVerticesItems[s + 3] = light.g;\n                    clippedVerticesItems[s + 4] = light.b;\n                    clippedVerticesItems[s + 5] = light.a;\n                    if (!twoColor) {\n                        clippedVerticesItems[s + 6] = u1;\n                        clippedVerticesItems[s + 7] = v1;\n                        clippedVerticesItems[s + 8] = x2;\n                        clippedVerticesItems[s + 9] = y2;\n                        clippedVerticesItems[s + 10] = light.r;\n                        clippedVerticesItems[s + 11] = light.g;\n                        clippedVerticesItems[s + 12] = light.b;\n                        clippedVerticesItems[s + 13] = light.a;\n                        clippedVerticesItems[s + 14] = u2;\n                        clippedVerticesItems[s + 15] = v2;\n                        clippedVerticesItems[s + 16] = x3;\n                        clippedVerticesItems[s + 17] = y3;\n                        clippedVerticesItems[s + 18] = light.r;\n                        clippedVerticesItems[s + 19] = light.g;\n                        clippedVerticesItems[s + 20] = light.b;\n                        clippedVerticesItems[s + 21] = light.a;\n                        clippedVerticesItems[s + 22] = u3;\n                        clippedVerticesItems[s + 23] = v3;\n                    }\n                    else {\n                        clippedVerticesItems[s + 6] = u1;\n                        clippedVerticesItems[s + 7] = v1;\n                        clippedVerticesItems[s + 8] = dark.r;\n                        clippedVerticesItems[s + 9] = dark.g;\n                        clippedVerticesItems[s + 10] = dark.b;\n                        clippedVerticesItems[s + 11] = dark.a;\n                        clippedVerticesItems[s + 12] = x2;\n                        clippedVerticesItems[s + 13] = y2;\n                        clippedVerticesItems[s + 14] = light.r;\n                        clippedVerticesItems[s + 15] = light.g;\n                        clippedVerticesItems[s + 16] = light.b;\n                        clippedVerticesItems[s + 17] = light.a;\n                        clippedVerticesItems[s + 18] = u2;\n                        clippedVerticesItems[s + 19] = v2;\n                        clippedVerticesItems[s + 20] = dark.r;\n                        clippedVerticesItems[s + 21] = dark.g;\n                        clippedVerticesItems[s + 22] = dark.b;\n                        clippedVerticesItems[s + 23] = dark.a;\n                        clippedVerticesItems[s + 24] = x3;\n                        clippedVerticesItems[s + 25] = y3;\n                        clippedVerticesItems[s + 26] = light.r;\n                        clippedVerticesItems[s + 27] = light.g;\n                        clippedVerticesItems[s + 28] = light.b;\n                        clippedVerticesItems[s + 29] = light.a;\n                        clippedVerticesItems[s + 30] = u3;\n                        clippedVerticesItems[s + 31] = v3;\n                        clippedVerticesItems[s + 32] = dark.r;\n                        clippedVerticesItems[s + 33] = dark.g;\n                        clippedVerticesItems[s + 34] = dark.b;\n                        clippedVerticesItems[s + 35] = dark.a;\n                    }\n                    s = clippedTriangles.length;\n                    let clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3);\n                    clippedTrianglesItems[s] = index;\n                    clippedTrianglesItems[s + 1] = (index + 1);\n                    clippedTrianglesItems[s + 2] = (index + 2);\n                    index += 3;\n                    break;\n                }\n            }\n        }\n    }\n    clipTrianglesUnpacked(vertices, triangles, trianglesLength, uvs) {\n        let clipOutput = this.clipOutput, clippedVertices = this.clippedVertices, clippedUVs = this.clippedUVs;\n        let clippedTriangles = this.clippedTriangles;\n        let polygons = this.clippingPolygons;\n        let polygonsCount = polygons.length;\n        let index = 0;\n        clippedVertices.length = 0;\n        clippedUVs.length = 0;\n        clippedTriangles.length = 0;\n        for (let i = 0; i < trianglesLength; i += 3) {\n            let vertexOffset = triangles[i] << 1;\n            let x1 = vertices[vertexOffset], y1 = vertices[vertexOffset + 1];\n            let u1 = uvs[vertexOffset], v1 = uvs[vertexOffset + 1];\n            vertexOffset = triangles[i + 1] << 1;\n            let x2 = vertices[vertexOffset], y2 = vertices[vertexOffset + 1];\n            let u2 = uvs[vertexOffset], v2 = uvs[vertexOffset + 1];\n            vertexOffset = triangles[i + 2] << 1;\n            let x3 = vertices[vertexOffset], y3 = vertices[vertexOffset + 1];\n            let u3 = uvs[vertexOffset], v3 = uvs[vertexOffset + 1];\n            for (let p = 0; p < polygonsCount; p++) {\n                let s = clippedVertices.length;\n                if (this.clip(x1, y1, x2, y2, x3, y3, polygons[p], clipOutput)) {\n                    let clipOutputLength = clipOutput.length;\n                    if (clipOutputLength == 0)\n                        continue;\n                    let d0 = y2 - y3, d1 = x3 - x2, d2 = x1 - x3, d4 = y3 - y1;\n                    let d = 1 / (d0 * d2 + d1 * (y1 - y3));\n                    let clipOutputCount = clipOutputLength >> 1;\n                    let clipOutputItems = this.clipOutput;\n                    let clippedVerticesItems = Utils.setArraySize(clippedVertices, s + clipOutputCount * 2);\n                    let clippedUVsItems = Utils.setArraySize(clippedUVs, s + clipOutputCount * 2);\n                    for (let ii = 0; ii < clipOutputLength; ii += 2, s += 2) {\n                        let x = clipOutputItems[ii], y = clipOutputItems[ii + 1];\n                        clippedVerticesItems[s] = x;\n                        clippedVerticesItems[s + 1] = y;\n                        let c0 = x - x3, c1 = y - y3;\n                        let a = (d0 * c0 + d1 * c1) * d;\n                        let b = (d4 * c0 + d2 * c1) * d;\n                        let c = 1 - a - b;\n                        clippedUVsItems[s] = u1 * a + u2 * b + u3 * c;\n                        clippedUVsItems[s + 1] = v1 * a + v2 * b + v3 * c;\n                    }\n                    s = clippedTriangles.length;\n                    let clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3 * (clipOutputCount - 2));\n                    clipOutputCount--;\n                    for (let ii = 1; ii < clipOutputCount; ii++, s += 3) {\n                        clippedTrianglesItems[s] = index;\n                        clippedTrianglesItems[s + 1] = (index + ii);\n                        clippedTrianglesItems[s + 2] = (index + ii + 1);\n                    }\n                    index += clipOutputCount + 1;\n                }\n                else {\n                    let clippedVerticesItems = Utils.setArraySize(clippedVertices, s + 3 * 2);\n                    clippedVerticesItems[s] = x1;\n                    clippedVerticesItems[s + 1] = y1;\n                    clippedVerticesItems[s + 2] = x2;\n                    clippedVerticesItems[s + 3] = y2;\n                    clippedVerticesItems[s + 4] = x3;\n                    clippedVerticesItems[s + 5] = y3;\n                    let clippedUVSItems = Utils.setArraySize(clippedUVs, s + 3 * 2);\n                    clippedUVSItems[s] = u1;\n                    clippedUVSItems[s + 1] = v1;\n                    clippedUVSItems[s + 2] = u2;\n                    clippedUVSItems[s + 3] = v2;\n                    clippedUVSItems[s + 4] = u3;\n                    clippedUVSItems[s + 5] = v3;\n                    s = clippedTriangles.length;\n                    let clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3);\n                    clippedTrianglesItems[s] = index;\n                    clippedTrianglesItems[s + 1] = (index + 1);\n                    clippedTrianglesItems[s + 2] = (index + 2);\n                    index += 3;\n                    break;\n                }\n            }\n        }\n    }\n    /** Clips the input triangle against the convex, clockwise clipping area. If the triangle lies entirely within the clipping\n     * area, false is returned. The clipping area must duplicate the first vertex at the end of the vertices list. */\n    clip(x1, y1, x2, y2, x3, y3, clippingArea, output) {\n        let originalOutput = output;\n        let clipped = false;\n        // Avoid copy at the end.\n        let input;\n        if (clippingArea.length % 4 >= 2) {\n            input = output;\n            output = this.scratch;\n        }\n        else\n            input = this.scratch;\n        input.length = 0;\n        input.push(x1);\n        input.push(y1);\n        input.push(x2);\n        input.push(y2);\n        input.push(x3);\n        input.push(y3);\n        input.push(x1);\n        input.push(y1);\n        output.length = 0;\n        let clippingVerticesLast = clippingArea.length - 4;\n        let clippingVertices = clippingArea;\n        for (let i = 0;; i += 2) {\n            let edgeX = clippingVertices[i], edgeY = clippingVertices[i + 1];\n            let ex = edgeX - clippingVertices[i + 2], ey = edgeY - clippingVertices[i + 3];\n            let outputStart = output.length;\n            let inputVertices = input;\n            for (let ii = 0, nn = input.length - 2; ii < nn;) {\n                let inputX = inputVertices[ii], inputY = inputVertices[ii + 1];\n                ii += 2;\n                let inputX2 = inputVertices[ii], inputY2 = inputVertices[ii + 1];\n                let s2 = ey * (edgeX - inputX2) > ex * (edgeY - inputY2);\n                let s1 = ey * (edgeX - inputX) - ex * (edgeY - inputY);\n                if (s1 > 0) {\n                    if (s2) { // v1 inside, v2 inside\n                        output.push(inputX2);\n                        output.push(inputY2);\n                        continue;\n                    }\n                    // v1 inside, v2 outside\n                    let ix = inputX2 - inputX, iy = inputY2 - inputY, t = s1 / (ix * ey - iy * ex);\n                    if (t >= 0 && t <= 1) {\n                        output.push(inputX + ix * t);\n                        output.push(inputY + iy * t);\n                    }\n                    else {\n                        output.push(inputX2);\n                        output.push(inputY2);\n                        continue;\n                    }\n                }\n                else if (s2) { // v1 outside, v2 inside\n                    let ix = inputX2 - inputX, iy = inputY2 - inputY, t = s1 / (ix * ey - iy * ex);\n                    if (t >= 0 && t <= 1) {\n                        output.push(inputX + ix * t);\n                        output.push(inputY + iy * t);\n                        output.push(inputX2);\n                        output.push(inputY2);\n                    }\n                    else {\n                        output.push(inputX2);\n                        output.push(inputY2);\n                        continue;\n                    }\n                }\n                clipped = true;\n            }\n            if (outputStart == output.length) { // All edges outside.\n                originalOutput.length = 0;\n                return true;\n            }\n            output.push(output[0]);\n            output.push(output[1]);\n            if (i == clippingVerticesLast)\n                break;\n            let temp = output;\n            output = input;\n            output.length = 0;\n            input = temp;\n        }\n        if (originalOutput != output) {\n            originalOutput.length = 0;\n            for (let i = 0, n = output.length - 2; i < n; i++)\n                originalOutput[i] = output[i];\n        }\n        else\n            originalOutput.length = originalOutput.length - 2;\n        return clipped;\n    }\n    static makeClockwise(polygon) {\n        let vertices = polygon;\n        let verticeslength = polygon.length;\n        let area = vertices[verticeslength - 2] * vertices[1] - vertices[0] * vertices[verticeslength - 1], p1x = 0, p1y = 0, p2x = 0, p2y = 0;\n        for (let i = 0, n = verticeslength - 3; i < n; i += 2) {\n            p1x = vertices[i];\n            p1y = vertices[i + 1];\n            p2x = vertices[i + 2];\n            p2y = vertices[i + 3];\n            area += p1x * p2y - p2x * p1y;\n        }\n        if (area < 0)\n            return;\n        for (let i = 0, lastX = verticeslength - 2, n = verticeslength >> 1; i < n; i += 2) {\n            let x = vertices[i], y = vertices[i + 1];\n            let other = lastX - i;\n            vertices[i] = vertices[other];\n            vertices[i + 1] = vertices[other + 1];\n            vertices[other] = x;\n            vertices[other + 1] = y;\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Animation, InheritTimeline, AttachmentTimeline, RGBATimeline, RGBTimeline, AlphaTimeline, RGBA2Timeline, RGB2Timeline, RotateTimeline, TranslateTimeline, TranslateXTimeline, TranslateYTimeline, ScaleTimeline, ScaleXTimeline, ScaleYTimeline, ShearTimeline, ShearXTimeline, ShearYTimeline, IkConstraintTimeline, TransformConstraintTimeline, PathConstraintPositionTimeline, PathConstraintSpacingTimeline, PathConstraintMixTimeline, DeformTimeline, DrawOrderTimeline, EventTimeline, PhysicsConstraintResetTimeline, PhysicsConstraintInertiaTimeline, PhysicsConstraintStrengthTimeline, PhysicsConstraintDampingTimeline, PhysicsConstraintMassTimeline, PhysicsConstraintWindTimeline, PhysicsConstraintGravityTimeline, PhysicsConstraintMixTimeline } from \"./Animation.js\";\nimport { BoneData, Inherit } from \"./BoneData.js\";\nimport { EventData } from \"./EventData.js\";\nimport { Event } from \"./Event.js\";\nimport { IkConstraintData } from \"./IkConstraintData.js\";\nimport { PathConstraintData, PositionMode, SpacingMode, RotateMode } from \"./PathConstraintData.js\";\nimport { SkeletonData } from \"./SkeletonData.js\";\nimport { Skin } from \"./Skin.js\";\nimport { SlotData, BlendMode } from \"./SlotData.js\";\nimport { TransformConstraintData } from \"./TransformConstraintData.js\";\nimport { Utils, Color } from \"./Utils.js\";\nimport { Sequence, SequenceMode } from \"./attachments/Sequence.js\";\nimport { SequenceTimeline } from \"./Animation.js\";\nimport { PhysicsConstraintData } from \"./PhysicsConstraintData.js\";\n/** Loads skeleton data in the Spine JSON format.\n *\n * See [Spine JSON format](http://esotericsoftware.com/spine-json-format) and\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\n * Runtimes Guide. */\nexport class SkeletonJson {\n    attachmentLoader;\n    /** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\n     * runtime than were used in Spine.\n     *\n     * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */\n    scale = 1;\n    linkedMeshes = new Array();\n    constructor(attachmentLoader) {\n        this.attachmentLoader = attachmentLoader;\n    }\n    readSkeletonData(json) {\n        let scale = this.scale;\n        let skeletonData = new SkeletonData();\n        let root = typeof (json) === \"string\" ? JSON.parse(json) : json;\n        // Skeleton\n        let skeletonMap = root.skeleton;\n        if (skeletonMap) {\n            skeletonData.hash = skeletonMap.hash;\n            skeletonData.version = skeletonMap.spine;\n            skeletonData.x = skeletonMap.x;\n            skeletonData.y = skeletonMap.y;\n            skeletonData.width = skeletonMap.width;\n            skeletonData.height = skeletonMap.height;\n            skeletonData.referenceScale = getValue(skeletonMap, \"referenceScale\", 100) * scale;\n            skeletonData.fps = skeletonMap.fps;\n            skeletonData.imagesPath = skeletonMap.images ?? null;\n            skeletonData.audioPath = skeletonMap.audio ?? null;\n        }\n        // Bones\n        if (root.bones) {\n            for (let i = 0; i < root.bones.length; i++) {\n                let boneMap = root.bones[i];\n                let parent = null;\n                let parentName = getValue(boneMap, \"parent\", null);\n                if (parentName)\n                    parent = skeletonData.findBone(parentName);\n                let data = new BoneData(skeletonData.bones.length, boneMap.name, parent);\n                data.length = getValue(boneMap, \"length\", 0) * scale;\n                data.x = getValue(boneMap, \"x\", 0) * scale;\n                data.y = getValue(boneMap, \"y\", 0) * scale;\n                data.rotation = getValue(boneMap, \"rotation\", 0);\n                data.scaleX = getValue(boneMap, \"scaleX\", 1);\n                data.scaleY = getValue(boneMap, \"scaleY\", 1);\n                data.shearX = getValue(boneMap, \"shearX\", 0);\n                data.shearY = getValue(boneMap, \"shearY\", 0);\n                data.inherit = Utils.enumValue(Inherit, getValue(boneMap, \"inherit\", \"Normal\"));\n                data.skinRequired = getValue(boneMap, \"skin\", false);\n                let color = getValue(boneMap, \"color\", null);\n                if (color)\n                    data.color.setFromString(color);\n                skeletonData.bones.push(data);\n            }\n        }\n        // Slots.\n        if (root.slots) {\n            for (let i = 0; i < root.slots.length; i++) {\n                let slotMap = root.slots[i];\n                let slotName = slotMap.name;\n                let boneData = skeletonData.findBone(slotMap.bone);\n                if (!boneData)\n                    throw new Error(`Couldn't find bone ${slotMap.bone} for slot ${slotName}`);\n                let data = new SlotData(skeletonData.slots.length, slotName, boneData);\n                let color = getValue(slotMap, \"color\", null);\n                if (color)\n                    data.color.setFromString(color);\n                let dark = getValue(slotMap, \"dark\", null);\n                if (dark)\n                    data.darkColor = Color.fromString(dark);\n                data.attachmentName = getValue(slotMap, \"attachment\", null);\n                data.blendMode = Utils.enumValue(BlendMode, getValue(slotMap, \"blend\", \"normal\"));\n                data.visible = getValue(slotMap, \"visible\", true);\n                skeletonData.slots.push(data);\n            }\n        }\n        // IK constraints\n        if (root.ik) {\n            for (let i = 0; i < root.ik.length; i++) {\n                let constraintMap = root.ik[i];\n                let data = new IkConstraintData(constraintMap.name);\n                data.order = getValue(constraintMap, \"order\", 0);\n                data.skinRequired = getValue(constraintMap, \"skin\", false);\n                for (let ii = 0; ii < constraintMap.bones.length; ii++) {\n                    let bone = skeletonData.findBone(constraintMap.bones[ii]);\n                    if (!bone)\n                        throw new Error(`Couldn't find bone ${constraintMap.bones[ii]} for IK constraint ${constraintMap.name}.`);\n                    data.bones.push(bone);\n                }\n                let target = skeletonData.findBone(constraintMap.target);\n                ;\n                if (!target)\n                    throw new Error(`Couldn't find target bone ${constraintMap.target} for IK constraint ${constraintMap.name}.`);\n                data.target = target;\n                data.mix = getValue(constraintMap, \"mix\", 1);\n                data.softness = getValue(constraintMap, \"softness\", 0) * scale;\n                data.bendDirection = getValue(constraintMap, \"bendPositive\", true) ? 1 : -1;\n                data.compress = getValue(constraintMap, \"compress\", false);\n                data.stretch = getValue(constraintMap, \"stretch\", false);\n                data.uniform = getValue(constraintMap, \"uniform\", false);\n                skeletonData.ikConstraints.push(data);\n            }\n        }\n        // Transform constraints.\n        if (root.transform) {\n            for (let i = 0; i < root.transform.length; i++) {\n                let constraintMap = root.transform[i];\n                let data = new TransformConstraintData(constraintMap.name);\n                data.order = getValue(constraintMap, \"order\", 0);\n                data.skinRequired = getValue(constraintMap, \"skin\", false);\n                for (let ii = 0; ii < constraintMap.bones.length; ii++) {\n                    let boneName = constraintMap.bones[ii];\n                    let bone = skeletonData.findBone(boneName);\n                    if (!bone)\n                        throw new Error(`Couldn't find bone ${boneName} for transform constraint ${constraintMap.name}.`);\n                    data.bones.push(bone);\n                }\n                let targetName = constraintMap.target;\n                let target = skeletonData.findBone(targetName);\n                if (!target)\n                    throw new Error(`Couldn't find target bone ${targetName} for transform constraint ${constraintMap.name}.`);\n                data.target = target;\n                data.local = getValue(constraintMap, \"local\", false);\n                data.relative = getValue(constraintMap, \"relative\", false);\n                data.offsetRotation = getValue(constraintMap, \"rotation\", 0);\n                data.offsetX = getValue(constraintMap, \"x\", 0) * scale;\n                data.offsetY = getValue(constraintMap, \"y\", 0) * scale;\n                data.offsetScaleX = getValue(constraintMap, \"scaleX\", 0);\n                data.offsetScaleY = getValue(constraintMap, \"scaleY\", 0);\n                data.offsetShearY = getValue(constraintMap, \"shearY\", 0);\n                data.mixRotate = getValue(constraintMap, \"mixRotate\", 1);\n                data.mixX = getValue(constraintMap, \"mixX\", 1);\n                data.mixY = getValue(constraintMap, \"mixY\", data.mixX);\n                data.mixScaleX = getValue(constraintMap, \"mixScaleX\", 1);\n                data.mixScaleY = getValue(constraintMap, \"mixScaleY\", data.mixScaleX);\n                data.mixShearY = getValue(constraintMap, \"mixShearY\", 1);\n                skeletonData.transformConstraints.push(data);\n            }\n        }\n        // Path constraints.\n        if (root.path) {\n            for (let i = 0; i < root.path.length; i++) {\n                let constraintMap = root.path[i];\n                let data = new PathConstraintData(constraintMap.name);\n                data.order = getValue(constraintMap, \"order\", 0);\n                data.skinRequired = getValue(constraintMap, \"skin\", false);\n                for (let ii = 0; ii < constraintMap.bones.length; ii++) {\n                    let boneName = constraintMap.bones[ii];\n                    let bone = skeletonData.findBone(boneName);\n                    if (!bone)\n                        throw new Error(`Couldn't find bone ${boneName} for path constraint ${constraintMap.name}.`);\n                    data.bones.push(bone);\n                }\n                let targetName = constraintMap.target;\n                let target = skeletonData.findSlot(targetName);\n                if (!target)\n                    throw new Error(`Couldn't find target slot ${targetName} for path constraint ${constraintMap.name}.`);\n                data.target = target;\n                data.positionMode = Utils.enumValue(PositionMode, getValue(constraintMap, \"positionMode\", \"Percent\"));\n                data.spacingMode = Utils.enumValue(SpacingMode, getValue(constraintMap, \"spacingMode\", \"Length\"));\n                data.rotateMode = Utils.enumValue(RotateMode, getValue(constraintMap, \"rotateMode\", \"Tangent\"));\n                data.offsetRotation = getValue(constraintMap, \"rotation\", 0);\n                data.position = getValue(constraintMap, \"position\", 0);\n                if (data.positionMode == PositionMode.Fixed)\n                    data.position *= scale;\n                data.spacing = getValue(constraintMap, \"spacing\", 0);\n                if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed)\n                    data.spacing *= scale;\n                data.mixRotate = getValue(constraintMap, \"mixRotate\", 1);\n                data.mixX = getValue(constraintMap, \"mixX\", 1);\n                data.mixY = getValue(constraintMap, \"mixY\", data.mixX);\n                skeletonData.pathConstraints.push(data);\n            }\n        }\n        // Physics constraints.\n        if (root.physics) {\n            for (let i = 0; i < root.physics.length; i++) {\n                const constraintMap = root.physics[i];\n                const data = new PhysicsConstraintData(constraintMap.name);\n                data.order = getValue(constraintMap, \"order\", 0);\n                data.skinRequired = getValue(constraintMap, \"skin\", false);\n                const boneName = constraintMap.bone;\n                const bone = skeletonData.findBone(boneName);\n                if (bone == null)\n                    throw new Error(\"Physics bone not found: \" + boneName);\n                data.bone = bone;\n                data.x = getValue(constraintMap, \"x\", 0);\n                data.y = getValue(constraintMap, \"y\", 0);\n                data.rotate = getValue(constraintMap, \"rotate\", 0);\n                data.scaleX = getValue(constraintMap, \"scaleX\", 0);\n                data.shearX = getValue(constraintMap, \"shearX\", 0);\n                data.limit = getValue(constraintMap, \"limit\", 5000) * scale;\n                data.step = 1 / getValue(constraintMap, \"fps\", 60);\n                data.inertia = getValue(constraintMap, \"inertia\", 1);\n                data.strength = getValue(constraintMap, \"strength\", 100);\n                data.damping = getValue(constraintMap, \"damping\", 1);\n                data.massInverse = 1 / getValue(constraintMap, \"mass\", 1);\n                data.wind = getValue(constraintMap, \"wind\", 0);\n                data.gravity = getValue(constraintMap, \"gravity\", 0);\n                data.mix = getValue(constraintMap, \"mix\", 1);\n                data.inertiaGlobal = getValue(constraintMap, \"inertiaGlobal\", false);\n                data.strengthGlobal = getValue(constraintMap, \"strengthGlobal\", false);\n                data.dampingGlobal = getValue(constraintMap, \"dampingGlobal\", false);\n                data.massGlobal = getValue(constraintMap, \"massGlobal\", false);\n                data.windGlobal = getValue(constraintMap, \"windGlobal\", false);\n                data.gravityGlobal = getValue(constraintMap, \"gravityGlobal\", false);\n                data.mixGlobal = getValue(constraintMap, \"mixGlobal\", false);\n                skeletonData.physicsConstraints.push(data);\n            }\n        }\n        // Skins.\n        if (root.skins) {\n            for (let i = 0; i < root.skins.length; i++) {\n                let skinMap = root.skins[i];\n                let skin = new Skin(skinMap.name);\n                if (skinMap.bones) {\n                    for (let ii = 0; ii < skinMap.bones.length; ii++) {\n                        let boneName = skinMap.bones[ii];\n                        let bone = skeletonData.findBone(boneName);\n                        if (!bone)\n                            throw new Error(`Couldn't find bone ${boneName} for skin ${skinMap.name}.`);\n                        skin.bones.push(bone);\n                    }\n                }\n                if (skinMap.ik) {\n                    for (let ii = 0; ii < skinMap.ik.length; ii++) {\n                        let constraintName = skinMap.ik[ii];\n                        let constraint = skeletonData.findIkConstraint(constraintName);\n                        if (!constraint)\n                            throw new Error(`Couldn't find IK constraint ${constraintName} for skin ${skinMap.name}.`);\n                        skin.constraints.push(constraint);\n                    }\n                }\n                if (skinMap.transform) {\n                    for (let ii = 0; ii < skinMap.transform.length; ii++) {\n                        let constraintName = skinMap.transform[ii];\n                        let constraint = skeletonData.findTransformConstraint(constraintName);\n                        if (!constraint)\n                            throw new Error(`Couldn't find transform constraint ${constraintName} for skin ${skinMap.name}.`);\n                        skin.constraints.push(constraint);\n                    }\n                }\n                if (skinMap.path) {\n                    for (let ii = 0; ii < skinMap.path.length; ii++) {\n                        let constraintName = skinMap.path[ii];\n                        let constraint = skeletonData.findPathConstraint(constraintName);\n                        if (!constraint)\n                            throw new Error(`Couldn't find path constraint ${constraintName} for skin ${skinMap.name}.`);\n                        skin.constraints.push(constraint);\n                    }\n                }\n                if (skinMap.physics) {\n                    for (let ii = 0; ii < skinMap.physics.length; ii++) {\n                        let constraintName = skinMap.physics[ii];\n                        let constraint = skeletonData.findPhysicsConstraint(constraintName);\n                        if (!constraint)\n                            throw new Error(`Couldn't find physics constraint ${constraintName} for skin ${skinMap.name}.`);\n                        skin.constraints.push(constraint);\n                    }\n                }\n                for (let slotName in skinMap.attachments) {\n                    let slot = skeletonData.findSlot(slotName);\n                    if (!slot)\n                        throw new Error(`Couldn't find slot ${slotName} for skin ${skinMap.name}.`);\n                    let slotMap = skinMap.attachments[slotName];\n                    for (let entryName in slotMap) {\n                        let attachment = this.readAttachment(slotMap[entryName], skin, slot.index, entryName, skeletonData);\n                        if (attachment)\n                            skin.setAttachment(slot.index, entryName, attachment);\n                    }\n                }\n                skeletonData.skins.push(skin);\n                if (skin.name == \"default\")\n                    skeletonData.defaultSkin = skin;\n            }\n        }\n        // Linked meshes.\n        for (let i = 0, n = this.linkedMeshes.length; i < n; i++) {\n            let linkedMesh = this.linkedMeshes[i];\n            let skin = !linkedMesh.skin ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\n            if (!skin)\n                throw new Error(`Skin not found: ${linkedMesh.skin}`);\n            let parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n            if (!parent)\n                throw new Error(`Parent mesh not found: ${linkedMesh.parent}`);\n            linkedMesh.mesh.timelineAttachment = linkedMesh.inheritTimeline ? parent : linkedMesh.mesh;\n            linkedMesh.mesh.setParentMesh(parent);\n            if (linkedMesh.mesh.region != null)\n                linkedMesh.mesh.updateRegion();\n        }\n        this.linkedMeshes.length = 0;\n        // Events.\n        if (root.events) {\n            for (let eventName in root.events) {\n                let eventMap = root.events[eventName];\n                let data = new EventData(eventName);\n                data.intValue = getValue(eventMap, \"int\", 0);\n                data.floatValue = getValue(eventMap, \"float\", 0);\n                data.stringValue = getValue(eventMap, \"string\", \"\");\n                data.audioPath = getValue(eventMap, \"audio\", null);\n                if (data.audioPath) {\n                    data.volume = getValue(eventMap, \"volume\", 1);\n                    data.balance = getValue(eventMap, \"balance\", 0);\n                }\n                skeletonData.events.push(data);\n            }\n        }\n        // Animations.\n        if (root.animations) {\n            for (let animationName in root.animations) {\n                let animationMap = root.animations[animationName];\n                this.readAnimation(animationMap, animationName, skeletonData);\n            }\n        }\n        return skeletonData;\n    }\n    readAttachment(map, skin, slotIndex, name, skeletonData) {\n        let scale = this.scale;\n        name = getValue(map, \"name\", name);\n        switch (getValue(map, \"type\", \"region\")) {\n            case \"region\": {\n                let path = getValue(map, \"path\", name);\n                let sequence = this.readSequence(getValue(map, \"sequence\", null));\n                let region = this.attachmentLoader.newRegionAttachment(skin, name, path, sequence);\n                if (!region)\n                    return null;\n                region.path = path;\n                region.x = getValue(map, \"x\", 0) * scale;\n                region.y = getValue(map, \"y\", 0) * scale;\n                region.scaleX = getValue(map, \"scaleX\", 1);\n                region.scaleY = getValue(map, \"scaleY\", 1);\n                region.rotation = getValue(map, \"rotation\", 0);\n                region.width = map.width * scale;\n                region.height = map.height * scale;\n                region.sequence = sequence;\n                let color = getValue(map, \"color\", null);\n                if (color)\n                    region.color.setFromString(color);\n                if (region.region != null)\n                    region.updateRegion();\n                return region;\n            }\n            case \"boundingbox\": {\n                let box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n                if (!box)\n                    return null;\n                this.readVertices(map, box, map.vertexCount << 1);\n                let color = getValue(map, \"color\", null);\n                if (color)\n                    box.color.setFromString(color);\n                return box;\n            }\n            case \"mesh\":\n            case \"linkedmesh\": {\n                let path = getValue(map, \"path\", name);\n                let sequence = this.readSequence(getValue(map, \"sequence\", null));\n                let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path, sequence);\n                if (!mesh)\n                    return null;\n                mesh.path = path;\n                let color = getValue(map, \"color\", null);\n                if (color)\n                    mesh.color.setFromString(color);\n                mesh.width = getValue(map, \"width\", 0) * scale;\n                mesh.height = getValue(map, \"height\", 0) * scale;\n                mesh.sequence = sequence;\n                let parent = getValue(map, \"parent\", null);\n                if (parent) {\n                    this.linkedMeshes.push(new LinkedMesh(mesh, getValue(map, \"skin\", null), slotIndex, parent, getValue(map, \"timelines\", true)));\n                    return mesh;\n                }\n                let uvs = map.uvs;\n                this.readVertices(map, mesh, uvs.length);\n                mesh.triangles = map.triangles;\n                mesh.regionUVs = uvs;\n                if (mesh.region != null)\n                    mesh.updateRegion();\n                mesh.edges = getValue(map, \"edges\", null);\n                mesh.hullLength = getValue(map, \"hull\", 0) * 2;\n                return mesh;\n            }\n            case \"path\": {\n                let path = this.attachmentLoader.newPathAttachment(skin, name);\n                if (!path)\n                    return null;\n                path.closed = getValue(map, \"closed\", false);\n                path.constantSpeed = getValue(map, \"constantSpeed\", true);\n                let vertexCount = map.vertexCount;\n                this.readVertices(map, path, vertexCount << 1);\n                let lengths = Utils.newArray(vertexCount / 3, 0);\n                for (let i = 0; i < map.lengths.length; i++)\n                    lengths[i] = map.lengths[i] * scale;\n                path.lengths = lengths;\n                let color = getValue(map, \"color\", null);\n                if (color)\n                    path.color.setFromString(color);\n                return path;\n            }\n            case \"point\": {\n                let point = this.attachmentLoader.newPointAttachment(skin, name);\n                if (!point)\n                    return null;\n                point.x = getValue(map, \"x\", 0) * scale;\n                point.y = getValue(map, \"y\", 0) * scale;\n                point.rotation = getValue(map, \"rotation\", 0);\n                let color = getValue(map, \"color\", null);\n                if (color)\n                    point.color.setFromString(color);\n                return point;\n            }\n            case \"clipping\": {\n                let clip = this.attachmentLoader.newClippingAttachment(skin, name);\n                if (!clip)\n                    return null;\n                let end = getValue(map, \"end\", null);\n                if (end)\n                    clip.endSlot = skeletonData.findSlot(end);\n                let vertexCount = map.vertexCount;\n                this.readVertices(map, clip, vertexCount << 1);\n                let color = getValue(map, \"color\", null);\n                if (color)\n                    clip.color.setFromString(color);\n                return clip;\n            }\n        }\n        return null;\n    }\n    readSequence(map) {\n        if (map == null)\n            return null;\n        let sequence = new Sequence(getValue(map, \"count\", 0));\n        sequence.start = getValue(map, \"start\", 1);\n        sequence.digits = getValue(map, \"digits\", 0);\n        sequence.setupIndex = getValue(map, \"setup\", 0);\n        return sequence;\n    }\n    readVertices(map, attachment, verticesLength) {\n        let scale = this.scale;\n        attachment.worldVerticesLength = verticesLength;\n        let vertices = map.vertices;\n        if (verticesLength == vertices.length) {\n            let scaledVertices = Utils.toFloatArray(vertices);\n            if (scale != 1) {\n                for (let i = 0, n = vertices.length; i < n; i++)\n                    scaledVertices[i] *= scale;\n            }\n            attachment.vertices = scaledVertices;\n            return;\n        }\n        let weights = new Array();\n        let bones = new Array();\n        for (let i = 0, n = vertices.length; i < n;) {\n            let boneCount = vertices[i++];\n            bones.push(boneCount);\n            for (let nn = i + boneCount * 4; i < nn; i += 4) {\n                bones.push(vertices[i]);\n                weights.push(vertices[i + 1] * scale);\n                weights.push(vertices[i + 2] * scale);\n                weights.push(vertices[i + 3]);\n            }\n        }\n        attachment.bones = bones;\n        attachment.vertices = Utils.toFloatArray(weights);\n    }\n    readAnimation(map, name, skeletonData) {\n        let scale = this.scale;\n        let timelines = new Array();\n        // Slot timelines.\n        if (map.slots) {\n            for (let slotName in map.slots) {\n                let slotMap = map.slots[slotName];\n                let slot = skeletonData.findSlot(slotName);\n                if (!slot)\n                    throw new Error(\"Slot not found: \" + slotName);\n                let slotIndex = slot.index;\n                for (let timelineName in slotMap) {\n                    let timelineMap = slotMap[timelineName];\n                    if (!timelineMap)\n                        continue;\n                    let frames = timelineMap.length;\n                    if (timelineName == \"attachment\") {\n                        let timeline = new AttachmentTimeline(frames, slotIndex);\n                        for (let frame = 0; frame < frames; frame++) {\n                            let keyMap = timelineMap[frame];\n                            timeline.setFrame(frame, getValue(keyMap, \"time\", 0), getValue(keyMap, \"name\", null));\n                        }\n                        timelines.push(timeline);\n                    }\n                    else if (timelineName == \"rgba\") {\n                        let timeline = new RGBATimeline(frames, frames << 2, slotIndex);\n                        let keyMap = timelineMap[0];\n                        let time = getValue(keyMap, \"time\", 0);\n                        let color = Color.fromString(keyMap.color);\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, color.r, color.g, color.b, color.a);\n                            let nextMap = timelineMap[frame + 1];\n                            if (!nextMap) {\n                                timeline.shrink(bezier);\n                                break;\n                            }\n                            let time2 = getValue(nextMap, \"time\", 0);\n                            let newColor = Color.fromString(nextMap.color);\n                            let curve = keyMap.curve;\n                            if (curve) {\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);\n                            }\n                            time = time2;\n                            color = newColor;\n                            keyMap = nextMap;\n                        }\n                        timelines.push(timeline);\n                    }\n                    else if (timelineName == \"rgb\") {\n                        let timeline = new RGBTimeline(frames, frames * 3, slotIndex);\n                        let keyMap = timelineMap[0];\n                        let time = getValue(keyMap, \"time\", 0);\n                        let color = Color.fromString(keyMap.color);\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, color.r, color.g, color.b);\n                            let nextMap = timelineMap[frame + 1];\n                            if (!nextMap) {\n                                timeline.shrink(bezier);\n                                break;\n                            }\n                            let time2 = getValue(nextMap, \"time\", 0);\n                            let newColor = Color.fromString(nextMap.color);\n                            let curve = keyMap.curve;\n                            if (curve) {\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n                            }\n                            time = time2;\n                            color = newColor;\n                            keyMap = nextMap;\n                        }\n                        timelines.push(timeline);\n                    }\n                    else if (timelineName == \"alpha\") {\n                        timelines.push(readTimeline1(timelineMap, new AlphaTimeline(frames, frames, slotIndex), 0, 1));\n                    }\n                    else if (timelineName == \"rgba2\") {\n                        let timeline = new RGBA2Timeline(frames, frames * 7, slotIndex);\n                        let keyMap = timelineMap[0];\n                        let time = getValue(keyMap, \"time\", 0);\n                        let color = Color.fromString(keyMap.light);\n                        let color2 = Color.fromString(keyMap.dark);\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, color.r, color.g, color.b, color.a, color2.r, color2.g, color2.b);\n                            let nextMap = timelineMap[frame + 1];\n                            if (!nextMap) {\n                                timeline.shrink(bezier);\n                                break;\n                            }\n                            let time2 = getValue(nextMap, \"time\", 0);\n                            let newColor = Color.fromString(nextMap.light);\n                            let newColor2 = Color.fromString(nextMap.dark);\n                            let curve = keyMap.curve;\n                            if (curve) {\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.r, newColor2.r, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.g, newColor2.g, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 6, time, time2, color2.b, newColor2.b, 1);\n                            }\n                            time = time2;\n                            color = newColor;\n                            color2 = newColor2;\n                            keyMap = nextMap;\n                        }\n                        timelines.push(timeline);\n                    }\n                    else if (timelineName == \"rgb2\") {\n                        let timeline = new RGB2Timeline(frames, frames * 6, slotIndex);\n                        let keyMap = timelineMap[0];\n                        let time = getValue(keyMap, \"time\", 0);\n                        let color = Color.fromString(keyMap.light);\n                        let color2 = Color.fromString(keyMap.dark);\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, color.r, color.g, color.b, color2.r, color2.g, color2.b);\n                            let nextMap = timelineMap[frame + 1];\n                            if (!nextMap) {\n                                timeline.shrink(bezier);\n                                break;\n                            }\n                            let time2 = getValue(nextMap, \"time\", 0);\n                            let newColor = Color.fromString(nextMap.light);\n                            let newColor2 = Color.fromString(nextMap.dark);\n                            let curve = keyMap.curve;\n                            if (curve) {\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color2.r, newColor2.r, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.g, newColor2.g, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.b, newColor2.b, 1);\n                            }\n                            time = time2;\n                            color = newColor;\n                            color2 = newColor2;\n                            keyMap = nextMap;\n                        }\n                        timelines.push(timeline);\n                    }\n                }\n            }\n        }\n        // Bone timelines.\n        if (map.bones) {\n            for (let boneName in map.bones) {\n                let boneMap = map.bones[boneName];\n                let bone = skeletonData.findBone(boneName);\n                if (!bone)\n                    throw new Error(\"Bone not found: \" + boneName);\n                let boneIndex = bone.index;\n                for (let timelineName in boneMap) {\n                    let timelineMap = boneMap[timelineName];\n                    let frames = timelineMap.length;\n                    if (frames == 0)\n                        continue;\n                    if (timelineName === \"rotate\") {\n                        timelines.push(readTimeline1(timelineMap, new RotateTimeline(frames, frames, boneIndex), 0, 1));\n                    }\n                    else if (timelineName === \"translate\") {\n                        let timeline = new TranslateTimeline(frames, frames << 1, boneIndex);\n                        timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 0, scale));\n                    }\n                    else if (timelineName === \"translatex\") {\n                        let timeline = new TranslateXTimeline(frames, frames, boneIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, scale));\n                    }\n                    else if (timelineName === \"translatey\") {\n                        let timeline = new TranslateYTimeline(frames, frames, boneIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, scale));\n                    }\n                    else if (timelineName === \"scale\") {\n                        let timeline = new ScaleTimeline(frames, frames << 1, boneIndex);\n                        timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 1, 1));\n                    }\n                    else if (timelineName === \"scalex\") {\n                        let timeline = new ScaleXTimeline(frames, frames, boneIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 1, 1));\n                    }\n                    else if (timelineName === \"scaley\") {\n                        let timeline = new ScaleYTimeline(frames, frames, boneIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 1, 1));\n                    }\n                    else if (timelineName === \"shear\") {\n                        let timeline = new ShearTimeline(frames, frames << 1, boneIndex);\n                        timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 0, 1));\n                    }\n                    else if (timelineName === \"shearx\") {\n                        let timeline = new ShearXTimeline(frames, frames, boneIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, 1));\n                    }\n                    else if (timelineName === \"sheary\") {\n                        let timeline = new ShearYTimeline(frames, frames, boneIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, 1));\n                    }\n                    else if (timelineName === \"inherit\") {\n                        let timeline = new InheritTimeline(frames, bone.index);\n                        for (let frame = 0; frame < timelineMap.length; frame++) {\n                            let aFrame = timelineMap[frame];\n                            timeline.setFrame(frame, getValue(aFrame, \"time\", 0), Utils.enumValue(Inherit, getValue(aFrame, \"inherit\", \"Normal\")));\n                        }\n                        timelines.push(timeline);\n                    }\n                }\n            }\n        }\n        // IK constraint timelines.\n        if (map.ik) {\n            for (let constraintName in map.ik) {\n                let constraintMap = map.ik[constraintName];\n                let keyMap = constraintMap[0];\n                if (!keyMap)\n                    continue;\n                let constraint = skeletonData.findIkConstraint(constraintName);\n                if (!constraint)\n                    throw new Error(\"IK Constraint not found: \" + constraintName);\n                let constraintIndex = skeletonData.ikConstraints.indexOf(constraint);\n                let timeline = new IkConstraintTimeline(constraintMap.length, constraintMap.length << 1, constraintIndex);\n                let time = getValue(keyMap, \"time\", 0);\n                let mix = getValue(keyMap, \"mix\", 1);\n                let softness = getValue(keyMap, \"softness\", 0) * scale;\n                for (let frame = 0, bezier = 0;; frame++) {\n                    timeline.setFrame(frame, time, mix, softness, getValue(keyMap, \"bendPositive\", true) ? 1 : -1, getValue(keyMap, \"compress\", false), getValue(keyMap, \"stretch\", false));\n                    let nextMap = constraintMap[frame + 1];\n                    if (!nextMap) {\n                        timeline.shrink(bezier);\n                        break;\n                    }\n                    let time2 = getValue(nextMap, \"time\", 0);\n                    let mix2 = getValue(nextMap, \"mix\", 1);\n                    let softness2 = getValue(nextMap, \"softness\", 0) * scale;\n                    let curve = keyMap.curve;\n                    if (curve) {\n                        bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mix, mix2, 1);\n                        bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, softness, softness2, scale);\n                    }\n                    time = time2;\n                    mix = mix2;\n                    softness = softness2;\n                    keyMap = nextMap;\n                }\n                timelines.push(timeline);\n            }\n        }\n        // Transform constraint timelines.\n        if (map.transform) {\n            for (let constraintName in map.transform) {\n                let timelineMap = map.transform[constraintName];\n                let keyMap = timelineMap[0];\n                if (!keyMap)\n                    continue;\n                let constraint = skeletonData.findTransformConstraint(constraintName);\n                if (!constraint)\n                    throw new Error(\"Transform constraint not found: \" + constraintName);\n                let constraintIndex = skeletonData.transformConstraints.indexOf(constraint);\n                let timeline = new TransformConstraintTimeline(timelineMap.length, timelineMap.length * 6, constraintIndex);\n                let time = getValue(keyMap, \"time\", 0);\n                let mixRotate = getValue(keyMap, \"mixRotate\", 1);\n                let mixX = getValue(keyMap, \"mixX\", 1);\n                let mixY = getValue(keyMap, \"mixY\", mixX);\n                let mixScaleX = getValue(keyMap, \"mixScaleX\", 1);\n                let mixScaleY = getValue(keyMap, \"mixScaleY\", mixScaleX);\n                let mixShearY = getValue(keyMap, \"mixShearY\", 1);\n                for (let frame = 0, bezier = 0;; frame++) {\n                    timeline.setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY);\n                    let nextMap = timelineMap[frame + 1];\n                    if (!nextMap) {\n                        timeline.shrink(bezier);\n                        break;\n                    }\n                    let time2 = getValue(nextMap, \"time\", 0);\n                    let mixRotate2 = getValue(nextMap, \"mixRotate\", 1);\n                    let mixX2 = getValue(nextMap, \"mixX\", 1);\n                    let mixY2 = getValue(nextMap, \"mixY\", mixX2);\n                    let mixScaleX2 = getValue(nextMap, \"mixScaleX\", 1);\n                    let mixScaleY2 = getValue(nextMap, \"mixScaleY\", mixScaleX2);\n                    let mixShearY2 = getValue(nextMap, \"mixShearY\", 1);\n                    let curve = keyMap.curve;\n                    if (curve) {\n                        bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);\n                        bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);\n                        bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);\n                        bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, mixScaleX, mixScaleX2, 1);\n                        bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, mixScaleY, mixScaleY2, 1);\n                        bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, mixShearY, mixShearY2, 1);\n                    }\n                    time = time2;\n                    mixRotate = mixRotate2;\n                    mixX = mixX2;\n                    mixY = mixY2;\n                    mixScaleX = mixScaleX2;\n                    mixScaleY = mixScaleY2;\n                    mixScaleX = mixScaleX2;\n                    keyMap = nextMap;\n                }\n                timelines.push(timeline);\n            }\n        }\n        // Path constraint timelines.\n        if (map.path) {\n            for (let constraintName in map.path) {\n                let constraintMap = map.path[constraintName];\n                let constraint = skeletonData.findPathConstraint(constraintName);\n                if (!constraint)\n                    throw new Error(\"Path constraint not found: \" + constraintName);\n                let constraintIndex = skeletonData.pathConstraints.indexOf(constraint);\n                for (let timelineName in constraintMap) {\n                    let timelineMap = constraintMap[timelineName];\n                    let keyMap = timelineMap[0];\n                    if (!keyMap)\n                        continue;\n                    let frames = timelineMap.length;\n                    if (timelineName === \"position\") {\n                        let timeline = new PathConstraintPositionTimeline(frames, frames, constraintIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, constraint.positionMode == PositionMode.Fixed ? scale : 1));\n                    }\n                    else if (timelineName === \"spacing\") {\n                        let timeline = new PathConstraintSpacingTimeline(frames, frames, constraintIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, constraint.spacingMode == SpacingMode.Length || constraint.spacingMode == SpacingMode.Fixed ? scale : 1));\n                    }\n                    else if (timelineName === \"mix\") {\n                        let timeline = new PathConstraintMixTimeline(frames, frames * 3, constraintIndex);\n                        let time = getValue(keyMap, \"time\", 0);\n                        let mixRotate = getValue(keyMap, \"mixRotate\", 1);\n                        let mixX = getValue(keyMap, \"mixX\", 1);\n                        let mixY = getValue(keyMap, \"mixY\", mixX);\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, mixRotate, mixX, mixY);\n                            let nextMap = timelineMap[frame + 1];\n                            if (!nextMap) {\n                                timeline.shrink(bezier);\n                                break;\n                            }\n                            let time2 = getValue(nextMap, \"time\", 0);\n                            let mixRotate2 = getValue(nextMap, \"mixRotate\", 1);\n                            let mixX2 = getValue(nextMap, \"mixX\", 1);\n                            let mixY2 = getValue(nextMap, \"mixY\", mixX2);\n                            let curve = keyMap.curve;\n                            if (curve) {\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);\n                            }\n                            time = time2;\n                            mixRotate = mixRotate2;\n                            mixX = mixX2;\n                            mixY = mixY2;\n                            keyMap = nextMap;\n                        }\n                        timelines.push(timeline);\n                    }\n                }\n            }\n        }\n        // Physics constraint timelines.\n        if (map.physics) {\n            for (let constraintName in map.physics) {\n                let constraintMap = map.physics[constraintName];\n                let constraintIndex = -1;\n                if (constraintName.length > 0) {\n                    let constraint = skeletonData.findPhysicsConstraint(constraintName);\n                    if (!constraint)\n                        throw new Error(\"Physics constraint not found: \" + constraintName);\n                    constraintIndex = skeletonData.physicsConstraints.indexOf(constraint);\n                }\n                for (let timelineName in constraintMap) {\n                    let timelineMap = constraintMap[timelineName];\n                    let keyMap = timelineMap[0];\n                    if (!keyMap)\n                        continue;\n                    let frames = timelineMap.length;\n                    if (timelineName == \"reset\") {\n                        const timeline = new PhysicsConstraintResetTimeline(frames, constraintIndex);\n                        for (let frame = 0; keyMap != null; keyMap = timelineMap[frame + 1], frame++)\n                            timeline.setFrame(frame, getValue(keyMap, \"time\", 0));\n                        timelines.push(timeline);\n                        continue;\n                    }\n                    let timeline;\n                    if (timelineName == \"inertia\")\n                        timeline = new PhysicsConstraintInertiaTimeline(frames, frames, constraintIndex);\n                    else if (timelineName == \"strength\")\n                        timeline = new PhysicsConstraintStrengthTimeline(frames, frames, constraintIndex);\n                    else if (timelineName == \"damping\")\n                        timeline = new PhysicsConstraintDampingTimeline(frames, frames, constraintIndex);\n                    else if (timelineName == \"mass\")\n                        timeline = new PhysicsConstraintMassTimeline(frames, frames, constraintIndex);\n                    else if (timelineName == \"wind\")\n                        timeline = new PhysicsConstraintWindTimeline(frames, frames, constraintIndex);\n                    else if (timelineName == \"gravity\")\n                        timeline = new PhysicsConstraintGravityTimeline(frames, frames, constraintIndex);\n                    else if (timelineName == \"mix\") //\n                        timeline = new PhysicsConstraintMixTimeline(frames, frames, constraintIndex);\n                    else\n                        continue;\n                    timelines.push(readTimeline1(timelineMap, timeline, 0, 1));\n                }\n            }\n        }\n        // Attachment timelines.\n        if (map.attachments) {\n            for (let attachmentsName in map.attachments) {\n                let attachmentsMap = map.attachments[attachmentsName];\n                let skin = skeletonData.findSkin(attachmentsName);\n                if (!skin)\n                    throw new Error(\"Skin not found: \" + attachmentsName);\n                for (let slotMapName in attachmentsMap) {\n                    let slotMap = attachmentsMap[slotMapName];\n                    let slot = skeletonData.findSlot(slotMapName);\n                    if (!slot)\n                        throw new Error(\"Slot not found: \" + slotMapName);\n                    let slotIndex = slot.index;\n                    for (let attachmentMapName in slotMap) {\n                        let attachmentMap = slotMap[attachmentMapName];\n                        let attachment = skin.getAttachment(slotIndex, attachmentMapName);\n                        for (let timelineMapName in attachmentMap) {\n                            let timelineMap = attachmentMap[timelineMapName];\n                            let keyMap = timelineMap[0];\n                            if (!keyMap)\n                                continue;\n                            if (timelineMapName == \"deform\") {\n                                let weighted = attachment.bones;\n                                let vertices = attachment.vertices;\n                                let deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\n                                let timeline = new DeformTimeline(timelineMap.length, timelineMap.length, slotIndex, attachment);\n                                let time = getValue(keyMap, \"time\", 0);\n                                for (let frame = 0, bezier = 0;; frame++) {\n                                    let deform;\n                                    let verticesValue = getValue(keyMap, \"vertices\", null);\n                                    if (!verticesValue)\n                                        deform = weighted ? Utils.newFloatArray(deformLength) : vertices;\n                                    else {\n                                        deform = Utils.newFloatArray(deformLength);\n                                        let start = getValue(keyMap, \"offset\", 0);\n                                        Utils.arrayCopy(verticesValue, 0, deform, start, verticesValue.length);\n                                        if (scale != 1) {\n                                            for (let i = start, n = i + verticesValue.length; i < n; i++)\n                                                deform[i] *= scale;\n                                        }\n                                        if (!weighted) {\n                                            for (let i = 0; i < deformLength; i++)\n                                                deform[i] += vertices[i];\n                                        }\n                                    }\n                                    timeline.setFrame(frame, time, deform);\n                                    let nextMap = timelineMap[frame + 1];\n                                    if (!nextMap) {\n                                        timeline.shrink(bezier);\n                                        break;\n                                    }\n                                    let time2 = getValue(nextMap, \"time\", 0);\n                                    let curve = keyMap.curve;\n                                    if (curve)\n                                        bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, 0, 1, 1);\n                                    time = time2;\n                                    keyMap = nextMap;\n                                }\n                                timelines.push(timeline);\n                            }\n                            else if (timelineMapName == \"sequence\") {\n                                let timeline = new SequenceTimeline(timelineMap.length, slotIndex, attachment);\n                                let lastDelay = 0;\n                                for (let frame = 0; frame < timelineMap.length; frame++) {\n                                    let delay = getValue(keyMap, \"delay\", lastDelay);\n                                    let time = getValue(keyMap, \"time\", 0);\n                                    let mode = SequenceMode[getValue(keyMap, \"mode\", \"hold\")];\n                                    let index = getValue(keyMap, \"index\", 0);\n                                    timeline.setFrame(frame, time, mode, index, delay);\n                                    lastDelay = delay;\n                                    keyMap = timelineMap[frame + 1];\n                                }\n                                timelines.push(timeline);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // Draw order timelines.\n        if (map.drawOrder) {\n            let timeline = new DrawOrderTimeline(map.drawOrder.length);\n            let slotCount = skeletonData.slots.length;\n            let frame = 0;\n            for (let i = 0; i < map.drawOrder.length; i++, frame++) {\n                let drawOrderMap = map.drawOrder[i];\n                let drawOrder = null;\n                let offsets = getValue(drawOrderMap, \"offsets\", null);\n                if (offsets) {\n                    drawOrder = Utils.newArray(slotCount, -1);\n                    let unchanged = Utils.newArray(slotCount - offsets.length, 0);\n                    let originalIndex = 0, unchangedIndex = 0;\n                    for (let ii = 0; ii < offsets.length; ii++) {\n                        let offsetMap = offsets[ii];\n                        let slot = skeletonData.findSlot(offsetMap.slot);\n                        if (!slot)\n                            throw new Error(\"Slot not found: \" + slot);\n                        let slotIndex = slot.index;\n                        // Collect unchanged items.\n                        while (originalIndex != slotIndex)\n                            unchanged[unchangedIndex++] = originalIndex++;\n                        // Set changed items.\n                        drawOrder[originalIndex + offsetMap.offset] = originalIndex++;\n                    }\n                    // Collect remaining unchanged items.\n                    while (originalIndex < slotCount)\n                        unchanged[unchangedIndex++] = originalIndex++;\n                    // Fill in unchanged items.\n                    for (let ii = slotCount - 1; ii >= 0; ii--)\n                        if (drawOrder[ii] == -1)\n                            drawOrder[ii] = unchanged[--unchangedIndex];\n                }\n                timeline.setFrame(frame, getValue(drawOrderMap, \"time\", 0), drawOrder);\n            }\n            timelines.push(timeline);\n        }\n        // Event timelines.\n        if (map.events) {\n            let timeline = new EventTimeline(map.events.length);\n            let frame = 0;\n            for (let i = 0; i < map.events.length; i++, frame++) {\n                let eventMap = map.events[i];\n                let eventData = skeletonData.findEvent(eventMap.name);\n                if (!eventData)\n                    throw new Error(\"Event not found: \" + eventMap.name);\n                let event = new Event(Utils.toSinglePrecision(getValue(eventMap, \"time\", 0)), eventData);\n                event.intValue = getValue(eventMap, \"int\", eventData.intValue);\n                event.floatValue = getValue(eventMap, \"float\", eventData.floatValue);\n                event.stringValue = getValue(eventMap, \"string\", eventData.stringValue);\n                if (event.data.audioPath) {\n                    event.volume = getValue(eventMap, \"volume\", 1);\n                    event.balance = getValue(eventMap, \"balance\", 0);\n                }\n                timeline.setFrame(frame, event);\n            }\n            timelines.push(timeline);\n        }\n        let duration = 0;\n        for (let i = 0, n = timelines.length; i < n; i++)\n            duration = Math.max(duration, timelines[i].getDuration());\n        skeletonData.animations.push(new Animation(name, timelines, duration));\n    }\n}\nclass LinkedMesh {\n    parent;\n    skin;\n    slotIndex;\n    mesh;\n    inheritTimeline;\n    constructor(mesh, skin, slotIndex, parent, inheritDeform) {\n        this.mesh = mesh;\n        this.skin = skin;\n        this.slotIndex = slotIndex;\n        this.parent = parent;\n        this.inheritTimeline = inheritDeform;\n    }\n}\nfunction readTimeline1(keys, timeline, defaultValue, scale) {\n    let keyMap = keys[0];\n    let time = getValue(keyMap, \"time\", 0);\n    let value = getValue(keyMap, \"value\", defaultValue) * scale;\n    let bezier = 0;\n    for (let frame = 0;; frame++) {\n        timeline.setFrame(frame, time, value);\n        let nextMap = keys[frame + 1];\n        if (!nextMap) {\n            timeline.shrink(bezier);\n            return timeline;\n        }\n        let time2 = getValue(nextMap, \"time\", 0);\n        let value2 = getValue(nextMap, \"value\", defaultValue) * scale;\n        if (keyMap.curve)\n            bezier = readCurve(keyMap.curve, timeline, bezier, frame, 0, time, time2, value, value2, scale);\n        time = time2;\n        value = value2;\n        keyMap = nextMap;\n    }\n}\nfunction readTimeline2(keys, timeline, name1, name2, defaultValue, scale) {\n    let keyMap = keys[0];\n    let time = getValue(keyMap, \"time\", 0);\n    let value1 = getValue(keyMap, name1, defaultValue) * scale;\n    let value2 = getValue(keyMap, name2, defaultValue) * scale;\n    let bezier = 0;\n    for (let frame = 0;; frame++) {\n        timeline.setFrame(frame, time, value1, value2);\n        let nextMap = keys[frame + 1];\n        if (!nextMap) {\n            timeline.shrink(bezier);\n            return timeline;\n        }\n        let time2 = getValue(nextMap, \"time\", 0);\n        let nvalue1 = getValue(nextMap, name1, defaultValue) * scale;\n        let nvalue2 = getValue(nextMap, name2, defaultValue) * scale;\n        let curve = keyMap.curve;\n        if (curve) {\n            bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, value1, nvalue1, scale);\n            bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, value2, nvalue2, scale);\n        }\n        time = time2;\n        value1 = nvalue1;\n        value2 = nvalue2;\n        keyMap = nextMap;\n    }\n}\nfunction readCurve(curve, timeline, bezier, frame, value, time1, time2, value1, value2, scale) {\n    if (curve == \"stepped\") {\n        timeline.setStepped(frame);\n        return bezier;\n    }\n    let i = value << 2;\n    let cx1 = curve[i];\n    let cy1 = curve[i + 1] * scale;\n    let cx2 = curve[i + 2];\n    let cy2 = curve[i + 3] * scale;\n    timeline.setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2);\n    return bezier + 1;\n}\nfunction getValue(map, property, defaultValue) {\n    return map[property] !== undefined ? map[property] : defaultValue;\n}\n//# sourceMappingURL=data:application/json;base64,", "/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n(() => {\n    if (typeof Math.fround === \"undefined\") {\n        Math.fround = (function (array) {\n            return function (x) {\n                return array[0] = x, array[0];\n            };\n        })(new Float32Array(1));\n    }\n})();\nexport {};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9seWZpbGxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3BvbHlmaWxscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytFQTJCK0U7QUFFL0UsQ0FBQyxHQUFHLEVBQUU7SUFDTCxJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxXQUFXLEVBQUUsQ0FBQztRQUN4QyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsVUFBVSxLQUFLO1lBQzdCLE9BQU8sVUFBVSxDQUFTO2dCQUN6QixPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLENBQUMsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekIsQ0FBQztBQUNGLENBQUMsQ0FBQyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBTcGluZSBSdW50aW1lcyBMaWNlbnNlIEFncmVlbWVudFxuICogTGFzdCB1cGRhdGVkIEp1bHkgMjgsIDIwMjMuIFJlcGxhY2VzIGFsbCBwcmlvciB2ZXJzaW9ucy5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAyMywgRXNvdGVyaWMgU29mdHdhcmUgTExDXG4gKlxuICogSW50ZWdyYXRpb24gb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3Igb3RoZXJ3aXNlIGNyZWF0aW5nXG4gKiBkZXJpdmF0aXZlIHdvcmtzIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpcyBwZXJtaXR0ZWQgdW5kZXIgdGhlIHRlcm1zIGFuZFxuICogY29uZGl0aW9ucyBvZiBTZWN0aW9uIDIgb2YgdGhlIFNwaW5lIEVkaXRvciBMaWNlbnNlIEFncmVlbWVudDpcbiAqIGh0dHA6Ly9lc290ZXJpY3NvZnR3YXJlLmNvbS9zcGluZS1lZGl0b3ItbGljZW5zZVxuICpcbiAqIE90aGVyd2lzZSwgaXQgaXMgcGVybWl0dGVkIHRvIGludGVncmF0ZSB0aGUgU3BpbmUgUnVudGltZXMgaW50byBzb2Z0d2FyZSBvclxuICogb3RoZXJ3aXNlIGNyZWF0ZSBkZXJpdmF0aXZlIHdvcmtzIG9mIHRoZSBTcGluZSBSdW50aW1lcyAoY29sbGVjdGl2ZWx5LFxuICogXCJQcm9kdWN0c1wiKSwgcHJvdmlkZWQgdGhhdCBlYWNoIHVzZXIgb2YgdGhlIFByb2R1Y3RzIG11c3Qgb2J0YWluIHRoZWlyIG93blxuICogU3BpbmUgRWRpdG9yIGxpY2Vuc2UgYW5kIHJlZGlzdHJpYnV0aW9uIG9mIHRoZSBQcm9kdWN0cyBpbiBhbnkgZm9ybSBtdXN0XG4gKiBpbmNsdWRlIHRoaXMgbGljZW5zZSBhbmQgY29weXJpZ2h0IG5vdGljZS5cbiAqXG4gKiBUSEUgU1BJTkUgUlVOVElNRVMgQVJFIFBST1ZJREVEIEJZIEVTT1RFUklDIFNPRlRXQVJFIExMQyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgRVNPVEVSSUMgU09GVFdBUkUgTExDIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTLFxuICogQlVTSU5FU1MgSU5URVJSVVBUSU9OLCBPUiBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUykgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRIRVxuICogU1BJTkUgUlVOVElNRVMsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbigoKSA9PiB7XG5cdGlmICh0eXBlb2YgTWF0aC5mcm91bmQgPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRNYXRoLmZyb3VuZCA9IChmdW5jdGlvbiAoYXJyYXkpIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoeDogbnVtYmVyKSB7XG5cdFx0XHRcdHJldHVybiBhcnJheVswXSA9IHgsIGFycmF5WzBdO1xuXHRcdFx0fTtcblx0XHR9KShuZXcgRmxvYXQzMkFycmF5KDEpKTtcblx0fVxufSkoKTtcblxuZXhwb3J0IHsgfVxuIl19", "/** ****************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { Texture as PixiTexture } from 'pixi.js';\nimport { BlendMode, Texture, TextureFilter, TextureWrap } from '@esotericsoftware/spine-core';\n\nimport type { BLEND_MODES, SCALE_MODE, TextureSource, WRAP_MODE } from 'pixi.js';\n\nexport class SpineTexture extends Texture {\n\tprivate static readonly textureMap: Map<TextureSource, SpineTexture> = new Map<TextureSource, SpineTexture>();\n\n\tpublic static from (texture: TextureSource): SpineTexture {\n\t\tif (SpineTexture.textureMap.has(texture)) {\n\t\t\treturn SpineTexture.textureMap.get(texture) as SpineTexture;\n\t\t}\n\n\t\treturn new SpineTexture(texture);\n\t}\n\n\tpublic readonly texture: PixiTexture;\n\n\tprivate constructor (image: TextureSource) {\n\t\t// Todo: maybe add error handling if you feed a video texture to spine?\n\t\tsuper(image.resource);\n\t\tthis.texture = PixiTexture.from(image);\n\t}\n\n\tpublic setFilters (minFilter: TextureFilter, magFilter: TextureFilter): void {\n\t\tconst style = this.texture.source.style;\n\n\t\tstyle.minFilter = SpineTexture.toPixiTextureFilter(minFilter);\n\t\tstyle.magFilter = SpineTexture.toPixiTextureFilter(magFilter);\n\t\tthis.texture.source.autoGenerateMipmaps = SpineTexture.toPixiMipMap(minFilter);\n\t\tthis.texture.source.updateMipmaps();\n\t}\n\n\tpublic setWraps (uWrap: TextureWrap, vWrap: TextureWrap): void {\n\t\tconst style = this.texture.source.style;\n\n\t\tstyle.addressModeU = SpineTexture.toPixiTextureWrap(uWrap);\n\t\tstyle.addressModeV = SpineTexture.toPixiTextureWrap(vWrap);\n\t}\n\n\tpublic dispose (): void {\n\t\t// I am not entirely sure about this...\n\t\tthis.texture.destroy();\n\t}\n\n\tprivate static toPixiMipMap (filter: TextureFilter): boolean {\n\t\tswitch (filter) {\n\t\t\tcase TextureFilter.Nearest:\n\t\t\tcase TextureFilter.Linear:\n\t\t\t\treturn false;\n\n\t\t\tcase TextureFilter.MipMapNearestLinear:\n\t\t\tcase TextureFilter.MipMapNearestNearest:\n\t\t\tcase TextureFilter.MipMapLinearLinear: // TextureFilter.MipMapLinearLinear == TextureFilter.MipMap\n\t\t\tcase TextureFilter.MipMapLinearNearest:\n\t\t\t\treturn true;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown texture filter: ${String(filter)}`);\n\t\t}\n\t}\n\n\tprivate static toPixiTextureFilter (filter: TextureFilter): SCALE_MODE {\n\t\tswitch (filter) {\n\t\t\tcase TextureFilter.Nearest:\n\t\t\tcase TextureFilter.MipMapNearestLinear:\n\t\t\tcase TextureFilter.MipMapNearestNearest:\n\t\t\t\treturn 'nearest';\n\n\t\t\tcase TextureFilter.Linear:\n\t\t\tcase TextureFilter.MipMapLinearLinear: // TextureFilter.MipMapLinearLinear == TextureFilter.MipMap\n\t\t\tcase TextureFilter.MipMapLinearNearest:\n\t\t\t\treturn 'linear';\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown texture filter: ${String(filter)}`);\n\t\t}\n\t}\n\n\tprivate static toPixiTextureWrap (wrap: TextureWrap): WRAP_MODE {\n\t\tswitch (wrap) {\n\t\t\tcase TextureWrap.ClampToEdge:\n\t\t\t\treturn 'clamp-to-edge';\n\n\t\t\tcase TextureWrap.MirroredRepeat:\n\t\t\t\treturn 'mirror-repeat';\n\n\t\t\tcase TextureWrap.Repeat:\n\t\t\t\treturn 'repeat';\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown texture wrap: ${String(wrap)}`);\n\t\t}\n\t}\n\n\tpublic static toPixiBlending (blend: BlendMode): BLEND_MODES {\n\t\tswitch (blend) {\n\t\t\tcase BlendMode.Normal:\n\t\t\t\treturn 'normal';\n\n\t\t\tcase BlendMode.Additive:\n\t\t\t\treturn 'add';\n\n\t\t\tcase BlendMode.Multiply:\n\t\t\t\treturn 'multiply';\n\n\t\t\tcase BlendMode.Screen:\n\t\t\t\treturn 'screen';\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown blendMode: ${String(blend)}`);\n\t\t}\n\t}\n}\n", "/** ****************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { TextureAtlas } from '@esotericsoftware/spine-core';\nimport {\n  checkExtension,\n  DOMAdapter,\n  ExtensionType,\n  LoaderParserPriority,\n  path,\n  Resolver,\n  TextureSource,\n} from 'pixi.js';\nimport { SpineTexture } from '../SpineTexture.js';\n\nimport type { AssetExtension, Loader, ResolvedAsset, Texture, UnresolvedAsset } from 'pixi.js';\n\ntype RawAtlas = string;\n\nexport const spineTextureAtlasLoader: AssetExtension<RawAtlas | TextureAtlas, ISpineAtlasMetadata> = {\n  extension: ExtensionType.Asset,\n\n  resolver: {\n    test: (value: string): boolean => checkExtension(value, '.atlas'),\n    parse: (value: string): UnresolvedAsset => {\n      const split = value.split('.');\n\n      return {\n        resolution: parseFloat(Resolver.RETINA_PREFIX?.exec(value)?.[1] ?? '1'),\n        format: split[split.length - 2],\n        src: value,\n      };\n    },\n  },\n\n  loader: {\n    extension: {\n      type: ExtensionType.LoadParser,\n      priority: LoaderParserPriority.Normal,\n      name: 'spineTextureAtlasLoader',\n    },\n\n    test(url: string): boolean {\n      return checkExtension(url, '.atlas');\n    },\n\n    async load(url: string): Promise<RawAtlas> {\n      const response = await DOMAdapter.get().fetch(url);\n\n      const txt = await response.text();\n\n      return txt;\n    },\n\n    testParse(asset: unknown, options: ResolvedAsset): Promise<boolean> {\n      const isExtensionRight = checkExtension(options.src as string, '.atlas');\n      const isString = typeof asset === 'string';\n\n      return Promise.resolve(isExtensionRight && isString);\n    },\n\n    unload(atlas: TextureAtlas) {\n      atlas.dispose();\n    },\n\n    async parse(asset: RawAtlas, options: ResolvedAsset, loader: Loader): Promise<TextureAtlas> {\n      const metadata: ISpineAtlasMetadata = options.data || {};\n      let basePath = path.dirname(options.src as string);\n\n      if (basePath && basePath.lastIndexOf('/') !== basePath.length - 1) {\n        basePath += '/';\n      }\n\n      // Retval is going to be a texture atlas. However we need to wait for it's callback to resolve this promise.\n      const retval = new TextureAtlas(asset);\n\n      // If the user gave me only one texture, that one is assumed to be the \"first\" texture in the atlas\n      if (metadata.images instanceof TextureSource || typeof metadata.images === 'string') {\n        const pixiTexture = metadata.images;\n\n        metadata.images = {} as Record<string, TextureSource | string>;\n        metadata.images[retval.pages[0].name] = pixiTexture;\n      }\n\n      // we will wait for all promises for the textures at the same time at the end.\n      const textureLoadingPromises: Promise<any>[] = [];\n\n      // fill the pages\n      for (const page of retval.pages) {\n        const pageName = page.name;\n        const providedPage = metadata?.images ? metadata.images[pageName] : undefined;\n\n        if (providedPage instanceof TextureSource) {\n          page.setTexture(SpineTexture.from(providedPage));\n        } else {\n          // eslint-disable-next-line max-len\n          const url: string = providedPage ?? path.normalize([...basePath.split(path.sep), pageName].join(path.sep));\n\n          const assetsToLoadIn = {\n            src: url,\n            data: {\n              ...metadata.imageMetadata,\n              alphaMode: page.pma ? 'premultiplied-alpha' : 'premultiply-alpha-on-upload',\n            },\n          };\n\n          const pixiPromise = loader.load<Texture>(assetsToLoadIn).then((texture) => {\n            page.setTexture(SpineTexture.from(texture.source));\n          });\n\n          textureLoadingPromises.push(pixiPromise);\n        }\n      }\n\n      await Promise.all(textureLoadingPromises);\n\n      return retval;\n    },\n  },\n} as AssetExtension<RawAtlas | TextureAtlas, ISpineAtlasMetadata>;\n\n// extensions.add(spineTextureAtlasLoader);\n\nexport interface ISpineAtlasMetadata {\n  // If you are downloading an .atlas file, this metadata will go to the Texture loader\n  imageMetadata?: any;\n  // If you already have atlas pages loaded as pixi textures\n  // and want to use that to create the atlas, you can pass them here\n  images?: TextureSource | string | Record<string, TextureSource | string>;\n}\n", "/** ****************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport {\n  type AssetExtension,\n  checkExtension,\n  DOMAdapter,\n  ExtensionType,\n  LoaderParserPriority,\n  ResolvedAsset,\n} from 'pixi.js';\n\ntype SkeletonJsonAsset = any;\ntype SkeletonBinaryAsset = Uint8Array;\n\nfunction isJson(resource: any): resource is SkeletonJsonAsset {\n  return Object.prototype.hasOwnProperty.call(resource, 'bones');\n}\n\nfunction isBuffer(resource: any): resource is SkeletonBinaryAsset {\n  return resource instanceof Uint8Array;\n}\n\nexport const spineLoaderExtension: AssetExtension<SkeletonJsonAsset | SkeletonBinaryAsset> = {\n  extension: ExtensionType.Asset,\n\n  loader: {\n    extension: {\n      type: ExtensionType.LoadParser,\n      priority: LoaderParserPriority.Normal,\n      name: 'spineSkeletonLoader',\n    },\n\n    test(url) {\n      return checkExtension(url, '.skel');\n    },\n\n    async load(url: string): Promise<SkeletonBinaryAsset> {\n      const response = await DOMAdapter.get().fetch(url);\n\n      const buffer = new Uint8Array(await response.arrayBuffer());\n\n      return buffer;\n    },\n    testParse(asset: unknown, options: ResolvedAsset): Promise<boolean> {\n      const isJsonSpineModel = checkExtension(options.src!, '.json') && isJson(asset);\n      const isBinarySpineModel = checkExtension(options.src!, '.skel') && isBuffer(asset);\n\n      return Promise.resolve(isJsonSpineModel || isBinarySpineModel);\n    },\n  },\n} as AssetExtension<SkeletonJsonAsset | SkeletonBinaryAsset>;\n\n// extensions.add(spineLoaderExtension);\n", "/** ****************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport { AttachmentCacheData, Spine } from './Spine.js';\n\nimport type { Batch, Batcher, BLEND_MODES, DefaultBatchableMeshElement, Matrix, Texture, Topology } from 'pixi.js';\n\nexport class BatchableSpineSlot implements DefaultBatchableMeshElement {\n\tindexOffset = 0;\n\tattributeOffset = 0;\n\n\tindexSize!: number;\n\tattributeSize!: number;\n\n\tbatcherName = 'darkTint';\n\n\ttopology: Topology = 'triangle-list';\n\n\treadonly packAsQuad = false;\n\n\trenderable!: Spine;\n\n\tpositions!: Float32Array;\n\tindices!: number[] | Uint16Array;\n\tuvs!: Float32Array;\n\n\troundPixels!: 0 | 1;\n\tdata!: AttachmentCacheData;\n\tblendMode!: BLEND_MODES;\n\n\tdarkTint!: number;\n\n\ttexture!: Texture;\n\n\ttransform!: Matrix;\n\n\t// used internally by batcher specific. Stored for efficient updating.\n\t_textureId!: number;\n\t_attributeStart!: number;\n\t_indexStart!: number;\n\t_batcher!: Batcher;\n\t_batch!: Batch;\n\n\n\tget color () {\n\t\tconst slotColor = this.data.color;\n\n\t\tconst parentColor: number = this.renderable.groupColor;\n\t\tconst parentAlpha: number = this.renderable.groupAlpha;\n\t\tlet abgr: number;\n\n\t\tconst mixedA = (slotColor.a * parentAlpha) * 255;\n\n\t\tif (parentColor !== 0xFFFFFF) {\n\t\t\tconst parentB = (parentColor >> 16) & 0xFF;\n\t\t\tconst parentG = (parentColor >> 8) & 0xFF;\n\t\t\tconst parentR = parentColor & 0xFF;\n\n\t\t\tconst mixedR = (slotColor.r * parentR);\n\t\t\tconst mixedG = (slotColor.g * parentG);\n\t\t\tconst mixedB = (slotColor.b * parentB);\n\n\t\t\tabgr = ((mixedA) << 24) | (mixedB << 16) | (mixedG << 8) | mixedR;\n\t\t}\n\t\telse {\n\t\t\tabgr = ((mixedA) << 24) | ((slotColor.b * 255) << 16) | ((slotColor.g * 255) << 8) | (slotColor.r * 255);\n\t\t}\n\n\t\treturn abgr;\n\t}\n\n\tget darkColor () {\n\t\tconst darkColor = this.data.darkColor;\n\t\treturn ((darkColor.b * 255) << 16) | ((darkColor.g * 255) << 8) | (darkColor.r * 255);\n\t}\n\n\tget groupTransform () { return this.renderable.groupTransform; }\n\n\tsetData (\n\t\trenderable: Spine,\n\t\tdata: AttachmentCacheData,\n\t\tblendMode: BLEND_MODES,\n\t\troundPixels: 0 | 1) {\n\t\tthis.renderable = renderable;\n\t\tthis.transform = renderable.groupTransform;\n\t\tthis.data = data;\n\n\t\tif (data.clipped) {\n\t\t\tconst clippedData = data.clippedData;\n\n\t\t\tthis.indexSize = clippedData!.indicesCount;\n\t\t\tthis.attributeSize = clippedData!.vertexCount;\n\t\t\tthis.positions = clippedData!.vertices;\n\t\t\tthis.indices = clippedData!.indices;\n\t\t\tthis.uvs = clippedData!.uvs;\n\t\t}\n\t\telse {\n\t\t\tthis.indexSize = data.indices.length;\n\t\t\tthis.attributeSize = data.vertices.length / 2;\n\t\t\tthis.positions = data.vertices;\n\t\t\tthis.indices = data.indices;\n\t\t\tthis.uvs = data.uvs;\n\t\t}\n\n\t\tthis.texture = data.texture;\n\t\tthis.roundPixels = roundPixels;\n\n\t\tthis.blendMode = blendMode;\n\n\t\tthis.batcherName = data.darkTint ? 'darkTint' : 'default';\n\t}\n}\n", "/** ****************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport {\n\tcollectAllRenderables,\n\textensions, ExtensionType,\n\tInstructionSet,\n\ttype BLEND_MODES,\n\ttype Container,\n\ttype Renderer,\n\ttype RenderPipe,\n} from 'pixi.js';\nimport { BatchableSpineSlot } from './BatchableSpineSlot.js';\nimport { Spine } from './Spine.js';\nimport { MeshAttachment, RegionAttachment } from '@esotericsoftware/spine-core';\n\nconst spineBlendModeMap: Record<number, BLEND_MODES> = {\n\t0: 'normal',\n\t1: 'add',\n\t2: 'multiply',\n\t3: 'screen'\n};\n\ntype GpuSpineDataElement = { slotBatches: Record<string, BatchableSpineSlot> };\n\n// eslint-disable-next-line max-len\nexport class SpinePipe implements RenderPipe<Spine> {\n\t/** @ignore */\n\tstatic extension = {\n\t\ttype: [\n\t\t\tExtensionType.WebGLPipes,\n\t\t\tExtensionType.WebGPUPipes,\n\t\t\tExtensionType.CanvasPipes,\n\t\t],\n\t\tname: 'spine',\n\t} as const;\n\n\trenderer: Renderer;\n\n\tprivate gpuSpineData: Record<string, GpuSpineDataElement> = {};\n\tprivate readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n\tconstructor (renderer: Renderer) {\n\t\tthis.renderer = renderer;\n\t}\n\n\tvalidateRenderable (spine: Spine): boolean {\n\t\tspine._validateAndTransformAttachments();\n\n\t\t// if spine attachments have changed or destroyed, we need to rebuild the batch!\n\t\tif (spine.spineAttachmentsDirty) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// if the textures have changed, we need to rebuild the batch, but only if the texture is not already in the batch\n\t\telse if (spine.spineTexturesDirty) {\n\t\t\t// loop through and see if the textures have changed..\n\t\t\tconst drawOrder = spine.skeleton.drawOrder;\n\t\t\tconst gpuSpine = this.gpuSpineData[spine.uid];\n\n\t\t\tfor (let i = 0, n = drawOrder.length; i < n; i++) {\n\t\t\t\tconst slot = drawOrder[i];\n\t\t\t\tconst attachment = slot.getAttachment();\n\n\t\t\t\tif (attachment instanceof RegionAttachment || attachment instanceof MeshAttachment) {\n\t\t\t\t\tconst cacheData = spine._getCachedData(slot, attachment);\n\t\t\t\t\tconst batchableSpineSlot = gpuSpine.slotBatches[cacheData.id];\n\n\t\t\t\t\tconst texture = cacheData.texture;\n\n\t\t\t\t\tif (texture !== batchableSpineSlot.texture) {\n\t\t\t\t\t\tif (!batchableSpineSlot._batcher.checkAndUpdateTexture(batchableSpineSlot, texture)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\taddRenderable (spine: Spine, instructionSet: InstructionSet) {\n\t\tconst gpuSpine = this._getSpineData(spine);\n\n\t\tconst batcher = this.renderer.renderPipes.batch;\n\n\t\tconst drawOrder = spine.skeleton.drawOrder;\n\n\t\tconst roundPixels = (this.renderer._roundPixels | spine._roundPixels) as 0 | 1;\n\n\t\tspine._validateAndTransformAttachments();\n\n\t\tfor (let i = 0, n = drawOrder.length; i < n; i++) {\n\t\t\tconst slot = drawOrder[i];\n\t\t\tconst attachment = slot.getAttachment();\n\t\t\tconst blendMode = spineBlendModeMap[slot.data.blendMode];\n\n\t\t\tif (attachment instanceof RegionAttachment || attachment instanceof MeshAttachment) {\n\t\t\t\tconst cacheData = spine._getCachedData(slot, attachment);\n\t\t\t\tconst batchableSpineSlot = gpuSpine.slotBatches[cacheData.id] ||= new BatchableSpineSlot();\n\n\t\t\t\tbatchableSpineSlot.setData(\n\t\t\t\t\tspine,\n\t\t\t\t\tcacheData,\n\t\t\t\t\tblendMode,\n\t\t\t\t\troundPixels\n\t\t\t\t);\n\n\t\t\t\tif (!cacheData.skipRender) {\n\t\t\t\t\tbatcher.addToBatch(batchableSpineSlot, instructionSet);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst containerAttachment = spine._slotsObject[slot.data.name];\n\n\t\t\tif (containerAttachment) {\n\t\t\t\tconst container = containerAttachment.container;\n\n\t\t\t\tcontainer.includeInBuild = true;\n\t\t\t\tcollectAllRenderables(container, instructionSet, this.renderer);\n\t\t\t\tcontainer.includeInBuild = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateRenderable (spine: Spine) {\n\t\tconst gpuSpine = this.gpuSpineData[spine.uid];\n\n\t\tspine._validateAndTransformAttachments();\n\n\t\tconst drawOrder = spine.skeleton.drawOrder;\n\n\t\tfor (let i = 0, n = drawOrder.length; i < n; i++) {\n\t\t\tconst slot = drawOrder[i];\n\t\t\tconst attachment = slot.getAttachment();\n\n\t\t\tif (attachment instanceof RegionAttachment || attachment instanceof MeshAttachment) {\n\t\t\t\tconst cacheData = spine._getCachedData(slot, attachment);\n\n\t\t\t\tif (!cacheData.skipRender) {\n\t\t\t\t\tconst batchableSpineSlot = gpuSpine.slotBatches[spine._getCachedData(slot, attachment).id];\n\n\t\t\t\t\tbatchableSpineSlot._batcher?.updateElement(batchableSpineSlot);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdestroyRenderable (spine: Spine) {\n\t\tthis.gpuSpineData[spine.uid] = null as any;\n\t\tspine.off('destroyed', this._destroyRenderableBound);\n\t}\n\n\tdestroy () {\n\t\tthis.gpuSpineData = null as any;\n\t\tthis.renderer = null as any;\n\t}\n\n\tprivate _getSpineData (spine: Spine): GpuSpineDataElement {\n\t\treturn this.gpuSpineData[spine.uid] || this._initMeshData(spine);\n\t}\n\n\tprivate _initMeshData (spine: Spine): GpuSpineDataElement {\n\t\tthis.gpuSpineData[spine.uid] = { slotBatches: {} };\n\t\tspine.on('destroyed', this._destroyRenderableBound);\n\t\treturn this.gpuSpineData[spine.uid];\n\t}\n}\n\nextensions.add(SpinePipe);\n", "/** ****************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport {\n  AnimationState,\n  AnimationStateData,\n  AtlasAttachmentLoader,\n  Attachment,\n  Bone,\n  ClippingAttachment,\n  Color,\n  MeshAttachment,\n  Physics,\n  Pool,\n  RegionAttachment,\n  Skeleton,\n  SkeletonBinary,\n  SkeletonBounds,\n  SkeletonClipping,\n  SkeletonData,\n  SkeletonJson,\n  Slot,\n  type TextureAtlas,\n  TrackEntry,\n  Vector2,\n} from '@esotericsoftware/spine-core';\nimport {\n  Assets,\n  Bounds,\n  Cache,\n  Container,\n  ContainerOptions,\n  DEG_TO_RAD,\n  DestroyOptions,\n  fastCopy,\n  Graphics,\n  PointData,\n  Texture,\n  Ticker,\n  ViewContainer,\n} from 'pixi.js';\nimport { ISpineDebugRenderer } from './SpineDebugRenderer.js';\n\n/**\n * Options to create a {@link Spine} using {@link Spine.from}.\n */\nexport interface SpineFromOptions {\n  /** the asset name for the skeleton `.skel` or `.json` file previously loaded into the Assets */\n  skeleton: string;\n\n  /** the asset name for the atlas file previously loaded into the Assets */\n  atlas: string;\n\n  /**  The value passed to the skeleton reader. If omitted, 1 is passed. See {@link SkeletonBinary.scale} for details. */\n  scale?: number;\n\n  /**  Set the {@link Spine.autoUpdate} value. If omitted, it is set to `true`. */\n  autoUpdate?: boolean;\n\n  /**\n   * If `true`, use the dark tint renderer to render the skeleton\n   * If `false`, use the default pixi renderer to render the skeleton\n   * If `undefined`, use the dark tint renderer if at least one slot has tint black\n   */\n  darkTint?: boolean;\n}\n\nconst vectorAux = new Vector2();\n\nSkeleton.yDown = true;\n\nconst clipper = new SkeletonClipping();\n\nexport interface SpineOptions extends ContainerOptions {\n  /** the {@link SkeletonData} used to instantiate the skeleton */\n  skeletonData: SkeletonData;\n\n  /**  See {@link SpineFromOptions.autoUpdate}. */\n  autoUpdate?: boolean;\n\n  /**  See {@link SpineFromOptions.darkTint}. */\n  darkTint?: boolean;\n}\n\n/**\n * AnimationStateListener {@link https://en.esotericsoftware.com/spine-api-reference#AnimationStateListener events} exposed for Pixi.\n */\nexport interface SpineEvents {\n  complete: [trackEntry: TrackEntry];\n  dispose: [trackEntry: TrackEntry];\n  end: [trackEntry: TrackEntry];\n  event: [trackEntry: TrackEntry, event: Event];\n  interrupt: [trackEntry: TrackEntry];\n  start: [trackEntry: TrackEntry];\n}\n\nexport interface AttachmentCacheData {\n  id: string;\n  clipped: boolean;\n  vertices: Float32Array;\n  uvs: Float32Array;\n  indices: number[];\n  color: Color;\n  darkColor: Color;\n  darkTint: boolean;\n  skipRender: boolean;\n  texture: Texture;\n  clippedData?: {\n    vertices: Float32Array;\n    uvs: Float32Array;\n    indices: Uint16Array;\n    vertexCount: number;\n    indicesCount: number;\n  };\n}\n\ninterface SlotsToClipping {\n  slot: Slot;\n  mask?: Graphics;\n  maskComputed?: boolean;\n  vertices: Array<number>;\n}\n\nconst maskPool = new Pool<Graphics>(() => new Graphics());\n\n/**\n * The class to instantiate a {@link Spine} game object in Pixi.\n * The static method {@link Spine.from} should be used to instantiate a Spine game object.\n */\nexport class Spine extends ViewContainer {\n  // Pixi properties\n  public batched = true;\n  public buildId = 0;\n  public override readonly renderPipeId = 'spine';\n  public _didSpineUpdate = false;\n\n  public beforeUpdateWorldTransforms: (object: Spine) => void = () => {\n    /** */\n  };\n  public afterUpdateWorldTransforms: (object: Spine) => void = () => {\n    /** */\n  };\n\n  // Spine properties\n  /** The skeleton for this Spine game object. */\n  public skeleton: Skeleton;\n  /** The animation state for this Spine game object. */\n  public state: AnimationState;\n  public skeletonBounds?: SkeletonBounds;\n\n  private darkTint = false;\n  private _debug?: ISpineDebugRenderer | undefined = undefined;\n\n  readonly _slotsObject: Record<string, { slot: Slot; container: Container } | null> = Object.create(null);\n  private clippingSlotToPixiMasks: Record<string, SlotsToClipping> = Object.create(null);\n\n  private getSlotFromRef(slotRef: number | string | Slot): Slot {\n    let slot: Slot | null;\n\n    if (typeof slotRef === 'number') slot = this.skeleton.slots[slotRef];\n    else if (typeof slotRef === 'string') slot = this.skeleton.findSlot(slotRef);\n    else slot = slotRef;\n\n    if (!slot) throw new Error(`No slot found with the given slot reference: ${slotRef}`);\n\n    return slot;\n  }\n\n  public spineAttachmentsDirty = true;\n  public spineTexturesDirty = true;\n\n  private _lastAttachments: Attachment[] = [];\n\n  private _stateChanged = true;\n  private attachmentCacheData: Record<string, AttachmentCacheData>[] = [];\n\n  public get debug(): ISpineDebugRenderer | undefined {\n    return this._debug;\n  }\n\n  /** Pass a {@link SpineDebugRenderer} or create your own {@link ISpineDebugRenderer} to render bones, meshes, ...\n   * @example spineGO.debug = new SpineDebugRenderer();\n   */\n  public set debug(value: ISpineDebugRenderer | undefined) {\n    if (this._debug) {\n      this._debug.unregisterSpine(this);\n    }\n    if (value) {\n      value.registerSpine(this);\n    }\n    this._debug = value;\n  }\n\n  private _autoUpdate = true;\n\n  public get autoUpdate(): boolean {\n    return this._autoUpdate;\n  }\n  /** When `true`, the Spine AnimationState and the Skeleton will be automatically updated using the {@link Ticker.shared} instance. */\n  public set autoUpdate(value: boolean) {\n    if (value) {\n      Ticker.shared.add(this.internalUpdate, this);\n    } else {\n      Ticker.shared.remove(this.internalUpdate, this);\n    }\n\n    this._autoUpdate = value;\n  }\n\n  private hasNeverUpdated = true;\n  constructor(options: SpineOptions | SkeletonData) {\n    if (options instanceof SkeletonData) {\n      options = {\n        skeletonData: options,\n      };\n    }\n\n    super();\n\n    const skeletonData = options instanceof SkeletonData ? options : options.skeletonData;\n\n    this.skeleton = new Skeleton(skeletonData);\n    this.state = new AnimationState(new AnimationStateData(skeletonData));\n    this.autoUpdate = options?.autoUpdate ?? true;\n\n    // dark tint can be enabled by options, otherwise is enable if at least one slot has tint black\n    this.darkTint =\n      options?.darkTint === undefined ? this.skeleton.slots.some((slot) => !!slot.data.darkColor) : options?.darkTint;\n\n    const slots = this.skeleton.slots;\n\n    for (let i = 0; i < slots.length; i++) {\n      this.attachmentCacheData[i] = Object.create(null);\n    }\n  }\n\n  /** If {@link Spine.autoUpdate} is `false`, this method allows to update the AnimationState and the Skeleton with the given delta. */\n  public update(dt: number): void {\n    this.internalUpdate(0, dt);\n  }\n\n  protected internalUpdate(_deltaFrame: any, deltaSeconds?: number): void {\n    // Because reasons, pixi uses deltaFrames at 60fps.\n    // We ignore the default deltaFrames and use the deltaSeconds from pixi ticker.\n    this._updateAndApplyState(deltaSeconds ?? Ticker.shared.deltaMS / 1000);\n  }\n\n  override get bounds() {\n    if (this._boundsDirty) {\n      this.updateBounds();\n    }\n\n    return this._bounds;\n  }\n\n  /**\n   * Set the position of the bone given in input through a {@link IPointData}.\n   * @param bone: the bone name or the bone instance to set the position\n   * @param outPos: the new position of the bone.\n   * @throws {Error}: if the given bone is not found in the skeleton, an error is thrown\n   */\n  public setBonePosition(bone: string | Bone, position: PointData): void {\n    const boneAux = bone;\n\n    if (typeof bone === 'string') {\n      bone = this.skeleton.findBone(bone) as Bone;\n    }\n\n    if (!bone) throw Error(`Cant set bone position, bone ${String(boneAux)} not found`);\n    vectorAux.set(position.x, position.y);\n\n    if (bone.parent) {\n      const aux = bone.parent.worldToLocal(vectorAux);\n\n      bone.x = aux.x;\n      bone.y = -aux.y;\n    } else {\n      bone.x = vectorAux.x;\n      bone.y = vectorAux.y;\n    }\n  }\n\n  /**\n   * Return the position of the bone given in input into an {@link IPointData}.\n   * @param bone: the bone name or the bone instance to get the position from\n   * @param outPos: an optional {@link IPointData} to use to return the bone position, rathern than instantiating a new object.\n   * @returns {IPointData | undefined}: the position of the bone, or undefined if no matching bone is found in the skeleton\n   */\n  public getBonePosition(bone: string | Bone, outPos?: PointData): PointData | undefined {\n    const boneAux = bone;\n\n    if (typeof bone === 'string') {\n      bone = this.skeleton.findBone(bone) as Bone;\n    }\n\n    if (!bone) {\n      console.error(`Cant set bone position! Bone ${String(boneAux)} not found`);\n\n      return outPos;\n    }\n\n    if (!outPos) {\n      outPos = { x: 0, y: 0 };\n    }\n\n    outPos.x = bone.worldX;\n    outPos.y = bone.worldY;\n\n    return outPos;\n  }\n\n  /**\n   * Advance the state and skeleton by the given time, then update slot objects too.\n   * The container transform is not updated.\n   *\n   * @param time the time at which to set the state\n   */\n  private _updateAndApplyState(time: number) {\n    this.hasNeverUpdated = false;\n\n    this.state.update(time);\n    this.skeleton.update(time);\n\n    const { skeleton } = this;\n\n    this.state.apply(skeleton);\n\n    this.beforeUpdateWorldTransforms(this);\n    skeleton.updateWorldTransform(Physics.update);\n    this.afterUpdateWorldTransforms(this);\n\n    this.updateSlotObjects();\n\n    this._stateChanged = true;\n\n    this._boundsDirty = true;\n\n    this.onViewUpdate();\n  }\n\n  /**\n   * - validates the attachments - to flag if the attachments have changed this state\n   * - transforms the attachments - to update the vertices of the attachments based on the new positions\n   * @internal\n   */\n  _validateAndTransformAttachments() {\n    if (!this._stateChanged) return;\n    this._stateChanged = false;\n\n    this.validateAttachments();\n\n    this.transformAttachments();\n  }\n\n  private validateAttachments() {\n    const currentDrawOrder = this.skeleton.drawOrder;\n\n    const lastAttachments = this._lastAttachments;\n\n    let index = 0;\n\n    let spineAttachmentsDirty = false;\n\n    for (let i = 0; i < currentDrawOrder.length; i++) {\n      const slot = currentDrawOrder[i];\n      const attachment = slot.getAttachment();\n\n      if (attachment) {\n        if (attachment !== lastAttachments[index]) {\n          spineAttachmentsDirty = true;\n          lastAttachments[index] = attachment;\n        }\n\n        index++;\n      }\n    }\n\n    if (index !== lastAttachments.length) {\n      spineAttachmentsDirty = true;\n      lastAttachments.length = index;\n    }\n\n    this.spineAttachmentsDirty = spineAttachmentsDirty;\n  }\n\n  private updateAndSetPixiMask(slot: Slot, last: boolean) {\n    // assign/create the currentClippingSlot\n    const attachment = slot.attachment;\n    if (attachment && attachment instanceof ClippingAttachment) {\n      const clip = (this.clippingSlotToPixiMasks[slot.data.name] ||= { slot, vertices: new Array<number>() });\n      clip.maskComputed = false;\n      this.currentClippingSlot = this.clippingSlotToPixiMasks[slot.data.name];\n      return;\n    }\n\n    // assign the currentClippingSlot mask to the slot object\n    let currentClippingSlot = this.currentClippingSlot;\n    let slotObject = this._slotsObject[slot.data.name];\n    if (currentClippingSlot && slotObject) {\n      let slotClipping = currentClippingSlot.slot;\n      let clippingAttachment = slotClipping.attachment as ClippingAttachment;\n\n      // create the pixi mask, only the first time and if the clipped slot is the first one clipped by this currentClippingSlot\n      let mask = currentClippingSlot.mask as Graphics;\n      if (!mask) {\n        mask = maskPool.obtain();\n        currentClippingSlot.mask = mask;\n        this.addChild(mask);\n      }\n\n      // compute the pixi mask polygon, if the clipped slot is the first one clipped by this currentClippingSlot\n      if (!currentClippingSlot.maskComputed) {\n        currentClippingSlot.maskComputed = true;\n        const worldVerticesLength = clippingAttachment.worldVerticesLength;\n        const vertices = currentClippingSlot.vertices;\n        clippingAttachment.computeWorldVertices(slotClipping, 0, worldVerticesLength, vertices, 0, 2);\n        mask.clear().poly(vertices).stroke({ width: 0 }).fill({ alpha: 0.25 });\n      }\n      slotObject.container.mask = mask;\n    } else if (slotObject?.container.mask) {\n      // remove the mask, if slot object has a mask, but currentClippingSlot is undefined\n      slotObject.container.mask = null;\n    }\n\n    // if current slot is the ending one of the currentClippingSlot mask, set currentClippingSlot to undefined\n    if (currentClippingSlot && (currentClippingSlot.slot.attachment as ClippingAttachment).endSlot == slot.data) {\n      this.currentClippingSlot = undefined;\n    }\n\n    // clean up unused masks\n    if (last) {\n      for (const key in this.clippingSlotToPixiMasks) {\n        const clippingSlotToPixiMask = this.clippingSlotToPixiMasks[key];\n        if (\n          (!(clippingSlotToPixiMask.slot.attachment instanceof ClippingAttachment) ||\n            !clippingSlotToPixiMask.maskComputed) &&\n          clippingSlotToPixiMask.mask\n        ) {\n          this.removeChild(clippingSlotToPixiMask.mask);\n          maskPool.free(clippingSlotToPixiMask.mask);\n          clippingSlotToPixiMask.mask = undefined;\n        }\n      }\n    }\n  }\n\n  private currentClippingSlot: SlotsToClipping | undefined;\n  private transformAttachments() {\n    const currentDrawOrder = this.skeleton.drawOrder;\n\n    for (let i = 0; i < currentDrawOrder.length; i++) {\n      const slot = currentDrawOrder[i];\n\n      this.updateAndSetPixiMask(slot, i === currentDrawOrder.length - 1);\n\n      const attachment = slot.getAttachment();\n\n      if (attachment) {\n        if (attachment instanceof MeshAttachment || attachment instanceof RegionAttachment) {\n          const cacheData = this._getCachedData(slot, attachment);\n\n          if (attachment instanceof RegionAttachment) {\n            attachment.computeWorldVertices(slot, cacheData.vertices, 0, 2);\n          } else {\n            attachment.computeWorldVertices(slot, 0, attachment.worldVerticesLength, cacheData.vertices, 0, 2);\n          }\n\n          // sequences uvs are known only after computeWorldVertices is invoked\n          if (cacheData.uvs.length < attachment.uvs.length) {\n            cacheData.uvs = new Float32Array(attachment.uvs.length);\n          }\n\n          // need to copy because attachments uvs are shared among skeletons using the same atlas\n          fastCopy((attachment.uvs as Float32Array).buffer, cacheData.uvs.buffer);\n\n          const skeleton = slot.bone.skeleton;\n          const skeletonColor = skeleton.color;\n          const slotColor = slot.color;\n\n          const attachmentColor = attachment.color;\n\n          cacheData.color.set(\n            skeletonColor.r * slotColor.r * attachmentColor.r,\n            skeletonColor.g * slotColor.g * attachmentColor.g,\n            skeletonColor.b * slotColor.b * attachmentColor.b,\n            skeletonColor.a * slotColor.a * attachmentColor.a,\n          );\n\n          if (slot.darkColor) {\n            cacheData.darkColor.setFromColor(slot.darkColor);\n          }\n\n          cacheData.skipRender = cacheData.clipped = false;\n\n          const texture = attachment.region?.texture.texture || Texture.EMPTY;\n\n          if (cacheData.texture !== texture) {\n            cacheData.texture = texture;\n            this.spineTexturesDirty = true;\n          }\n\n          if (clipper.isClipping()) {\n            this.updateClippingData(cacheData);\n          }\n        } else if (attachment instanceof ClippingAttachment) {\n          clipper.clipStart(slot, attachment);\n          continue;\n        }\n      }\n      clipper.clipEndWithSlot(slot);\n    }\n    clipper.clipEnd();\n  }\n\n  private updateClippingData(cacheData: AttachmentCacheData) {\n    cacheData.clipped = true;\n\n    clipper.clipTrianglesUnpacked(cacheData.vertices, cacheData.indices, cacheData.indices.length, cacheData.uvs);\n\n    const { clippedVertices, clippedUVs, clippedTriangles } = clipper;\n\n    const verticesCount = clippedVertices.length / 2;\n    const indicesCount = clippedTriangles.length;\n\n    if (!cacheData.clippedData) {\n      cacheData.clippedData = {\n        vertices: new Float32Array(verticesCount * 2),\n        uvs: new Float32Array(verticesCount * 2),\n        vertexCount: verticesCount,\n        indices: new Uint16Array(indicesCount),\n        indicesCount,\n      };\n\n      this.spineAttachmentsDirty = true;\n    }\n\n    const clippedData = cacheData.clippedData;\n\n    const sizeChange = clippedData.vertexCount !== verticesCount || indicesCount !== clippedData.indicesCount;\n\n    cacheData.skipRender = verticesCount === 0;\n\n    if (sizeChange) {\n      this.spineAttachmentsDirty = true;\n\n      if (clippedData.vertexCount < verticesCount) {\n        // buffer reuse!\n        clippedData.vertices = new Float32Array(verticesCount * 2);\n        clippedData.uvs = new Float32Array(verticesCount * 2);\n      }\n\n      if (clippedData.indices.length < indicesCount) {\n        clippedData.indices = new Uint16Array(indicesCount);\n      }\n    }\n\n    const { vertices, uvs, indices } = clippedData;\n\n    for (let i = 0; i < verticesCount; i++) {\n      vertices[i * 2] = clippedVertices[i * 2];\n      vertices[i * 2 + 1] = clippedVertices[i * 2 + 1];\n\n      uvs[i * 2] = clippedUVs[i * 2];\n      uvs[i * 2 + 1] = clippedUVs[i * 2 + 1];\n    }\n\n    clippedData.vertexCount = verticesCount;\n\n    for (let i = 0; i < indicesCount; i++) {\n      if (indices[i] !== clippedTriangles[i]) {\n        this.spineAttachmentsDirty = true;\n        indices[i] = clippedTriangles[i];\n      }\n    }\n\n    clippedData.indicesCount = indicesCount;\n  }\n\n  /**\n   * ensure that attached containers map correctly to their slots\n   * along with their position, rotation, scale, and visibility.\n   */\n  private updateSlotObjects() {\n    for (const i in this._slotsObject) {\n      const slotAttachment = this._slotsObject[i];\n\n      if (!slotAttachment) continue;\n\n      this.updateSlotObject(slotAttachment);\n    }\n  }\n\n  private updateSlotObject(slotAttachment: { slot: Slot; container: Container }) {\n    const { slot, container } = slotAttachment;\n\n    container.visible = this.skeleton.drawOrder.includes(slot);\n\n    if (container.visible) {\n      const bone = slot.bone;\n\n      container.position.set(bone.worldX, bone.worldY);\n\n      container.scale.x = bone.getWorldScaleX();\n      container.scale.y = bone.getWorldScaleY();\n\n      container.rotation = bone.getWorldRotationX() * DEG_TO_RAD;\n\n      container.alpha = this.skeleton.color.a * slot.color.a;\n    }\n  }\n\n  /** @internal */\n  _getCachedData(slot: Slot, attachment: RegionAttachment | MeshAttachment): AttachmentCacheData {\n    return this.attachmentCacheData[slot.data.index][attachment.name] || this.initCachedData(slot, attachment);\n  }\n\n  private initCachedData(slot: Slot, attachment: RegionAttachment | MeshAttachment): AttachmentCacheData {\n    let vertices: Float32Array;\n\n    if (attachment instanceof RegionAttachment) {\n      vertices = new Float32Array(8);\n\n      this.attachmentCacheData[slot.data.index][attachment.name] = {\n        id: `${slot.data.index}-${attachment.name}`,\n        vertices,\n        clipped: false,\n        indices: [0, 1, 2, 0, 2, 3],\n        uvs: new Float32Array(attachment.uvs.length),\n        color: new Color(1, 1, 1, 1),\n        darkColor: new Color(0, 0, 0, 0),\n        darkTint: this.darkTint,\n        skipRender: false,\n        texture: attachment.region?.texture.texture,\n      };\n    } else {\n      vertices = new Float32Array(attachment.worldVerticesLength);\n\n      this.attachmentCacheData[slot.data.index][attachment.name] = {\n        id: `${slot.data.index}-${attachment.name}`,\n        vertices,\n        clipped: false,\n        indices: attachment.triangles,\n        uvs: new Float32Array(attachment.uvs.length),\n        color: new Color(1, 1, 1, 1),\n        darkColor: new Color(0, 0, 0, 0),\n        darkTint: this.darkTint,\n        skipRender: false,\n        texture: attachment.region?.texture.texture,\n      };\n    }\n\n    return this.attachmentCacheData[slot.data.index][attachment.name];\n  }\n\n  protected onViewUpdate() {\n    // increment from the 12th bit!\n    this._didViewChangeTick++;\n    this._boundsDirty = true;\n\n    if (this.didViewUpdate) return;\n    this.didViewUpdate = true;\n\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n\n    if (renderGroup) {\n      renderGroup.onChildViewUpdate(this);\n    }\n\n    this.debug?.renderDebug(this);\n  }\n\n  /**\n   * Attaches a PixiJS container to a specified slot. This will map the world transform of the slots bone\n   * to the attached container. A container can only be attached to one slot at a time.\n   *\n   * @param container - The container to attach to the slot\n   * @param slotRef - The slot id or  slot to attach to\n   */\n  public addSlotObject(slot: number | string | Slot, container: Container) {\n    slot = this.getSlotFromRef(slot);\n\n    // need to check in on the container too...\n    for (const i in this._slotsObject) {\n      const obj = this._slotsObject[i];\n      if (obj && obj.container === container && obj.slot) {\n        this.removeSlotObject(obj.slot);\n      }\n    }\n\n    this.removeSlotObject(slot);\n\n    container.includeInBuild = false;\n\n    // TODO only add once??\n    this.addChild(container);\n\n    const slotObject = { container, slot };\n    this._slotsObject[slot.data.name] = slotObject;\n\n    this.updateSlotObject(slotObject);\n  }\n\n  /**\n   * Removes a PixiJS container from the slot it is attached to.\n   *\n   * @param container - The container to detach from the slot\n   * @param slotOrContainer - The container, slot id or slot to detach from\n   */\n  public removeSlotObject(slotOrContainer: number | string | Slot | Container) {\n    let containerToRemove: Container | undefined;\n\n    if (slotOrContainer instanceof Container) {\n      for (const i in this._slotsObject) {\n        if (this._slotsObject[i]?.container === slotOrContainer) {\n          this._slotsObject[i] = null;\n\n          containerToRemove = slotOrContainer;\n          break;\n        }\n      }\n    } else {\n      const slot = this.getSlotFromRef(slotOrContainer);\n\n      containerToRemove = this._slotsObject[slot.data.name]?.container;\n      this._slotsObject[slot.data.name] = null;\n    }\n\n    if (containerToRemove) {\n      this.removeChild(containerToRemove);\n\n      containerToRemove.includeInBuild = true;\n    }\n  }\n\n  /**\n   * Returns a container attached to a slot, or undefined if no container is attached.\n   *\n   * @param slotRef - The slot id or slot to get the attachment from\n   * @returns - The container attached to the slot\n   */\n  public getSlotObject(slot: number | string | Slot) {\n    slot = this.getSlotFromRef(slot);\n\n    return this._slotsObject[slot.data.name]?.container;\n  }\n\n  protected updateBounds() {\n    this._boundsDirty = false;\n\n    this.skeletonBounds ||= new SkeletonBounds();\n\n    const skeletonBounds = this.skeletonBounds;\n\n    skeletonBounds.update(this.skeleton, true);\n\n    if (skeletonBounds.minX === Infinity) {\n      if (this.hasNeverUpdated) {\n        this._updateAndApplyState(0);\n        this._boundsDirty = false;\n      }\n      this._validateAndTransformAttachments();\n\n      const drawOrder = this.skeleton.drawOrder;\n      const bounds = this._bounds;\n\n      bounds.clear();\n\n      for (let i = 0; i < drawOrder.length; i++) {\n        const slot = drawOrder[i];\n\n        const attachment = slot.getAttachment();\n\n        if (attachment && (attachment instanceof RegionAttachment || attachment instanceof MeshAttachment)) {\n          const cacheData = this._getCachedData(slot, attachment);\n\n          bounds.addVertexData(cacheData.vertices, 0, cacheData.vertices.length);\n        }\n      }\n    } else {\n      this._bounds.minX = skeletonBounds.minX;\n      this._bounds.minY = skeletonBounds.minY;\n      this._bounds.maxX = skeletonBounds.maxX;\n      this._bounds.maxY = skeletonBounds.maxY;\n    }\n  }\n\n  /** @internal */\n  addBounds(bounds: Bounds) {\n    bounds.addBounds(this.bounds);\n  }\n\n  /**\n   * Destroys this sprite renderable and optionally its texture.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n   */\n  public override destroy(options: DestroyOptions = false) {\n    super.destroy(options);\n\n    Ticker.shared.remove(this.internalUpdate, this);\n    this.state.clearListeners();\n    this.debug = undefined;\n    this.skeleton = null as any;\n    this.state = null as any;\n    (this._slotsObject as any) = null;\n    this._lastAttachments.length = 0;\n    this.attachmentCacheData = null as any;\n  }\n\n  /** Converts a point from the skeleton coordinate system to the Pixi world coordinate system. */\n  public skeletonToPixiWorldCoordinates(point: { x: number; y: number }) {\n    this.worldTransform.apply(point, point);\n  }\n\n  /** Converts a point from the Pixi world coordinate system to the skeleton coordinate system. */\n  public pixiWorldCoordinatesToSkeleton(point: { x: number; y: number }) {\n    this.worldTransform.applyInverse(point, point);\n  }\n\n  /** Converts a point from the Pixi world coordinate system to the bone's local coordinate system. */\n  public pixiWorldCoordinatesToBone(point: { x: number; y: number }, bone: Bone) {\n    this.pixiWorldCoordinatesToSkeleton(point);\n    if (bone.parent) {\n      bone.parent.worldToLocal(point as Vector2);\n    } else {\n      bone.worldToLocal(point as Vector2);\n    }\n  }\n\n  /**\n   * Use this method to instantiate a Spine game object.\n   * Before instantiating a Spine game object, the skeleton (`.skel` or `.json`) and the atlas text files must be loaded into the Assets. For example:\n   * ```\n   * PIXI.Assets.add(\"sackData\", \"./assets/sack-pro.skel\");\n   * PIXI.Assets.add(\"sackAtlas\", \"./assets/sack-pma.atlas\");\n   * await PIXI.Assets.load([\"sackData\", \"sackAtlas\"]);\n   * ```\n   * Once a Spine game object is created, its skeleton data is cached into {@link Cache} using the key:\n   * `${skeletonAssetName}-${atlasAssetName}-${options?.scale ?? 1}`\n   *\n   * @param options - Options to configure the Spine game object. See {@link SpineFromOptions}\n   * @returns {Spine} The Spine game object instantiated\n   */\n  static from({ skeleton, atlas, scale = 1, darkTint, autoUpdate = true }: SpineFromOptions) {\n    const cacheKey = `${skeleton}-${atlas}-${scale}`;\n\n    if (Cache.has(cacheKey)) {\n      return new Spine(Cache.get<SkeletonData>(cacheKey));\n    }\n\n    const skeletonAsset = Assets.get<any | Uint8Array>(skeleton);\n\n    const atlasAsset = Assets.get<TextureAtlas>(atlas);\n    const attachmentLoader = new AtlasAttachmentLoader(atlasAsset);\n    const parser =\n      skeletonAsset instanceof Uint8Array ? new SkeletonBinary(attachmentLoader) : new SkeletonJson(attachmentLoader);\n\n    parser.scale = scale;\n    const skeletonData = parser.readSkeletonData(skeletonAsset);\n\n    Cache.set(cacheKey, skeletonData);\n\n    return new Spine({\n      skeletonData,\n      darkTint,\n      autoUpdate,\n    });\n  }\n}\n", "import { extensions } from 'pixi.js';\nimport { Plugin } from '../Plugin';\nimport { Spine, spineLoaderExtension, SpinePipe, spineTextureAtlasLoader } from './pixi-spine';\n\nexport class SpinePlugin extends Plugin {\n  public readonly id = 'SpinePlugin';\n\n  public async initialize() {\n    extensions.add(spineTextureAtlasLoader);\n    extensions.add(spineLoaderExtension);\n    extensions.add(SpinePipe);\n    (window as any).Spine = Spine;\n  }\n}\n"],
  "mappings": "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",
  "names": ["StringSet", "__publicField", "value", "contains", "values", "oldSize", "n", "_Color", "r", "g", "b", "a", "c", "hex", "color", "x", "Color", "_MathUtils", "min", "max", "degrees", "y", "mode", "u", "d", "MathUtils", "_Utils", "source", "sourceStart", "dest", "destStart", "numElements", "i", "j", "array", "fromIndex", "toIndex", "size", "defaultValue", "alpha", "blend", "element", "identity", "type", "name", "Utils", "Pool", "instantiator", "item", "items", "Vector2", "len", "Attachment", "_VertexAttachment", "slot", "start", "count", "worldVertices", "offset", "stride", "skeleton", "deformArray", "vertices", "bones", "bone", "v", "w", "vx", "vy", "skip", "skeletonBones", "wx", "wy", "weight", "deform", "f", "attachment", "VertexAttachment", "_Sequence", "copy", "index", "region", "basePath", "result", "frame", "Sequence", "SequenceMode", "SequenceModeValues", "Animation", "timelines", "duration", "ids", "lastTime", "time", "loop", "events", "direction", "MixBlend", "MixDirection", "Property", "Timeline", "frameCount", "propertyIds", "frames", "step", "CurveTimeline", "bezierCount", "newCurves", "bezier", "time1", "value1", "cx1", "cy1", "cx2", "cy2", "time2", "value2", "curves", "tmpx", "tmpy", "dddx", "dddy", "ddx", "ddy", "dx", "dy", "frameIndex", "valueOffset", "CurveTimeline1", "propertyId", "ii", "curveType", "before", "current", "setup", "s", "CurveTimeline2", "propertyId1", "propertyId2", "RotateTimeline", "boneIndex", "TranslateTimeline", "t", "TranslateXTimeline", "TranslateYTimeline", "ScaleTimeline", "bx", "by", "ScaleXTimeline", "ScaleYTimeline", "ShearTimeline", "ShearXTimeline", "ShearYTimeline", "InheritTimeline", "inherit", "RGBATimeline", "slotIndex", "RGBTimeline", "AlphaTimeline", "RGBA2Timeline", "r2", "g2", "b2", "light", "dark", "setupLight", "setupDark", "RGB2Timeline", "AttachmentTimeline", "attachmentName", "DeformTimeline", "firedEvents", "slotAttachment", "vertexCount", "vertexAttachment", "setupVertices", "lastVertices", "percent", "prevVertices", "nextVertices", "prev", "_EventTimeline", "event", "frameTime", "EventTimeline", "_DrawOrderTimeline", "drawOrder", "idx", "drawOrderToSetupIndex", "slots", "DrawOrderTimeline", "IkConstraintTimeline", "ikConstraintIndex", "mix", "softness", "bendDirection", "compress", "stretch", "constraint", "TransformConstraintTimeline", "transformConstraintIndex", "mixRotate", "mixX", "mixY", "mixScaleX", "mixScaleY", "mixShearY", "data", "rotate", "scaleX", "scaleY", "shearY", "PathConstraintPositionTimeline", "pathConstraintIndex", "PathConstraintSpacingTimeline", "PathConstraintMixTimeline", "PhysicsConstraintTimeline", "physicsConstraintIndex", "property", "PhysicsConstraintInertiaTimeline", "PhysicsConstraintStrengthTimeline", "PhysicsConstraintDampingTimeline", "PhysicsConstraintMassTimeline", "PhysicsConstraintWindTimeline", "PhysicsConstraintGravityTimeline", "PhysicsConstraintMixTimeline", "_PhysicsConstraintResetTimeline", "PhysicsConstraintResetTimeline", "_SequenceTimeline", "delay", "modeAndIndex", "SequenceTimeline", "_AnimationState", "EventQueue", "TrackEntry", "delta", "tracks", "currentDelta", "next", "nextTime", "from", "to", "finished", "applied", "attachments", "animationLast", "animationTime", "applyTime", "applyEvents", "timelineCount", "timeline", "timelineMode", "shortestRotation", "firstFrame", "timelineBlend", "SUBSEQUENT", "setupState", "SETUP", "alphaHold", "alphaMix", "timelineHoldMix", "FIRST", "HOLD_SUBSEQUENT", "HOLD_FIRST", "holdMix", "CURRENT", "timelinesRotation", "r1", "total", "diff", "lastTotal", "lastDiff", "loops", "dir", "entry", "animationStart", "animationEnd", "trackLastWrapped", "complete", "cycles", "oldDrainDisabled", "trackIndex", "interrupt", "animationName", "animation", "last", "mixDuration", "timelinesCount", "propertyIDs", "outer", "HOLD_MIX", "listener", "AnimationState", "animState", "EventType", "objects", "listeners", "AnimationStateData", "skeletonData", "fromName", "toName", "key", "BoundingBoxAttachment", "ClippingAttachment", "Texture", "image", "TextureFilter", "TextureWrap", "TextureRegion", "TextureAtlas", "atlasText", "reader", "TextureAtlasReader", "pageFields", "page", "regionFields", "line", "names", "TextureAtlasRegion", "field", "entryValues", "TextureAtlasPage", "assetManager", "pathPrefix", "_a", "text", "colon", "lastMatch", "comma", "texture", "MeshAttachment", "path", "regionUVs", "uvs", "width", "height", "textureWidth", "textureHeight", "parentMesh", "PathAttachment", "PointAttachment", "point", "cos", "sin", "_RegionAttachment", "regionScaleX", "regionScaleY", "localX", "localY", "localX2", "localY2", "radians", "localXCos", "localXSin", "localYCos", "localYSin", "localX2Cos", "localX2Sin", "localY2Cos", "localY2Sin", "vertexOffset", "offsetX", "offsetY", "RegionAttachment", "AtlasAttachmentLoader", "atlas", "sequence", "regions", "skin", "BoneData", "parent", "Inherit", "Bone", "physics", "rotation", "shearX", "sx", "sy", "rx", "ry", "pa", "pb", "pc", "pd", "la", "lb", "lc", "ld", "prx", "za", "zc", "zb", "zd", "pid", "ia", "ib", "ic", "id", "ra", "rb", "rc", "rd", "det", "world", "invDet", "local", "worldRotation", "localRotation", "ConstraintData", "order", "skinRequired", "Event", "EventData", "IkConstraint", "target", "targetX", "targetY", "uniform", "p", "rotationIK", "tx", "ty", "sa", "sc", "dd", "child", "bendDir", "px", "py", "psx", "psy", "csx", "os1", "os2", "s2", "cx", "cy", "cwx", "cwy", "pp", "l1", "l2", "a1", "a2", "td", "sd", "aa", "bb", "ta", "c1", "c2", "q", "r0", "minAngle", "minX", "minDist", "minY", "maxAngle", "maxX", "maxDist", "maxY", "os", "IkConstraintData", "boneData", "PathConstraintData", "PositionMode", "SpacingMode", "RotateMode", "slotData", "_PathConstraint", "tangents", "scale", "boneCount", "spacesCount", "spaces", "lengths", "spacing", "setupLength", "sum", "length", "lengthSpacing", "positions", "boneX", "boneY", "offsetRotation", "tip", "position", "out", "closed", "verticesLength", "curveCount", "prevCurve", "pathLength", "multiplier", "o", "curve", "space", "x1", "y1", "x2", "y2", "dddfx", "dddfy", "ddfx", "ddfy", "dfx", "dfy", "segments", "curveLength", "segment", "temp", "tt", "ttt", "uu", "uuu", "ut", "ut3", "uut3", "utt3", "PathConstraint", "PhysicsConstraint", "rotateOrShearX", "l", "Physics", "qx", "qy", "m", "e", "Skeleton", "ca", "mr", "h", "Slot", "TransformConstraint", "translate", "tb", "tc", "degRadReflect", "offsetShearY", "_Skeleton", "ikConstraintData", "transformConstraintData", "pathConstraintData", "physicsConstraintData", "updateCache", "skinBones", "ikConstraints", "transformConstraints", "pathConstraints", "physicsConstraints", "ikCount", "transformCount", "pathCount", "physicsCount", "constraintCount", "constrained", "slotBone", "pathBones", "nn", "rootBone", "updatable", "boneName", "slotName", "skinName", "newSkin", "constraintName", "clipper", "triangles", "mesh", "PhysicsConstraintData", "SkeletonData", "skins", "eventDataName", "animations", "SkinEntry", "Skin", "contained", "dictionary", "entries", "slotAttachments", "oldSkin", "skinAttachment", "SlotData", "BlendMode", "TransformConstraintData", "SkeletonBinary", "attachmentLoader", "binary", "input", "BinaryInput", "lowHash", "highHash", "nonessential", "str", "darkColor", "flags", "defaultSkin", "linkedMesh", "eventName", "slotCount", "AttachmentType", "box", "hullLength", "edges", "inheritTimelines", "skinIndex", "LinkedMesh", "constantSpeed", "endSlotIndex", "clip", "weighted", "Vertices", "weights", "bonesArray", "timelineType", "frameLast", "SLOT_ATTACHMENT", "SLOT_RGBA", "CURVE_STEPPED", "CURVE_BEZIER", "setBezier", "SLOT_RGB", "SLOT_RGBA2", "nr", "ng", "nb", "na", "nr2", "ng2", "nb2", "SLOT_RGB2", "SLOT_ALPHA", "BONE_INHERIT", "BONE_ROTATE", "readTimeline1", "BONE_TRANSLATE", "readTimeline2", "BONE_TRANSLATEX", "BONE_TRANSLATEY", "BONE_SCALE", "BONE_SCALEX", "BONE_SCALEY", "BONE_SHEAR", "BONE_SHEARX", "BONE_SHEARY", "mix2", "softness2", "mixRotate2", "mixX2", "mixY2", "mixScaleX2", "mixScaleY2", "mixShearY2", "PATH_POSITION", "PATH_SPACING", "PATH_MIX", "PHYSICS_RESET", "PHYSICS_INERTIA", "PHYSICS_STRENGTH", "PHYSICS_DAMPING", "PHYSICS_MASS", "PHYSICS_WIND", "PHYSICS_GRAVITY", "PHYSICS_MIX", "iii", "nnn", "ATTACHMENT_DEFORM", "deformLength", "end", "vn", "ATTACHMENT_SEQUENCE", "drawOrderCount", "offsetCount", "unchanged", "originalIndex", "unchangedIndex", "eventCount", "eventData", "strings", "buffer", "optimizePositive", "byteCount", "chars", "LinkedMesh$1", "inheritDeform", "nvalue1", "nvalue2", "SkeletonBounds", "updateAabb", "boundingBoxes", "polygons", "polygonPool", "boundingBox", "polygon", "bounds", "prevIndex", "inside", "vertexY", "prevY", "vertexX", "width12", "height12", "det1", "x3", "y3", "x4", "y4", "det2", "width34", "height34", "det3", "Triangulator", "verticesArray", "indices", "isConcave", "previous", "p1", "p2", "p3", "p1x", "p1y", "p2x", "p2y", "p3x", "p3y", "previousIndex", "nextIndex", "convexPolygons", "convexPolygonsIndices", "polygonIndices", "fanBaseIndex", "lastWinding", "t1", "t2", "t3", "merged", "winding1", "winding2", "firstIndex", "lastIndex", "prevPrevX", "prevPrevY", "prevX", "firstX", "firstY", "secondX", "secondY", "winding", "otherIndices", "otherFirstIndex", "otherSecondIndex", "otherLastIndex", "otherPoly", "SkeletonClipping", "clippingPolygon", "clippingPolygons", "verticesLengthOrTriangles", "trianglesOrTrianglesLength", "trianglesLengthOrUvs", "uvsOrLight", "lightOrDark", "darkOrTwoColor", "twoColorParam", "trianglesLength", "twoColor", "clipOutput", "clippedVertices", "clippedTriangles", "polygonsCount", "clipOutputLength", "clipOutputCount", "clipOutputItems", "clippedVerticesItems", "clippedTrianglesItems", "vertexSize", "u1", "v1", "u2", "v2", "u3", "v3", "d0", "d1", "d2", "d4", "c0", "clippedUVs", "clippedUVsItems", "clippedUVSItems", "clippingArea", "output", "originalOutput", "clipped", "clippingVerticesLast", "clippingVertices", "edgeX", "edgeY", "ex", "ey", "outputStart", "inputVertices", "inputX", "inputY", "inputX2", "inputY2", "s1", "ix", "iy", "verticeslength", "area", "lastX", "other", "SkeletonJson", "json", "root", "skeletonMap", "getValue", "boneMap", "parentName", "slotMap", "constraintMap", "targetName", "skinMap", "entryName", "eventMap", "animationMap", "map", "scaledVertices", "timelineName", "timelineMap", "keyMap", "nextMap", "newColor", "readCurve", "color2", "newColor2", "aFrame", "constraintIndex", "attachmentsName", "attachmentsMap", "slotMapName", "attachmentMapName", "attachmentMap", "timelineMapName", "verticesValue", "lastDelay", "drawOrderMap", "offsets", "offsetMap", "keys", "name1", "name2", "_SpineTexture", "PixiTexture", "minFilter", "magFilter", "style", "uWrap", "vWrap", "filter", "wrap", "SpineTexture", "spineTextureAtlasLoader", "ExtensionType", "checkExtension", "split", "_b", "Resolver", "LoaderParserPriority", "url", "DOMAdapter", "asset", "options", "isExtensionRight", "isString", "loader", "metadata", "retval", "TextureSource", "pixiTexture", "textureLoadingPromises", "pageName", "providedPage", "assetsToLoadIn", "pixiPromise", "isJson", "resource", "isBuffer", "spineLoaderExtension", "response", "isJsonSpineModel", "isBinarySpineModel", "BatchableSpineSlot", "slotColor", "parentColor", "parentAlpha", "abgr", "mixedA", "parentB", "parentG", "parentR", "mixedR", "mixedG", "mixedB", "renderable", "blendMode", "roundPixels", "clippedData", "spineBlendModeMap", "_SpinePipe", "renderer", "spine", "gpuSpine", "cacheData", "batchableSpineSlot", "instructionSet", "batcher", "containerAttachment", "container", "collectAllRenderables", "SpinePipe", "extensions", "vectorAux", "maskPool", "Graphics", "Spine", "ViewContainer", "slotRef", "Ticker", "dt", "_deltaFrame", "deltaSeconds", "boneAux", "aux", "outPos", "currentDrawOrder", "lastAttachments", "spineAttachmentsDirty", "currentClippingSlot", "slotObject", "slotClipping", "clippingAttachment", "mask", "worldVerticesLength", "clippingSlotToPixiMask", "fastCopy", "skeletonColor", "attachmentColor", "verticesCount", "indicesCount", "sizeChange", "DEG_TO_RAD", "renderGroup", "obj", "slotOrContainer", "containerToRemove", "Container", "skeletonBounds", "darkTint", "autoUpdate", "cacheKey", "Cache", "skeletonAsset", "Assets", "atlasAsset", "parser", "SpinePlugin", "Plugin"]
}
